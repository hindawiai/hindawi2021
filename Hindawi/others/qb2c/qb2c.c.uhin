<शैली गुरु>
#समावेश <मानकपन.स>
#समावेश <माला.स>
#समावेश <मानकघोष.स>
#समावेश <मानककोष.स>
#समावेश <समलाँघ.स>
#समावेश <समय.स>
#समावेश <sys/समय.स>
#समावेश <unistd.h>
#समावेश <गणित.स>
#समावेश <प्रकार.स>

/* This file was generated by QuasiBASIC to C translator */
/* qb2c  ver.4.14 27.Oct 1999                            */

#घोषणा LMAX 1023 /* Max strig length */
#घोषणा NSMX 127   /* Max no of SUBroutines */
#घोषणा NTKM 30   /* Max no of lines per phys. line */
#घोषणा GMAX 16   /* Max level of nesting GOSUBs */
#घोषणा NCMX 30   /* Max number of CONSTants */
#घोषणा CMAX 127   /* Max number of CH and CM lines (-C flag on) */
#घोषणा OPNX 20   /* Max number of file poपूर्णांकers */
#घोषणा IOPN 20   /* Max number of खोलोed I/O ports */
#घोषणा TMAX 140   /* Max dimension of पंचांगp$() */
#घोषणा NDAT 256   /* Max number of DATA lines */
#घोषणा NDYN 50   /* Max number of dynamically declared array */
#घोषणा MARR 80   /* Max number of arrays in MAIN */
#घोषणा SHMX 40   /* Max total number of SHARED arrays */
अटल पूर्णांक jrplc_पूर्णांक = 15, jnfun_पूर्णांक = 30, NFUN = 41, log_1, log_2;
अटल अक्षर *rplc_S[] = अणु"CINT",   "INT",    "ABS", "ATN", "SQR",
                         "LOG",    "SIN",    "COS",    "TAN",   "EXP",
                         "DATE$",  "TIME$",  "TIMER", "RND",
                         "INKEY$", "INP(",
                         "SPACE$", "RIGHT$", "LEFT$",  "MID$",
                         "STR$",   "CHR$",   "ASC",    "VAL",
                         "MIN", "MAX",
                         "LEN",    "SGN",    "EOF",  "LOF", "EXISTS",
                         "RANDOMIZE", "SHELL",  "COMMAND$",
                         "LCASE$", "UCASE$", "ENVIRON$", "HEX$", "OCT$",
                         "STRING$", "XLEN", "DATA"पूर्ण;
  अटल अक्षर def__str[26];
  अटल अक्षर def__पूर्णांक[26];
  अटल अक्षर def__dbl[26];

/* Function declarations */
बाह्य अक्षर  *SPACE_S(पूर्णांक);
बाह्य अक्षर  *MID_S(अक्षर *, पूर्णांक, पूर्णांक);
बाह्य अक्षर  *LEFT_S(अक्षर *, पूर्णांक);
बाह्य अक्षर  *RIGHT_S(अक्षर *, पूर्णांक);
बाह्य अक्षर  *STR_S(द्विगुन);
बाह्य अक्षर  *CHR_S(पूर्णांक);
बाह्य दीर्घ   ASC(अक्षर *);
बाह्य द्विगुन VAL(अक्षर *);
बाह्य पूर्णांक    LEN(अक्षर *);
बाह्य दीर्घ   Nपूर्णांक(द्विगुन);
बाह्य पूर्णांक    eof(खाता *);
बाह्य अक्षर  *COMMAND_S(पूर्णांक, अक्षर *argv_S[]);
बाह्य व्योम    RANDOMIZE(दीर्घ);
बाह्य द्विगुन  TIMER(व्योम);
बाह्य द्विगुन DBL(द्विगुन);
बाह्य अक्षर  *TIME_S(पूर्णांक);

/* Shared variables and arrays declarations */
अटल लाँघ_बफ j__buf[ 16 ];
अटल पूर्णांक  j__lev=0;
अटल अक्षर  पंचांगp_S[TMAX+1][LMAX];
अटल पूर्णांक   statfl_पूर्णांक[NSMX+1];
अटल अक्षर  aपंचांगp_S[51][80+1];
अटल अक्षर  dyna_S[NSMX+1][NDYN+1][40+1];
अटल पूर्णांक   ndyna_पूर्णांक[NSMX+1];
अटल अक्षर  temp_S[11][LMAX];
अटल अक्षर  tcnst_S[NCMX+1][80+1];
अटल अक्षर   w__S[16][LMAX];
अटल पूर्णांक    j__S = 0, j__Sपंचांगp;
अटल पूर्णांक    w__s[16];
अटल पूर्णांक    i__s = 0, i__sपंचांगp;
अटल दीर्घ   w__l[16];
अटल पूर्णांक    i__l = 0, i__lपंचांगp;
अटल द्विगुन w__d[16];
अटल पूर्णांक    i__d = 0, i__dपंचांगp;
अटल अक्षर tws__S[LMAX];
अटल पूर्णांक  isub_पूर्णांक, ni_पूर्णांक, nl_पूर्णांक, bwfl_पूर्णांक, mathfl_पूर्णांक, mflg_पूर्णांक;
अटल पूर्णांक  expflg_पूर्णांक, extrnfl_पूर्णांक, vdblff_पूर्णांक, nptk_पूर्णांक, defstr_पूर्णांक;
अटल पूर्णांक  spacff_पूर्णांक, midff_पूर्णांक, leftff_पूर्णांक, rightff_पूर्णांक, strff_पूर्णांक;
अटल पूर्णांक  chrff_पूर्णांक, ascff_पूर्णांक, valff_पूर्णांक, lenff_पूर्णांक, sgnff_पूर्णांक;
अटल पूर्णांक  पूर्णांकff_पूर्णांक, nपूर्णांकff_पूर्णांक, eofff_पूर्णांक, commff_पूर्णांक, rndff_पूर्णांक;
अटल पूर्णांक  srndff_पूर्णांक, समयrff_पूर्णांक, dateff_पूर्णांक, समयff_पूर्णांक, inkeyff_पूर्णांक;
अटल पूर्णांक  inputff_पूर्णांक, colorff_पूर्णांक, clsff_पूर्णांक, lहालff_पूर्णांक, uहालff_पूर्णांक;
अटल पूर्णांक  envff_पूर्णांक, lofff_पूर्णांक, hexff_पूर्णांक, octff_पूर्णांक, SScan_पूर्णांक;
अटल पूर्णांक  stringf_पूर्णांक, datalin_पूर्णांक, txlen_पूर्णांक, usingff_पूर्णांक, tflg_पूर्णांक;
अटल पूर्णांक  existff_पूर्णांक, Iflag_पूर्णांक, naपंचांगp_पूर्णांक, Arrfl_पूर्णांक, stripff_पूर्णांक;
अटल पूर्णांक  पूर्णांकflg_पूर्णांक, Dflg_पूर्णांक, करोblflg_पूर्णांक, दीर्घflg_पूर्णांक, स्थिरfl_पूर्णांक;
अटल पूर्णांक  ncnst_पूर्णांक, defपूर्णांक_पूर्णांक, defdbl_पूर्णांक;
अटल अक्षर spc_S[LMAX], line_S[LMAX];

/* Open files poपूर्णांकers */
खाता *fp_2, *fp_1, *fp_3;
अक्षर fn2__S[160], fn1__S[160], fn3__S[160];

पूर्णांक मुख्य(पूर्णांक n_arg_पूर्णांक, अक्षर *argv_S[])
अणु
 अटल पूर्णांक  nfuncs_पूर्णांक, nSHRDtk_पूर्णांक, lspac_पूर्णांक, nsub_पूर्णांक, jopn_पूर्णांक;
 अटल पूर्णांक  nlखोलो_पूर्णांक, संकेत_पूर्णांक, endमुख्य_पूर्णांक, usersub_पूर्णांक, initline_पूर्णांक;
 अटल पूर्णांक  lastline_पूर्णांक, अक्षरtfl_पूर्णांक, दीर्घtfl_पूर्णांक, भग्नtfl_पूर्णांक;
 अटल पूर्णांक  पूर्णांकtfl_पूर्णांक, byttfl_पूर्णांक, ncg_पूर्णांक, ncm_पूर्णांक, nlmax_पूर्णांक, पंचांगpfl_पूर्णांक;
 अटल पूर्णांक  i_पूर्णांक, itok_पूर्णांक, commfl_पूर्णांक, nखोलो_पूर्णांक, niखोलो_पूर्णांक, g_पूर्णांक;
 अटल पूर्णांक  n_पूर्णांक, j_पूर्णांक, togfl_पूर्णांक, funcflag_पूर्णांक, समयfl_पूर्णांक;
 अटल पूर्णांक  sysसमयfl_पूर्णांक, unistdfl_पूर्णांक, छोड़ोfl_पूर्णांक, twsflg_पूर्णांक;
 अटल पूर्णांक  sigअगरf_पूर्णांक, xwflag_पूर्णांक, minff_पूर्णांक, maxff_पूर्णांक, grafflg_पूर्णांक;
 अटल पूर्णांक  पढ़ोff_पूर्णांक, lleng_पूर्णांक, nvar_पूर्णांक, retrnfl_पूर्णांक, xपंचांगpfl_पूर्णांक;
 अटल पूर्णांक  flag_पूर्णांक, ii_पूर्णांक, k_पूर्णांक, jflg_पूर्णांक, typ_पूर्णांक, leng_पूर्णांक, L_पूर्णांक;
 अटल पूर्णांक  brcnt_पूर्णांक, jsub_पूर्णांक, narr_पूर्णांक, alis_पूर्णांक, deffnf_पूर्णांक;
 अटल पूर्णांक  datacnt_पूर्णांक, ntok_पूर्णांक, lremfl_पूर्णांक, thnfl_पूर्णांक, dflag_पूर्णांक;
 अटल पूर्णांक  jj_पूर्णांक, i1_पूर्णांक, i2_पूर्णांक, nflag_पूर्णांक, पंचांगp1_पूर्णांक, पंचांगp2_पूर्णांक;
 अटल पूर्णांक  पंचांगp3_पूर्णांक, पंचांगp4_पूर्णांक, पंचांगp8_पूर्णांक, minusf_पूर्णांक, tip_पूर्णांक, ix0_पूर्णांक;
 अटल पूर्णांक  fcond_पूर्णांक, lmid_पूर्णांक, lbfl_पूर्णांक, lz_पूर्णांक, c64flg_पूर्णांक, postflg_पूर्णांक;
 अटल पूर्णांक  cflag_पूर्णांक, bcppflg_पूर्णांक, ansअगरlg_पूर्णांक, noshell_पूर्णांक, updateff_पूर्णांक;
 अटल पूर्णांक  debug_पूर्णांक, Lmax_पूर्णांक, prnfl_पूर्णांक, colorfl_पूर्णांक, rflag_पूर्णांक;
 अटल भग्न T0, x, rflag;
 अटल अक्षर c_S[LMAX], Version_S[LMAX], fff_S[LMAX], fns_S[LMAX];
 अटल अक्षर shred_S[LMAX], b_S[LMAX], क्षणिक_ख_S[LMAX], पंचांगpfil0_S[LMAX];
 अटल अक्षर पूर्णांक_S[LMAX], भग्न_S[LMAX], a_S[LMAX], d_S[LMAX], n_S[LMAX];
 अटल अक्षर fn_S[LMAX], funcnam_S[LMAX], shपंचांगp_S[LMAX], e_S[LMAX];
 अटल अक्षर fime_S[LMAX], z_S[LMAX], rea_S[LMAX], sss_S[LMAX], lon_S[LMAX];
 अटल अक्षर dbl_S[LMAX], byt_S[LMAX], sho_S[LMAX], varlist_S[LMAX];
 अटल अक्षर inpf_S[LMAX], sपूर्णांक_S[LMAX], srea_S[LMAX], ssss_S[LMAX];
 अटल अक्षर slin_S[LMAX], sdbl_S[LMAX], t_S[LMAX], f_S[LMAX], prtf_S[LMAX];
 अटल अक्षर क्रमmt_S[LMAX], prt_S[LMAX], using_S[LMAX], labl_S[LMAX];
 अटल अक्षर mode_S[LMAX], access_S[LMAX], Len_S[LMAX], siz_S[LMAX];
 अटल अक्षर enc_S[LMAX], fam_S[LMAX], optim_S[LMAX], outf_S[LMAX];
 अटल अक्षर ime_S[LMAX], bcp_S[LMAX];
 अटल दीर्घ g_दीर्घ;
 अटल अक्षर c;

 /*  qb2c-3.40 मुक्त QuasiBASIC to C converter, first version: 04/04/1996 */
 /*  This is (itself !) a QB2C code. Translate it with: qb2c -c qb2c */


 अटल पूर्णांक   पंचांगp_पूर्णांक[17];   /* क्रम various temporary use (eg. 600,...) */
 अटल पूर्णांक   tok_पूर्णांक[NTKM+1];   /* Used in (spliter 900) */
 अटल अक्षर  shrd_S[201][80+1];   /* contains list of all SHARED variables and arrays */
 अटल अक्षर  shtok_S[NSMX+1][TMAX+1][80+1];   /* SHARED variables and arrays storage */
 अटल पूर्णांक   nshtok_पूर्णांक[NSMX+1];   /* Max second index in shtok$(,) and statfl%() */
 अटल अक्षर  linetok_S[NTKM+1][LMAX];   /* Line tokens (spliter 900) */
 अटल अक्षर  cnst_S[NCMX+1][80+1];   /* global CONST-ant declarations */
 अटल अक्षर  vari_S[NSMX+1][LMAX];   /* Declaration strings. Toliko subrutina max. */
 अटल अक्षर  varr_S[NSMX+1][LMAX];
 अटल अक्षर  vars_S[NSMX+1][LMAX];
 अटल अक्षर  varl_S[NSMX+1][LMAX];
 अटल अक्षर  vard_S[NSMX+1][LMAX];
 अटल अक्षर  varb_S[NSMX+1][LMAX];
 अटल अक्षर  vash_S[NSMX+1][LMAX];
 अटल पूर्णांक   ख_खोलो_पूर्णांक[OPNX+1];   /* खोलो file logical numbers, 0..nखोलो% */
 अटल अक्षर  fio_S[IOPN+1][80+1];   /* fast access I/O port logical numbers, 1..niखोलो% */
 अटल अक्षर  lख_खोलो_S[OPNX+1+1][LMAX];
 अटल पूर्णांक   lख_खोलो_पूर्णांक[OPNX+1+1];
 अटल अक्षर  subvar_S[NSMX+1][22][255+1];   /* Lists of arguments of all SUBs */
 अटल पूर्णांक   nsubvar_पूर्णांक[NSMX+1];
 अटल अक्षर  subname_S[NSMX+1][LMAX];   /* user SUB names */
 अटल अक्षर  vlist_S[NSMX+1][201][80+1];   /* List of local variables */
 अटल पूर्णांक   nvlist_पूर्णांक[NSMX+1];
 अटल अक्षर  funames_S[NSMX+1][80+1];   /* Names of user FUNCTIONs */
 अटल अक्षर  funtyl_S[NSMX+1][LMAX];   /* variable type lists क्रम FUNCTION declaration */
 अटल पूर्णांक   funcfl_पूर्णांक[NSMX+1];   /* funcfl%(i) set to 1 अगर i-th sub is a FUNCTION */
 अटल अक्षर  darr_S[MARR+1][80+1];   /* list of SHARED arrays which are used in MAIN, and respective DYNAMIC flags (set अगर dynamic) */
 अटल पूर्णांक   alist_पूर्णांक[SHMX+1];   /* list of SHARED arrays which are used in MAIN, and respective DYNAMIC flags (set अगर dynamic) */
 अटल लघु dynaf__पूर्णांक[MARR+1];   /* list of SHARED arrays which are used in MAIN, and respective DYNAMIC flags (set अगर dynamic) */
 अटल अक्षर  atyp_S[10][LMAX];
 अटल अक्षर  cg_S[CMAX+1][1000+1];   /* global and MAIN declarations */
 अटल अक्षर  cm_S[CMAX+1][1000+1];   /* global and MAIN declarations */
 अटल अक्षर  data_S[NDAT+1][256+1];   /* Storage क्रम DATA block */
 n_arg_पूर्णांक--;

 म_नकल(c_S,COMMAND_S(n_arg_पूर्णांक, argv_S));
 T0 = TIMER();
 म_नकल(Version_S,"3.41 Free Version 04 May 2000\nCheck out the Pay version at http://random.com.hr/products/");
 /* From 4.14 */
 म_नकल(fff_S,"");   /* contains *fp poपूर्णांकers of all SUBs and MAIN */
 म_नकल(fns_S,"");   /* contains storage names क्रम all खोलो files */
 statfl_पूर्णांक[0] = 1;   /* variables in MAIN are always अटल */
 nfuncs_पूर्णांक = 0;   /* Number of user FUNCTIONs */
 nSHRDtk_पूर्णांक = 0;   /* Number of global SHARED variables */
 म_नकल(shred_S,"");   /* all shared variables string */
 lspac_पूर्णांक = 1;   /* Left margin level counter */
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 nsub_पूर्णांक = 0;   /* Number of subroutines */
 jopn_पूर्णांक = 0;   /* translation-समय 'OPEN' counter */
 nlखोलो_पूर्णांक = 0;   /* dynamic last-OPEN-file counter */
 expflg_पूर्णांक = 0;   /* Pure expression ( x = ... ) flag ( क्रम -m, see mathexp ) */
 संकेत_पूर्णांक = 0;   /* If set, निकास with संकेत */
 endमुख्य_पूर्णांक = 0;   /* If set, मुख्य translator has passed the end of MAIN */
 usersub_पूर्णांक = 0;   /* User SUB or FUNCTION usage flag */
 initline_पूर्णांक = 0;   /* क्रम initialization commands which appear in MAIN */
 ni_पूर्णांक = 0;
 lastline_पूर्णांक = 0;   /* Last line of the MAIN program, filled in 650 */
 अक्षरtfl_पूर्णांक = 0;
 दीर्घtfl_पूर्णांक = 0;
 भग्नtfl_पूर्णांक = 0;
 पूर्णांकtfl_पूर्णांक = 0;
 byttfl_पूर्णांक = 0;
 ncg_पूर्णांक = 0;   /* number of global and MAIN declarations */
 ncm_पूर्णांक = 0;
 म_नकल(b_S,TIME_S(0));
 प्र_लिखो(क्षणिक_ख_S,"%s%s%s","tmp",MID_S(b_S, 3, LMAX),".b2c");
  क्षणिक_ख_S[3]=क्षणिक_ख_S[6]='-';
 म_नकल(पंचांगpfil0_S,क्षणिक_ख_S);
  पंचांगpfil0_S[6]='_';
 म_नकल(atyp_S[0],"short ");
 म_नकल(atyp_S[1],"int   ");
 म_नकल(atyp_S[2],"long  ");
 म_नकल(atyp_S[3],"float ");
 म_नकल(atyp_S[4],"double ");
 म_नकल(atyp_S[5],"char  ");
 म_नकल(atyp_S[8],"unsigned char ");
 म_नकल(atyp_S[9],"short ");
 /* ENVIRON  "BCC_OPTIONS" = "": optim$ = "" */

 /* GOSUB Lab_50000 */    /* tokenization of command$ */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_50000;
 /* Order of the two below is IMPORTANT */
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","entering 800: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 /* GOSUB Lab_800 */    /* preprocessing global SHARED variables */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_800;
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","entering 700: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 /* GOSUB Lab_700 */    /* preprocessing क्रम variable types in SUB's */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_700;
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","entering 600: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 /* GOSUB Lab_600 */    /* preprocessing क्रम file OPEN */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_600;
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","entering 650: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 /* GOSUB Lab_650 */    /* Reseting dअगरferent flags, COMMAND$ */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_650;
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","Exiting preprocessors: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 अगर((fp_2 = ख_खोलो(म_नकल(fn2__S,outf_S), "w")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn2__S); निकास(1);
 पूर्ण
 अगर(commff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","main(int n_arg_int, char *argv_S[])");
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s\n","main()");
 पूर्ण
 ख_लिखो(fp_2,"%s\n","{");
 ni_पूर्णांक = 2;
 nl_पूर्णांक = 0;
 isub_पूर्णांक = 0;
 statfl_पूर्णांक[0] = 1;
 nlmax_पूर्णांक = 32767;
 /* lista varijabli: */
 पंचांगpfl_पूर्णांक = 0;
 म_नकल(पूर्णांक_S," int  ");
 म_नकल(भग्न_S," float ");
 अगर(दीर्घflg_पूर्णांक == 1)
 अणु
  म_नकल(पूर्णांक_S," long ");
 पूर्ण
 अगर(करोblflg_पूर्णांक == 1)
 अणु
  म_नकल(भग्न_S," double ");
 पूर्ण
 अगर(म_भेद(vari_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 3;
  i__s = (i__s + 0 ) % 16;
  declarix(पूर्णांक_S, vari_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varr_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(भग्न_S, varr_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(vars_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 1;
  i__s = (i__s + 0 ) % 16;
  declarix(" char ", vars_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varl_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 4;
  i__s = (i__s + 0 ) % 16;
  declarix(" long ", varl_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(vard_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(" double ", vard_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varb_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(" unsigned char ", varb_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(vash_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(" short ", vash_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 /* Explicit declarations with CM */
 अगर(ncm_पूर्णांक > 0)
 अणु
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ncm_पूर्णांक; i_पूर्णांक++)
  अणु
   ख_लिखो(fp_2,"%s%s\n"," ",cm_S[i_पूर्णांक]);
  पूर्ण
  पंचांगpfl_पूर्णांक = 1;
  ni_पूर्णांक = ni_पूर्णांक + ncm_पूर्णांक;
 पूर्ण
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"\n");
  ni_पूर्णांक = ni_पूर्णांक + 1;
 पूर्ण
 /* DATA block: */
 /* IF datalin% THEN */
 /*  PRINT #2, " static int  data__c_int=0, data__M_int=" + STR$(datacnt%) + ";" */
 /*  PRINT #2, " static char *DATA__S[]={" */
 /* C data_S[datalin_पूर्णांक][म_माप(data_S[datalin_पूर्णांक])-1]='\0'; */
 /*  FOR i% = 1 TO datalin% */
 /*   PRINT #2, data$(i%) */
 /*  NEXT */
 /*  PRINT #2, " };" */
 /*  ni% = ni% + datalin% + 3 */
 /* END IF */
 initline_पूर्णांक = ni_पूर्णांक;   /* initline% se jos povecava u DIM, DECLARE */
 /* GOSUB Lab_31000 */    /* Make a list of possibly used arrays in MAIN */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_31000;

 /* Main processor: */
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%-14s% .7G \n","Entering Translator:",(द्विगुन)(TIMER() - T0));
 पूर्ण
 अगर((fp_1 = ख_खोलो(म_नकल(fn1__S,क्षणिक_ख_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn1__S); निकास(1);
 पूर्ण
 जबतक(! eof(fp_1))
 अणु
  ख_माला_लो(line_S, LMAX, fp_1);
  line_S[म_माप(line_S) - 1] = '\0';
  nl_पूर्णांक = nl_पूर्णांक + 1;
  अगर(nl_पूर्णांक >= nlmax_पूर्णांक)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s\n","Max. number of input lines",nlmax_पूर्णांक," reached, aborting.");
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अगर(स_भेद(line_S, "#$ Last", 2)==0) अणु
  ख_लिखो(fp_2,"%s\n","} /* End of MAIN */");
  lspac_पूर्णांक = lspac_पूर्णांक - 1;
  अगर(lspac_पूर्णांक != 0)
  अणु
    ख_लिखो(मानक_त्रुटि,"ERROR: Misscount at the 'End of MAIN' brace: %d\n", lspac_पूर्णांक);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  endमुख्य_पूर्णांक = 1;
  जाओ Lab_90;
  पूर्ण
  /* C text lines: */
  अगर(cflag_पूर्णांक == 1)
  अणु
   अगर (line_S[0]=='C' && (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t'))
   अणु
   ख_लिखो(fp_2,"%s\n",line_S);
   अगर(isub_पूर्णांक == 0)
   अणु
    ni_पूर्णांक = ni_पूर्णांक + 1;
   पूर्ण
   जाओ Lab_90;
   पूर्ण
   अगर ((स_भेद(line_S,"CG",2)==0 || स_भेद(line_S,"CH",2)==0 || स_भेद(line_S,"CM",2)==0) && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t'))
   अणु
    अगर (isub_पूर्णांक==0 && स_भेद(line_S,"CH",2)!=0) ni_पूर्णांक++;
   जाओ Lab_90;
   पूर्ण
  पूर्ण
  /* GOSUB Lab_900 */    /* line splitter */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_900;
  अगर(ntok_पूर्णांक > 0)
  अणु
   itok_पूर्णांक = 1;
   जबतक(itok_पूर्णांक <= ntok_पूर्णांक)
   अणु
    /* GOSUB Lab_30000 */    /* a nicer 'REM' preprocessor */
    अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_30000;
    म_नकल(a_S,linetok_S[itok_पूर्णांक]);
    अगर(म_भेद(a_S, "") == 0)
    अणु
     अगर(ntok_पूर्णांक == 1)
     अणु
      ख_लिखो(fp_2,"\n");
      अगर(isub_पूर्णांक == 0)
      अणु
       ni_पूर्णांक = ni_पूर्णांक + 1;
      पूर्ण
     पूर्ण
    पूर्ण
    अन्यथा
    अणु
     /* GOSUB Lab_500 */    /* Translator */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_500;
    पूर्ण
    itok_पूर्णांक = itok_पूर्णांक + 1;
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   /* GOSUB 1500: REM Check अगर end of मुख्य */
   ख_लिखो(fp_2,"\n");
   अगर(isub_पूर्णांक == 0)
   अणु
    ni_पूर्णांक = ni_पूर्णांक + 1;
   पूर्ण
  पूर्ण
Lab_90:
 ;पूर्ण
 ख_बंद(fp_1);
 अगर(endमुख्य_पूर्णांक == 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","Bug: Last line of MAIN not detected!");
  निकास(0);
 पूर्ण
 अगर(usersub_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","/*- User SUBs--End -*/");
 पूर्ण
 अगर(extrnfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","/* Translates of used QB's intrinsic functions: */");
  qbfunc();   /* Writing out C translates of पूर्णांकrinsic QB functions used */
 पूर्ण
 ख_बंद(fp_2);
 /* Add poपूर्णांकer prefixes to variables in SUBs */
 /* GOSUB Lab_45000 */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_45000;
 /* changing original QB variable names to suit C gramar, शेष = yes */
 अगर(postflg_पूर्णांक == 1)
 अणु
  /* GOSUB Lab_40000 */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_40000;
 पूर्ण
 जाओ Lab_9999;


Lab_500:   /* Translator */
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%s% d %s%s\n","Line",nl_पूर्णांक,":",a_S);
 पूर्ण
 commfl_पूर्णांक = 0;

  अगर ( स_भेद(a_S,"REM",3)==0 ) अणु
 /* GOSUB Lab_2000 */    /* REM */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2000;
  पूर्ण

 /* GOSUB Lab_1000 */    /* SUB, FUNCTION */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_1000;
    अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"SHARED",6)==0 ) अणु
 /* GOSUB Lab_1250 */    /* SHARED */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_1250;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DECLARE",7)==0 ) अणु
 /* GOSUB Lab_2500 */    /* DECLARE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"CONST",5)==0 ) अणु
 /* GOSUB Lab_2600 */    /* CONST */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2600;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DIM ",4)==0 ) अणु
 /* GOSUB Lab_2750 */    /* DIM */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2750;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"ERASE ",6)==0 ) अणु
 /* GOSUB Lab_2800 */    /* ERASE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2800;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"REDIM ",6)==0 ) अणु
 /* GOSUB Lab_2850 */    /* REDIM */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2850;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"IF ",3)==0 ) अणु
 /* GOSUB Lab_3000 */    /* IF */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"ELSEIF ",7)==0 ) अणु
 /* GOSUB Lab_3100 */    /* ELSEIF */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"ELSE",4)==0 ) अणु
 /* GOSUB Lab_3250 */    /* ELSE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3250;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"END IF",6)==0 ) अणु
 /* GOSUB Lab_3500 */    /* END IF */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DO WHILE",8)==0 || स_भेद(a_S,"WHILE",5)==0 || स_भेद(a_S,"DO UNTIL",8)==0 ) अणु
 /* GOSUB Lab_3750 */    /* DO WHILE or WHILE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3750;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"LOOP",4)==0 || स_भेद(a_S,"WEND",4)==0 ) अणु
 /* GOSUB Lab_3900 */    /* LOOP     or WEND */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_3900;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"PRINT #",7)==0 ) अणु
 /* GOSUB Lab_4000 */    /* PRINT # */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"PRINT USING",11)==0 ) अणु
 /* GOSUB Lab_4100 */    /* PRINT USING */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"GET #",5)==0 ) अणु
 /* GOSUB Lab_4200 */    /* GET (file I/O) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"PUT #",5)==0 ) अणु
 /* GOSUB Lab_4300 */    /* PUT (file I/O) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4300;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"SEEK ",5)==0 ) अणु
 /* GOSUB Lab_4400 */    /* SEEK (file I/O) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4400;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"LINE INPUT #",12)==0 ) अणु
 /* GOSUB Lab_4500 */    /* LINE INPUT # */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"OUT ",4)==0 ) अणु
 /* GOSUB Lab_4600 */    /* OUT I/O statement */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_4600;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"PRINT",5)==0 || स_भेद(a_S,"EPRINT",6)==0 ) अणु
 /* GOSUB Lab_5000 */    /* PRINT, EPRINT */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"LOCATE ",7)==0 ) अणु
 /* GOSUB Lab_5100 */    /* LOCATE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"COLOR",5)==0 ) अणु
 /* GOSUB Lab_5200 */    /* COLOR */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"CLS",3)==0 ) अणु
 /* GOSUB Lab_5300 */    /* CLS */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5300;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"INPUT #",7)==0 ) अणु
 /* GOSUB Lab_5500 */    /* INPUT # */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"SSCAN ",6)==0 ) अणु
 /* GOSUB Lab_5600 */    /* SSCAN */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5600;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"INPUT",5)==0 ) अणु
 /* GOSUB Lab_5750 */    /* INPUT */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5750;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

 /* GOSUB Lab_6000 */    /* Labels */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_6000;
    अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"GOTO ",5)==0 ) अणु
 /* GOSUB Lab_6500 */    /* GOTO */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_6500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"CALL",4)==0 ) अणु
 /* GOSUB Lab_7000 */    /* CALL */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_7000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"FOR ",4)==0 ) अणु
 /* GOSUB Lab_8000 */    /* FOR..TO..STEP */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_8000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"NEXT",4)==0 ) अणु
 /* GOSUB Lab_8500 */    /* NEXT */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_8500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"OPEN ",5)==0 ) अणु
 /* GOSUB Lab_9000 */    /* OPEN */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_9000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"CLOSE",5)==0 ) अणु
 /* GOSUB Lab_9500 */    /* CLOSE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_9500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"ENVIRON ",8)==0 ) अणु
 /* GOSUB Lab_10000 */    /* set ENVIRON variable */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_10000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"GOSUB ",6)==0 ) अणु
 /* GOSUB Lab_11000 */    /* GOSUB */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_11000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"RETURN",6)==0 ) अणु
 /* GOSUB Lab_11500 */    /* RETURN */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_11500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"RANDOMIZE",9)==0 ) अणु
 /* GOSUB Lab_12000 */    /* RANDOMIZE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_12000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"PAUSE ",6)==0 ) अणु
 /* GOSUB Lab_12200 */    /* PAUSE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_12200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"SHELL",5)==0 ) अणु
 /* GOSUB Lab_17000 */    /* SHELL */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_17000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DEF FN",6)==0 ) अणु
 /* GOSUB Lab_19300 */    /* DEF FN*, करोne in 800 */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19300;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

 /* GOSUB Lab_18000 */    /* expressions */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_18000;
    अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"END SUB",7)==0 || स_भेद(a_S,"END FUNCTION",12)==0 ) अणु
 /* GOSUB Lab_19000 */    /* END SUB, END FUNCTION */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"EXIT SUB",8)==0 ) अणु
 /* GOSUB Lab_19100 */    /* EXIT SUB */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"END",3)==0 ) अणु
 /* GOSUB Lab_1500 */    /* END Must be after all other END's */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_1500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DEFSTR ",7)==0 || स_भेद(a_S,"DEFINT ",7)==0 || स_भेद(a_S,"DEFDBL ",7)==0) अणु
   commfl_पूर्णांक = 1; /* GOSUB 19200: REM DEFXXX, करोne in 800 */
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"SOUND",5)==0 ) अणु
 /* GOSUB Lab_19400 */    /* SOUND */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19400;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"DATA ",5)==0 ) अणु
  commfl_पूर्णांक = 1; /* GOSUB 19500: REM DATA, करोne in 800 */
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"READ ",5)==0 ) अणु
 /* GOSUB Lab_19550 */    /* READ */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19550;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

  अगर ( स_भेद(a_S,"RESTORE",7)==0 ) अणु
 /* GOSUB Lab_19575 */    /* RESTORE */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19575;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

 /*   G R A P H I C S */
  अगर ( स_भेद(a_S,"LINE (",6)==0 ||  स_भेद(a_S,"LINE -",6)==0) अणु
 /* GOSUB Lab_20000 */    /* LINE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_20000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"MARKER ",7)==0 ) अणु
 /* GOSUB Lab_24000 */    /* MARKER (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_24000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"PLINE ",6)==0 ) अणु
 /* GOSUB Lab_24500 */    /* PLINE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_24500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"PMARKER ",8)==0 ) अणु
 /* GOSUB Lab_25000 */    /* PMARKER (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_25000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"PSET ",5)==0 ) अणु
 /* GOSUB Lab_20500 */    /* PSET (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_20500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XUPDATE",7)==0 ) अणु
 /* GOSUB Lab_23000 */    /* XUPDATE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XCLS",4)==0 ) अणु
 /* GOSUB Lab_23200 */    /* XCLS (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XSELWI",6)==0 || स_भेद(a_S,"XCLOSE",6)==0 || स_भेद(a_S,"XCURSOR",7)==0) अणु
 /* GOSUB Lab_23400 */    /* "XSELWI", "XCLOSE", "XCURSOR" or "XCLOSEDS" (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23400;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"PALETTE ",8)==0 ) अणु
 /* GOSUB Lab_23500 */    /* PALETTE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"GETCOL ",7)==0 ) अणु
 /* GOSUB Lab_23300 */    /* GETCOL (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23300;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"SCREEN ",7)==0 || स_भेद(a_S,"XWINDOW ",8)==0) अणु
 /* GOSUB Lab_21000 */    /* "SCREEN " and/or "XWINDOW " (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_21000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"SET ",4)==0 ) अणु
 /* GOSUB Lab_21500 */    /* SET  (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_21500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"SAVEGIF ",8)==0 || स_भेद(a_S,"SAVEPS ",7)==0 || स_भेद(a_S,"SAVEEPS ",8)==0 || स_भेद(a_S,"SAVEPSL ",8)==0 ) अणु
 /* GOSUB Lab_22000 */    /* SAVExxx (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_22000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"LOADGIF ",8)==0 ) अणु
 /* GOSUB Lab_22500 */    /* LOADGIF (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_22500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"GIFINFO ",8)==0 ) अणु
 /* GOSUB Lab_22600 */    /* GIFINFO (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_22600;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XTEXT ",6)==0 ) अणु
 /* GOSUB Lab_25500 */    /* XTEXT (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_25500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"FAREA ",6)==0 ) अणु
 /* GOSUB Lab_26000 */    /* FAREA (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_26000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"CIRCLE ",7)==0 ) अणु
 /* GOSUB Lab_26500 */    /* CIRCLE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_26500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"GCGET ",6)==0 ) अणु
 /* GOSUB Lab_27000 */    /* GCGET (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_27000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XPOINTER ",9)==0 ) अणु
 /* GOSUB Lab_27500 */    /* XPOINTER (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_27500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XTITLE ",7)==0 ) अणु
 /* GOSUB Lab_23600 */    /* XTITLE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23600;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XREQST ",7)==0 ) अणु
 /* GOSUB Lab_23700 */    /* XREQST (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23700;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XCLIP ",6)==0 ) अणु
 /* GOSUB Lab_23800 */    /* XCLIP (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23800;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XNOCLI ",7)==0 ) अणु
 /* GOSUB Lab_23900 */    /* XNOCLI (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23900;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XWARP ",6)==0 ) अणु
 /* GOSUB Lab_23950 */    /* XWARP (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_23950;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XROT ",5)==0 ) अणु
 /* GOSUB Lab_28000 */    /* ROTATE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28000;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XTRAN ",6)==0 ) अणु
 /* GOSUB Lab_28100 */    /* TRANSLATE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XSCAL ",6)==0 ) अणु
 /* GOSUB Lab_28200 */    /* SCALE (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"MRESET",6)==0 ) अणु
 /* GOSUB Lab_28300 */    /* MRESET (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28300;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XBUF",4)==0 ) अणु
 /* GOSUB Lab_28400 */    /* XBUF (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28400;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"XRMBUF",6)==0 ) अणु
 /* GOSUB Lab_28500 */    /* XRMBUF (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_28500;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"GET ",4)==0 || स_भेद(a_S,"XGETGE ",7)==0 ) अणु
 /* GOSUB Lab_22100 */    /* GET (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_22100;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;
  अगर ( स_भेद(a_S,"PUT ",4)==0 || स_भेद(a_S,"XANIM ",6)==0 ) अणु
 /* GOSUB Lab_22200 */    /* PUT and/or XANIM (graphics) */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_22200;
  पूर्ण अगर ( commfl_पूर्णांक==1 ) जाओ Lab_509;

 /* In 650 defined: SPACE$, MID$, LEFT$, RIGHT$, STR$, CHR$, ASC, VAL, LEN, */
 /*                 SGN, INT, CINT, खातापूर्ण, COMMAND$, CONST, LOF */
 /* GOSUB Lab_29000 */    /* anything अन्यथा */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_29000;
Lab_509:   /* End Translator */
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);



Lab_600:   /* preprocessing the whole file क्रम OPEN files and खोलोed I/O ports */
 /* and क्रम QB functions */
 /* inक्रमmation on OPEN must be saved only cumulative (क्रम all modules) */
 nखोलो_पूर्णांक = 0;
 niखोलो_पूर्णांक = 0;
 nl_पूर्णांक = 0;
 अगर((fp_1 = ख_खोलो(म_नकल(fn1__S,inpf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn1__S); निकास(1);
 पूर्ण
 जबतक(! eof(fp_1))
 अणु
  ख_माला_लो(line_S, LMAX, fp_1);
  line_S[म_माप(line_S) - 1] = '\0';
  nl_पूर्णांक = nl_पूर्णांक + 1;
      अगर (line_S[म_माप(line_S)-1]==13) line_S[म_माप(line_S)-1]='\0'; /*croff*/
      अगर (line_S[0]=='C' && cflag_पूर्णांक)
      अणु
       अगर (line_S[0]=='C' && (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t') || (memcmp(line_S,"CG",2)==0 || memcmp(line_S,"CH",2)==0 || memcmp(line_S,"CM",2)==0) && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t')) जाओ Lab_609;
      पूर्ण
  /* GOSUB Lab_900 */    /* spliter */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_900;
  क्रम(g_पूर्णांक = 1; g_पूर्णांक <= ntok_पूर्णांक; g_पूर्णांक++)
  अणु
   म_नकल(line_S,linetok_S[g_पूर्णांक]);
   अगर(म_भेद(LEFT_S(line_S, 3), "REM") == 0)
   अणु
    जाओ Lab_608;
   पूर्ण

   /*    OPEN file: */
       अगर (स_भेद(line_S, "OPEN ", 5)==0)
       अणु
   i_पूर्णांक = LEN(line_S) - 1;   /* mode$ = "" */
        जबतक (म_से_प(&line_S[i_पूर्णांक])!=0 && line_S[i_पूर्णांक] !=' ') i_पूर्णांक--;
   /*     IF mode$ = "" THEN mode$ = "r+" */
   अगर(nखोलो_पूर्णांक == 0)
   अणु
    nखोलो_पूर्णांक = 1;
    ख_खोलो_पूर्णांक[nखोलो_पूर्णांक] = VAL(MID_S(line_S, i_पूर्णांक + 2, LMAX));
   पूर्ण
   अन्यथा
   अणु
    पंचांगpfl_पूर्णांक = 1;
    n_पूर्णांक = VAL(MID_S(line_S, i_पूर्णांक + 2, LMAX));
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nखोलो_पूर्णांक; j_पूर्णांक++)
    अणु
     अगर(ख_खोलो_पूर्णांक[j_पूर्णांक] == n_पूर्णांक)
     अणु
      पंचांगpfl_पूर्णांक = 0;
     पूर्ण
    पूर्ण
    अगर(पंचांगpfl_पूर्णांक == 1)
    अणु
     nखोलो_पूर्णांक = nखोलो_पूर्णांक + 1;
     ख_खोलो_पूर्णांक[nखोलो_पूर्णांक] = n_पूर्णांक;
    पूर्ण
   पूर्ण
       पूर्ण

   /*    I/O ports INP(port), OUT(port,data): */
       k_पूर्णांक = म_माप(line_S) - 5; अगर (k_पूर्णांक < 0) k_पूर्णांक = 0;
   togfl_पूर्णांक = 0;

Lab_608:
  ;पूर्ण
Lab_609:
 ;पूर्ण
 ख_बंद(fp_1);
 म_नकल(fff_S,"");
 अगर(nखोलो_पूर्णांक > 0)
 अणु
  म_नकल(d_S,"");
  म_नकल(b_S,"");
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nखोलो_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(n_S,STR_S(ख_खोलो_पूर्णांक[i_पूर्णांक]));
   म_नकल(n_S,MID_S(n_S, 2, LEN(n_S) - 1));
   प्र_लिखो(tws__S,"%s%s%s%s",d_S,"*fp_",n_S,", ");
   म_नकल(d_S,tws__S);
   प्र_लिखो(tws__S,"%s%s%s%s",b_S,"fn",n_S,"__S[160], ");
   म_नकल(b_S,tws__S);
  पूर्ण
  म_नकल(fff_S,LEFT_S(d_S, LEN(d_S) - 2));   /* खाता poपूर्णांकers */
  म_नकल(fn_S,LEFT_S(b_S, LEN(b_S) - 2));   /* खाता names */
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_650:   /* Check क्रम use of QB functions and fill flags used in */
 /* mathexp, qbdecl, qbfunx and 41000 (=hederix) */
 /* Preprocessing पूर्णांकrinsic QB functions. */
 /* Important part is declaring functions in the preamble and */
 /* appending C subroutines at the end of file. */
 /* Here are gathered functions whose names or varlists need not to */
 /* be changed beyond what QB2C normaly करोes + COMMAND$ and CONST. */
 /* Others that need to be changed are implemented अन्यथाwhere (mathexp..) */
 /* Also, stores all global and MAIN explicit declarations (headers) */
 extrnfl_पूर्णांक = 0;   /* Set to 1 अगर ANY translated function is used */
 mathfl_पूर्णांक = 0;   /* Set to 1 अगर any <गणित.स> function is used */
 /* retrnfl% 'RETURN' usage flag, filled in 700 */
 funcflag_पूर्णांक = 0;   /* =1 जबतक मुख्य processor is in a FUNCTION */
 म_नकल(funcnam_S,"");
 समयfl_पूर्णांक = 0;   /* Set to 1 अगर <समय.स> needed */
 sysसमयfl_पूर्णांक = 0;   /* Set to 1 अगर <sys/समय.स> needed */
 unistdfl_पूर्णांक = 0;   /* Set to 1 अगर <unistd.h> needed */
 छोड़ोfl_पूर्णांक = 0;   /* Set to 1 अगर include files क्रम 'select' needed */
 twsflg_पूर्णांक = 0;   /* Need क्रम temporary storage string */
 sigअगरf_पूर्णांक = 0;   /* For complicated FOR loops */
 xwflag_पूर्णांक = 0;   /* If XWINDOW used on the right side */
 SScan_पूर्णांक = 0;   /* SScan() function usage (qbfdecl) */
 /* defstr% = 0: DEFSTR in effect (vartyp), defined in 800 */
 /* datalin% = 0: datacnt% = 0: REM DATA lines counter, defined in 800 */
 spacff_पूर्णांक = 0;
 midff_पूर्णांक = 0;
 leftff_पूर्णांक = 0;
 rightff_पूर्णांक = 0;
 strff_पूर्णांक = 0;
 chrff_पूर्णांक = 0;
 ascff_पूर्णांक = 0;
 valff_पूर्णांक = 0;
 lenff_पूर्णांक = 0;
 sgnff_पूर्णांक = 0;
 पूर्णांकff_पूर्णांक = 0;
 nपूर्णांकff_पूर्णांक = 0;
 eofff_पूर्णांक = 0;
 commff_पूर्णांक = 0;
 ncnst_पूर्णांक = 0;
 existff_पूर्णांक = 0;
 vdblff_पूर्णांक = 0;
 rndff_पूर्णांक = 0;
 srndff_पूर्णांक = 0;
 dateff_पूर्णांक = 0;
 समयff_पूर्णांक = 0;
 समयrff_पूर्णांक = 0;
 inputff_पूर्णांक = 0;
 inkeyff_पूर्णांक = 0;
 colorff_पूर्णांक = 0;
 clsff_पूर्णांक = 0;
 minff_पूर्णांक = 0;
 maxff_पूर्णांक = 0;
 grafflg_पूर्णांक = 0;
 lहालff_पूर्णांक = 0;
 uहालff_पूर्णांक = 0;
 envff_पूर्णांक = 0;
 lofff_पूर्णांक = 0;
 hexff_पूर्णांक = 0;
 octff_पूर्णांक = 0;
 stringf_पूर्णांक = 0;
 txlen_पूर्णांक = 0;
 usingff_पूर्णांक = 0;
 पढ़ोff_पूर्णांक = 0;
 /* SPACE$ -> SPACE_S */
 /* MID$   -> MID_S */
 /* LEFT$  -> LEFT_S */
 /* RIGHT$ -> RIGHT_S */
 /* STR$   -> STR_S */
 /* CHR$   -> CHR_S */
 /* HEX$   -> HEX_S */
 /* OCT$   -> OCT_S */
 /* LCASE$ -> LCASE_S */
 /* UCASE$ -> UCASE_S */
 /* STRING$ -> STRING_S */
 /* ENVIRON$ -> ENVIRON_S */
 /* INKEY$ -> INKEY_S() */
 /* DATE$  -> DATE_S */
 /* TIME$  -> TIME_S */
 /* TIMER  -> TIMER() */
 /* RND    -> RND(1), except अगर RND( then leave as is, but set rndff% */
 /* ASC    -> ASC */
 /* VAL    -> VAL */
 /* LEN    -> LEN */
 /* XLEN   -> XLEN */
 /* INT    -> Int */
 /* ABS    -> भ_असल */
 /* SGN    -> SGN */
 /* CINT   -> Nपूर्णांक */
 /* खातापूर्ण(n) -> eof(fp_n) */
 /* CONST -> #घोषणा */
 /* MIN   -> #घोषणा */
 /* MAX   -> #घोषणा */
 /* LOF   -> LOF */
 /* INP   -> inb */
 /* OUT   -> outb */
 /* DEF FN -> izbaciti van */
 अगर((fp_1 = ख_खोलो(म_नकल(fn1__S,inpf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn1__S); निकास(1);
 पूर्ण
 अगर((fp_2 = ख_खोलो(म_नकल(fn2__S,क्षणिक_ख_S), "w")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn2__S); निकास(1);
 पूर्ण
 nl_पूर्णांक = 0;
 जबतक(! eof(fp_1))
 अणु
  ख_माला_लो(line_S, LMAX, fp_1);
  line_S[म_माप(line_S) - 1] = '\0';
      जबतक(line_S[म_माप(line_S)-1]==13 || line_S[म_माप(line_S)-1]==' ') line_S[strlen(line_S)-1]='\0'; /*croff,' '*/
  lleng_पूर्णांक = LEN(line_S);
  nl_पूर्णांक = nl_पूर्णांक + 1;
  /* C text lines: */
  अगर (cflag_पूर्णांक == 1 && line_S[0]=='C')
  अणु
   अगर (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t')
   अणु
  ख_लिखो(fp_2,"%s\n",line_S);
  जाओ Lab_659;
   पूर्ण
   अगर ((स_भेद(line_S,"CG",2)==0 || स_भेद(line_S,"CH",2)==0) && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t'))
   अणु
    अगर (++ncg_पूर्णांक > CMAX) अणु
    म_लिखो("qb2c: Max number of CH lines reached !\n");
    म_लिखो("qb2c: Enlarge constant CMAX in qb2c and recompile it.\n"); निकास(0);पूर्ण
  म_नकल(cg_S[ncg_पूर्णांक],MID_S(line_S, 4, LMAX));
  ख_लिखो(fp_2,"%s\n",line_S);
  जाओ Lab_659;
   पूर्ण
   अगर (स_भेद(line_S,"CM",2)==0 && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t'))
   अणु
    अगर (++ncm_पूर्णांक > CMAX) अणु
    म_लिखो("qb2c: Max number of CM lines reached !\n");
    म_लिखो("qb2c: Enlarge constant CMAX in qb2c and recompile it.\n"); निकास(0);पूर्ण
  म_नकल(cm_S[ncm_पूर्णांक],MID_S(line_S, 4, LMAX));
  ख_लिखो(fp_2,"%s\n",line_S);
  जाओ Lab_659;
   पूर्ण
  पूर्ण
  gulix(line_S);
  अगर (स_भेद(line_S,"REM ",4) == 0)
  अणु
  ख_लिखो(fp_2,"%s\n",line_S);
  जाओ Lab_659;
  पूर्ण

  अगर(!lastline_पूर्णांक) अणु /* Find last line in MAIN */
   अगर (स_भेद(line_S,"FUNCTION ",9)==0 || स_भेद(line_S,"SUB ",4)==0) अणु
  lastline_पूर्णांक = nl_पूर्णांक;
  nl_पूर्णांक = nl_पूर्णांक + 1;
  ख_लिखो(fp_2,"%s\n","#$ Last line of MAIN");
   पूर्ण
  पूर्ण
  /* jrplc% je zadnji redni broj imena (funkcije) koje treba mijenjati (od 0) */
  /* jnfun% je zadnji redni broj funkcije */
  /* NFUN   je zadnji redni broj */
      lleng_पूर्णांक = म_माप(line_S);
      क्रम(i_पूर्णांक=0; i_पूर्णांक <= NFUN; ++i_पूर्णांक)
      अणु
       n_पूर्णांक = म_माप(म_नकल(b_S, rplc_S[i_पूर्णांक]));
       togfl_पूर्णांक = 0;
       क्रम(j_पूर्णांक=0; j_पूर्णांक <= lleng_पूर्णांक - n_पूर्णांक + 1; j_पूर्णांक++)
       अणु
        अगर (line_S[j_पूर्णांक] == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
        अगर (togfl_पूर्णांक == 1) जाओ Lab_658;
        अगर (स_भेद(b_S,&line_S[j_पूर्णांक],n_पूर्णांक) == 0)
        अणु
         c=0; अगर(j_पूर्णांक > 0) c=line_S[j_पूर्णांक-1];
         log_1=!(c>='a' && c<='z' || c>='A' && c<='Z' || c=='_');
         c=line_S[j_पूर्णांक+n_पूर्णांक];
         log_2=!(c>='a' && c<='z' || c>='A' && c<='Z' || c=='_');
         अगर(log_1 && log_2)
         अणु
          अगर(i_पूर्णांक<=jrplc_पूर्णांक)
          अणु
            अगर(i_पूर्णांक==0) म_नकल(e_S,"Nint");
            अगर(i_पूर्णांक==1) म_नकल(e_S,"Int");
            अगर(i_पूर्णांक==2) म_नकल(e_S,"fabs");
            अगर(i_पूर्णांक==3) म_नकल(e_S,"atan");
            अगर(i_पूर्णांक==4) म_नकल(e_S,"sqrt");
            अगर(i_पूर्णांक==5) म_नकल(e_S,"log");
            अगर(i_पूर्णांक==6) म_नकल(e_S,"sin");
            अगर(i_पूर्णांक==7) म_नकल(e_S,"cos");
            अगर(i_पूर्णांक==8) म_नकल(e_S,"tan");
            अगर(i_पूर्णांक==9) म_नकल(e_S,"exp");
           अगर(c!='(') अणु
            अगर(i_पूर्णांक==10) म_नकल(e_S,"DATE$(0)");
            अगर(i_पूर्णांक==11) म_नकल(e_S,"TIME$(0)");
            अगर(i_पूर्णांक==12) म_नकल(e_S,"TIMER()");
            अगर(i_पूर्णांक==13) म_नकल(e_S,"RND(1)");
            अगर(i_पूर्णांक==14) म_नकल(e_S,"INKEY$()");
            अगर(i_पूर्णांक==15) म_नकल(e_S,"inb((int)");
           पूर्ण
           अगर(c=='(' && (i_पूर्णांक==10 || i_पूर्णांक==11 || i_पूर्णांक==13)) म_नकल(e_S, b_S);
           म_नकल(d_S,line_S);
           line_S[j_पूर्णांक]='\0'; म_जोड़ो(line_S,e_S);
           म_जोड़ो(line_S,&d_S[j_पूर्णांक+n_पूर्णांक]);
           j_पूर्णांक=j_पूर्णांक+म_माप(e_S)-1;
           lleng_पूर्णांक=म_माप(line_S);
          पूर्ण
    चयन(i_पूर्णांक) अणु
          हाल  0: nपूर्णांकff_पूर्णांक =1; mathfl_पूर्णांक =1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल  1: पूर्णांकff_पूर्णांक  =1; mathfl_पूर्णांक =1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल  2: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  3: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  4: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  5: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  6: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  7: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  8: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल  9: mathfl_पूर्णांक =1;
                   अवरोध;
          हाल 10: dateff_पूर्णांक=1; extrnfl_पूर्णांक=1; समयfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 11: समयff_पूर्णांक=1; extrnfl_पूर्णांक=1; समयfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 12: समयrff_पूर्णांक=1; extrnfl_पूर्णांक=1;sysसमयfl_पूर्णांक=1;unistdfl_पूर्णांक=1;
                   अवरोध;
          हाल 13: rndff_पूर्णांक=1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 14: inkeyff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1; unistdfl_पूर्णांक=1;
                   अवरोध;
          हाल 15:
                   अवरोध;
          हाल 16: spacff_पूर्णांक =1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 17: rightff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 18: leftff_पूर्णांक =1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 19: midff_पूर्णांक  =1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 20: strff_पूर्णांक  =1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 21: chrff_पूर्णांक  =1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 22: ascff_पूर्णांक  =1; extrnfl_पूर्णांक=1; दीर्घtfl_पूर्णांक =1;
                   अवरोध;
          हाल 23: valff_पूर्णांक  =1; extrnfl_पूर्णांक=1; vdblff_पूर्णांक =1;
                   अवरोध;
          हाल 24: minff_पूर्णांक  =1;
                   अवरोध;
          हाल 25: maxff_पूर्णांक  =1;
                   अवरोध;
          हाल 26: lenff_पूर्णांक  =1; extrnfl_पूर्णांक=1; vdblff_पूर्णांक =1;
                   अवरोध;
          हाल 27: sgnff_पूर्णांक  =1; extrnfl_पूर्णांक=1; vdblff_पूर्णांक =1;
                   अवरोध;
          हाल 28: eofff_पूर्णांक  =1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 29: lofff_पूर्णांक  =1; दीर्घtfl_पूर्णांक = 1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 30: existff_पूर्णांक  =1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 31: srndff_पूर्णांक =1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 32: twsflg_पूर्णांक=1;
                   अवरोध;
          हाल 33: commff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
  /*                narr% = narr% + 1: darr$(narr%) = "argv$()" */
  /*                alis% = alis% + 1: alist%(alis%) = narr% */
  nshtok_पूर्णांक[0] = nshtok_पूर्णांक[0] + 1;
  म_नकल(shtok_S[0][nshtok_पूर्णांक[0]],"n_arg%");
  nshtok_पूर्णांक[0] = nshtok_पूर्णांक[0] + 1;
  म_नकल(shtok_S[0][nshtok_पूर्णांक[0]],"argv$()");
  /*                nSHRDtk% = nSHRDtk% + 1: shrd$(nSHRDtk%) = "n_arg%" */
  /*                nSHRDtk% = nSHRDtk% + 1: shrd$(nSHRDtk%) = "argv$()" */
                   अवरोध;
          हाल 34: lहालff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 35: uहालff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 36: envff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 37: hexff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 38: octff_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 39: stringf_पूर्णांक=1; extrnfl_पूर्णांक=1; अक्षरtfl_पूर्णांक=1;
                   अवरोध;
          हाल 40: txlen_पूर्णांक=1; extrnfl_पूर्णांक=1;
                   अवरोध;
          हाल 41: पढ़ोff_पूर्णांक=1; extrnfl_पूर्णांक=1;
                   अवरोध;
                  पूर्ण
         पूर्ण
Lab_657:
        c=0;
        पूर्ण
Lab_658:
       c=0;
       पूर्ण
      पूर्ण
      /* म_लिखो("%s\n",line_S); */
      ख_लिखो(fp_2," %s\n",line_S);
Lab_659:
 ;पूर्ण
 अगर(! lastline_पूर्णांक)
 अणु
  lastline_पूर्णांक = nl_पूर्णांक;
  ख_लिखो(fp_2,"%s\n","#$ Last line of MAIN");
 पूर्ण
 ख_बंद(fp_1);
 ख_बंद(fp_2);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_700:   /* preprocessing the whole file क्रम variables in MAIN & SUB's */
 /* क्रम a SUB करो not save variables found in respective SHARED */
 /* 'Variables' can also be multidimensional arrays */
 /* Declare implicitely declared variables in commands. */
 /* Lists of variables of all SUBs: subvar$(isub%, i%), nsubvar%(isub%) */
 nsub_पूर्णांक = 0;
 nvar_पूर्णांक = 0;
 म_नकल(shपंचांगp_S,"");
 nl_पूर्णांक = 0;
 retrnfl_पूर्णांक = 0;
 म_नकल(e_S,CHR_S(34));
 xपंचांगpfl_पूर्णांक = 0;
 म_नकल(fime_S,"");
 flag_पूर्णांक = 0;
 अगर((fp_1 = ख_खोलो(म_नकल(fn1__S,inpf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn1__S); निकास(1);
 पूर्ण
 जबतक(! eof(fp_1))
 अणु
  ख_माला_लो(line_S, LMAX, fp_1);
  line_S[म_माप(line_S) - 1] = '\0';
  nl_पूर्णांक = nl_पूर्णांक + 1;
      अगर(line_S[म_माप(line_S)-1] == 13) line_S[म_माप(line_S)-1]='\0';/*croff*/
      अगर (line_S[0] == 'C' && cflag_पूर्णांक) अणु
       अगर (line_S[0]=='C' && (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t') || (memcmp(line_S,"CG",2)==0 || memcmp(line_S,"CH",2)==0 || memcmp(line_S,"CM",2)==0) && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t')) जाओ Lab_709;
      पूर्ण
  gulix(line_S);
      अगर (स_भेद(line_S, "FUNCTION ", 9) == 0) xपंचांगpfl_पूर्णांक = 1;
  जबतक(! (म_भेद(LEFT_S(line_S, 4), "SUB ") == 0 || xपंचांगpfl_पूर्णांक == 1))
  अणु
   अगर(म_भेद(line_S, "") != 0)
   अणु
        अगर (स_भेद(line_S,"REM ",4)==0) जाओ Lab_709;
    /* GOSUB Lab_900 */    /* line splitting */
    अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_900;
    क्रम(ii_पूर्णांक = 1; ii_पूर्णांक <= ntok_पूर्णांक; ii_पूर्णांक++)
    अणु
     म_नकल(line_S,linetok_S[ii_पूर्णांक]);
     gulix(line_S);
         अगर (स_भेद(line_S, "RETURN", 6) == 0) retrnfl_पूर्णांक = 1;
     /* check क्रम "FOR": */
         अगर (स_भेद(line_S, "FOR", 3) == 0)
         अणु
     म_नकल(line_S,MID_S(line_S, 4, LMAX));
     gulix(line_S);
     जाओ Lab_704;
         पूर्ण
     /* check क्रम "READ": */
         अगर (स_भेद(line_S, "READ", 4) == 0)
         अणु
     म_नकल(line_S,MID_S(line_S, 5, LMAX));
     gulix(line_S);
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "GET #" file I/O: */
         अगर (स_भेद(line_S, "GET #", 5) == 0)
         अणु
     म_नकल(d_S,MID_S(line_S, 6, LMAX));
     म_नकल(पंचांगp_S[3],"");
     tokenix(d_S, &n_पूर्णांक, ",", "");
     म_नकल(line_S,पंचांगp_S[3]);
     अगर(म_भेद(line_S, "") != 0)   /* Tokenize line and save variables */
     अणु
      /* GOSUB Lab_735 */
      अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     पूर्ण
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "GIFINFO ": */
         अगर (स_भेद(line_S, "GIFINFO ", 8) == 0)
         अणु
          /* Find the second argument */
          k_पूर्णांक=8; जबतक(line_S[k_पूर्णांक] != ',' && line_S[k_int] !='\0') k_पूर्णांक++;
          म_नकल(tws__S, &line_S[++k_पूर्णांक]); म_नकल(line_S, tws__S);
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "GCGET ": */
         अगर (स_भेद(line_S, "GCGET ", 6) == 0)
         अणु
     tokenix(MID_S(line_S, 7, LMAX), &k_पूर्णांक, ",", "");
          म_नकल(line_S, &पंचांगp_S[1][1]); line_S[(c=म_माप(line_S))]='\0';
          line_S[c-1]=','; म_जोड़ो(line_S, पंचांगp_S[2]);
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "GETCOL ": */
         अगर (स_भेद(line_S, "GETCOL ", 7) == 0)
         अणु
     म_नकल(line_S,MID_S(line_S, 8, LMAX));
     gulix(line_S);
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "XPOINTER " or "XGETGE ": */
         अगर (स_भेद(line_S,"XPOINTER ",9)==0 || स_भेद(line_S,"XGETGE ",7)==0)
         अणु
          i_पूर्णांक = 10; अगर (line_S[1] == 'G') i_पूर्णांक = 8;
     म_नकल(line_S,MID_S(line_S, i_पूर्णांक, LMAX));
     lleng_पूर्णांक = LEN(line_S);
     i_पूर्णांक = 0;
          जबतक(line_S[i_पूर्णांक] != '(' && i_पूर्णांक < lleng_पूर्णांक) i_पूर्णांक++;
          line_S[i_पूर्णांक] = ' '; c = 1;
          जबतक(i_पूर्णांक < lleng_पूर्णांक) अणु
           अगर (line_S[i_पूर्णांक] == '(') c++; if (line_S[i_int] == ')') c--;
           अगर (c == 0) अवरोध;
           i_पूर्णांक++;
          पूर्ण
          line_S[i_पूर्णांक] = ' ';
          /* Make sure there is no more than 4 parameters in the list: */
          i_पूर्णांक = 0; k_पूर्णांक = 0;
          जबतक ((c=line_S[i_पूर्णांक]) != 0) अणु
           अगर (c == ',') k_पूर्णांक++;
           अगर (k_पूर्णांक >= 4) अणु line_S[i_पूर्णांक] = '\0'; i_पूर्णांक--; पूर्ण
           i_पूर्णांक++;
          पूर्ण
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     /* check क्रम "XREQST ": */
         अगर (स_भेद(line_S, "XREQST ", 7) == 0)
         अणु
     tokenix(MID_S(line_S, 7, LMAX), &k_पूर्णांक, ",", "");
          म_नकल(line_S, पंचांगp_S[2]); म_जोड़ो(line_S, ", ");
          म_जोड़ो(line_S, पंचांगp_S[3]);
     /* GOSUB Lab_735 */    /* Tokenize line and save variables */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
     जाओ Lab_706;
         पूर्ण
     jflg_पूर्णांक = 0;   /* check 'LINE INPUT #','INPUT #', 'INPUT' and 'SSCAN' */
     /* GOSUB Lab_730 */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_730;
     अगर(jflg_पूर्णांक == 1)
     अणु
      जाओ Lab_706;
     पूर्ण
     jflg_पूर्णांक = 0;   /* variables among SUB arguments, check 'CALLs' */
     /* GOSUB Lab_750 */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_750;
     अगर(jflg_पूर्णांक == 1)
     अणु
      जाओ Lab_706;
     पूर्ण
Lab_704:
     jflg_पूर्णांक = 0;
     lleng_पूर्णांक = LEN(line_S);
     क्रम(k_पूर्णांक = 1; k_पूर्णांक <= lleng_पूर्णांक; k_पूर्णांक++)
     अणु
          अगर (line_S[k_पूर्णांक-1] == '=') अणु jflg_पूर्णांक = 1; जाओ Lab_705; पूर्ण
     पूर्ण
Lab_705:
     अगर(jflg_पूर्णांक == 1)
     अणु
      क्रम(j_पूर्णांक = 0; j_पूर्णांक <= k_पूर्णांक - 3; j_पूर्णांक++)
      अणु
           अगर (line_S[j_पूर्णांक] == ' ') अणु jflg_पूर्णांक = 0; जाओ Lab_708; पूर्ण
      पूर्ण
     पूर्ण
Lab_708:
     अगर(jflg_पूर्णांक == 1)
     अणु
      म_नकल(z_S,LEFT_S(line_S, k_पूर्णांक - 2));
          अगर (z_S[म_माप(z_S)-1] == ')')
          अणु
      j_पूर्णांक = 0;
           जबतक (z_S[j_पूर्णांक] != '(') j_पूर्णांक++;
           j_पूर्णांक++;
           z_S[j_पूर्णांक  ] = ')';
           z_S[j_पूर्णांक+1] = '\0';
          पूर्ण
      /* GOSUB Lab_790 */    /* Memorizing z$ */
      अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_790;
     पूर्ण
Lab_706:
    ;पूर्ण
   पूर्ण
Lab_701:
   अगर(eof(fp_1))
   अणु
    जाओ Lab_707;
   पूर्ण
   ख_माला_लो(line_S, LMAX, fp_1);
   line_S[म_माप(line_S) - 1] = '\0';
   nl_पूर्णांक = nl_पूर्णांक + 1;
       अगर(line_S[म_माप(line_S)-1] == 13)line_S[म_माप(line_S)-1]='\0';/*croff*/
       अगर (line_S[0] == 'C' && cflag_पूर्णांक) अणु
        अगर (line_S[0]=='C' && (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t') || (memcmp(line_S,"CG",2)==0 || memcmp(line_S,"CH",2)==0 || memcmp(line_S,"CM",2)==0) && (line_S[2]==' ' || line_S[2]=='\0' || line_S[2]=='\t')) जाओ Lab_701;
       पूर्ण
   gulix(line_S);
   अगर(म_भेद(LEFT_S(line_S, 9), "FUNCTION ") == 0)
   अणु
    xपंचांगpfl_पूर्णांक = 1;
   पूर्ण
  पूर्ण
Lab_707:   /* Get FUNCTION name */
  अगर(xपंचांगpfl_पूर्णांक == 1)
  अणु
   xपंचांगpfl_पूर्णांक = 0;
   /* GOSUB Lab_715 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_715;
  पूर्ण
  /* Insert DYNAMIC arrays which are not SHARED: */
  अगर(ndyna_पूर्णांक[nsub_पूर्णांक] > 0)
  अणु
   क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ndyna_पूर्णांक[nsub_पूर्णांक]; i_पूर्णांक++)
   अणु
    म_नकल(b_S,dyna_S[nsub_पूर्णांक][i_पूर्णांक]);
        j_पूर्णांक=0; जबतक(b_S[j_पूर्णांक]!='(' && b_S[j_int]!='\0') j_पूर्णांक++;
        b_S[j_पूर्णांक]='\0';
    प्र_लिखो(d_S,"%s%s",b_S,"()");
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nSHRDtk_पूर्णांक; j_पूर्णांक++)
    अणु
     अगर(म_भेद(d_S, shrd_S[j_पूर्णांक]) == 0)
     अणु
      जाओ Lab_712;
     पूर्ण
    पूर्ण
    nvar_पूर्णांक = nvar_पूर्णांक + 1;
    प्र_लिखो(vlist_S[nsub_पूर्णांक][nvar_पूर्णांक],"%s%s","*",b_S);
Lab_712:
   ;पूर्ण
  पूर्ण
  nvlist_पूर्णांक[nsub_पूर्णांक] = nvar_पूर्णांक;
Lab_711:   /* Sorting variables */
  म_नकल(पूर्णांक_S,"");
  म_नकल(rea_S,"");
  म_नकल(sss_S,"");
  म_नकल(lon_S,"");
  म_नकल(dbl_S,"");
  म_नकल(byt_S,"");
  म_नकल(sho_S,"");
  अगर(nvar_पूर्णांक > 0)
  अणु
   /* GOSUB Lab_710 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_710;
   अगर(म_भेद(पूर्णांक_S, "") != 0)
   अणु
    म_नकल(पूर्णांक_S,LEFT_S(पूर्णांक_S, LEN(पूर्णांक_S) - 2));
   पूर्ण
   अगर(म_भेद(rea_S, "") != 0)
   अणु
    म_नकल(rea_S,LEFT_S(rea_S, LEN(rea_S) - 2));
   पूर्ण
   अगर(म_भेद(sss_S, "") != 0)
   अणु
    म_नकल(sss_S,LEFT_S(sss_S, LEN(sss_S) - 2));
   पूर्ण
   अगर(म_भेद(lon_S, "") != 0)
   अणु
    म_नकल(lon_S,LEFT_S(lon_S, LEN(lon_S) - 2));
   पूर्ण
   अगर(म_भेद(dbl_S, "") != 0)
   अणु
    म_नकल(dbl_S,LEFT_S(dbl_S, LEN(dbl_S) - 2));
   पूर्ण
   अगर(म_भेद(byt_S, "") != 0)
   अणु
    म_नकल(byt_S,LEFT_S(byt_S, LEN(byt_S) - 2));
   पूर्ण
   अगर(म_भेद(sho_S, "") != 0)
   अणु
    म_नकल(sho_S,LEFT_S(sho_S, LEN(sho_S) - 2));
   पूर्ण
  पूर्ण
  म_नकल(vari_S[nsub_पूर्णांक],पूर्णांक_S);
  म_नकल(varr_S[nsub_पूर्णांक],rea_S);
  म_नकल(vars_S[nsub_पूर्णांक],sss_S);
  म_नकल(varl_S[nsub_पूर्णांक],lon_S);
  म_नकल(vard_S[nsub_पूर्णांक],dbl_S);
  म_नकल(varb_S[nsub_पूर्णांक],byt_S);
  म_नकल(vash_S[nsub_पूर्णांक],sho_S);
  अगर(! eof(fp_1))
  अणु
   nvar_पूर्णांक = 0;
   nsub_पूर्णांक = nsub_पूर्णांक + 1;
   म_नकल(shपंचांगp_S,"");
   /* Extraction of varlist at the beginning nsub%-th SUB */
   /* GOSUB Lab_780 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_780;
  पूर्ण
Lab_709:
 ;पूर्ण
 /* If last line is REM or CX make sure all variables are collected: */
 अगर(! flag_पूर्णांक)
 अणु
  flag_पूर्णांक = 1;
  जाओ Lab_711;
 पूर्ण
 ख_बंद(fp_1);
 nsubvar_पूर्णांक[nsub_पूर्णांक + 1] = 0;   /* Ensure this is 0 (important in 45000) */
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_710:   /* sorting variable types */
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nvar_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(d_S,vlist_S[nsub_पूर्णांक][i_पूर्णांक]);
       अगर(d_S[0]=='*') अणु
  vartyp(MID_S(d_S, 2, LMAX), &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 5)
  अणु
   typ_पूर्णांक = 35;
  पूर्ण
       पूर्ण अन्यथा अणु
  vartyp(d_S, &typ_पूर्णांक);
       पूर्ण
  अगर(typ_पूर्णांक == 0)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s%s%s% d \n","ERROR can't determine vartyp of: ",d_S," in line No",nl_पूर्णांक);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अगर(typ_पूर्णांक < 10)
  अणु
   अगर(typ_पूर्णांक == 1)
   अणु
    प्र_लिखो(tws__S,"%s%s%s",पूर्णांक_S,d_S,", ");
    म_नकल(पूर्णांक_S,tws__S);
   पूर्ण
   अन्यथा
   अणु
    अगर(typ_पूर्णांक == 5)
    अणु
     प्र_लिखो(tws__S,"%s%s%s",sss_S,d_S,"[LMAX], ");
     म_नकल(sss_S,tws__S);
    पूर्ण
    अन्यथा
    अणु
     अगर(typ_पूर्णांक == 2)
     अणु
      प्र_लिखो(tws__S,"%s%s%s",lon_S,d_S,", ");
      म_नकल(lon_S,tws__S);
     पूर्ण
     अन्यथा
     अणु
      अगर(typ_पूर्णांक == 4)
      अणु
       प्र_लिखो(tws__S,"%s%s%s",dbl_S,d_S,", ");
       म_नकल(dbl_S,tws__S);
      पूर्ण
      अन्यथा
      अणु
       अगर(typ_पूर्णांक == 3)
       अणु
        प्र_लिखो(tws__S,"%s%s%s",rea_S,d_S,", ");
        म_नकल(rea_S,tws__S);
       पूर्ण
       अन्यथा
       अणु
        अगर(typ_पूर्णांक == 8)
        अणु
         प्र_लिखो(tws__S,"%s%s%s",byt_S,d_S,", ");
         म_नकल(byt_S,tws__S);
        पूर्ण
        अन्यथा
        अणु
         अगर(typ_पूर्णांक == 9)
         अणु
          प्र_लिखो(tws__S,"%s%s%s",sho_S,d_S,", ");
          म_नकल(sho_S,tws__S);
         पूर्ण
        पूर्ण
       पूर्ण
      पूर्ण
     पूर्ण
    पूर्ण
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   अगर(typ_पूर्णांक == 35)
   अणु
    प्र_लिखो(tws__S,"%s%s%s",sss_S,d_S,", ");
    म_नकल(sss_S,tws__S);
   पूर्ण
  पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_715:   /* Getting FUNCTION name, "" अगर not a FUNCTION */
 /* This name is then क्रमbidden in variable list */
 म_नकल(fime_S,"");
 g_पूर्णांक = 10;
     जबतक (line_S[g_पूर्णांक-1] != '(' && line_S[g_int-1] != '\0') g_पूर्णांक++;
 म_नकल(fime_S,MID_S(line_S, 10, g_पूर्णांक - 10));
 gulix(fime_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_720:   /* Unused */
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_730:   /* Checking variable declarations in "LINE INPUT #n," statements */
 gulix(line_S);
 leng_पूर्णांक = LEN(line_S);
 अगर(म_भेद(LEFT_S(line_S, 12), "LINE INPUT #") == 0 || म_भेद(LEFT_S(line_S, 7), "INPUT #") == 0)
 अणु
  g_पूर्णांक = 8;
  jflg_पूर्णांक = 1;
  जबतक(म_भेद(MID_S(line_S, g_पूर्णांक, 1), ",") != 0 && g_पूर्णांक < leng_पूर्णांक)
  अणु
   g_पूर्णांक = g_पूर्णांक + 1;
  पूर्ण
  अगर(g_पूर्णांक == leng_पूर्णांक)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR in line No",nl_पूर्णांक,":",line_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अन्यथा
  अणु
   म_नकल(line_S,MID_S(line_S, g_पूर्णांक + 1, leng_पूर्णांक - g_पूर्णांक));
   /* GOSUB Lab_735 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
 पूर्ण
 अन्यथा
 अणु
  /*  Checking variable declarations in "INPUT" statements */
      अगर (स_भेद(line_S, "INPUT", 5) == 0) अणु
  jflg_पूर्णांक = 1;
  अगर(leng_पूर्णांक <= 6)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing arguments to INPUT in line No",nl_पूर्णांक,":",line_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अन्यथा
  अणु
   म_नकल(line_S,MID_S(line_S, 6, leng_पूर्णांक - 5));
   /* GOSUB Lab_735 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
      पूर्ण
  /*  Checking variable declarations in "SSCAN" statements */
      अगर (स_भेद(line_S, "SSCAN", 5) == 0) अणु
  jflg_पूर्णांक = 1;
  अगर(leng_पूर्णांक <= 6)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing arguments to SSCAN in line No",nl_पूर्णांक,":",line_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अन्यथा
  अणु
        i_पूर्णांक = 5; c = line_S[i_पूर्णांक];
        जबतक(c != ';' && c != '\0') अणु
         c = line_S[++i_पूर्णांक];
        पूर्ण
        अगर(!c) जाओ Lab_29000;
   म_नकल(line_S,MID_S(line_S, i_पूर्णांक + 2, LMAX));
   /* GOSUB Lab_735 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_735;
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
      पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_735:   /* Tokenizator varijabli u INPUT, SSCAN, GIFINFO ... linijama */
 tokenix(line_S, &L_पूर्णांक, ",", ";");
 क्रम(g_पूर्णांक = 1; g_पूर्णांक <= L_पूर्णांक; g_पूर्णांक++)
 अणु
  म_नकल(z_S,पंचांगp_S[g_पूर्णांक]);   /* Memorizing variable z$ */
  /* GOSUB Lab_790 */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_790;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_750:   /* Potraga za varijablama argumentima user SUBroutina i FUNCTIONa */
 /* WHOLE arrays cannot be passed at the moment !!!! */
 /* Array names (when possible) passed as bare names (no brackets). */
 /* Element of an array can be passed as a single number or string, */
 /* however, they are not stored here (क्रम simplicity). */
 अगर(म_भेद(LEFT_S(line_S, 4), "CALL") == 0)
 अणु
  g_पूर्णांक = 5;
  leng_पूर्णांक = LEN(line_S);
  जबतक(! म_भेद(MID_S(line_S, g_पूर्णांक, 1), "(") == 0 && g_पूर्णांक < leng_पूर्णांक)
  अणु
   g_पूर्णांक = g_पूर्णांक + 1;
  पूर्ण
  अगर(g_पूर्णांक == leng_पूर्णांक)
  अणु
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
  j_पूर्णांक = leng_पूर्णांक;
  जबतक(! म_भेद(MID_S(line_S, j_पूर्णांक, 1), ")") == 0 && j_पूर्णांक > g_पूर्णांक)
  अणु
   j_पूर्णांक = j_पूर्णांक - 1;
  पूर्ण
  अगर(म_भेद(MID_S(line_S, j_पूर्णांक, 1), ")") != 0)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR in line No",nl_पूर्णांक,":",line_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  म_नकल(d_S,MID_S(line_S, g_पूर्णांक + 1, j_पूर्णांक - g_पूर्णांक - 1));
  gulix(d_S);
  /* tokenization of the CALLed SUBroutine argument list */
  tokenix(d_S, &L_पूर्णांक, ",", "");
  क्रम(g_पूर्णांक = 1; g_पूर्णांक <= L_पूर्णांक; g_पूर्णांक++)
  अणु
   म_नकल(z_S,पंचांगp_S[g_पूर्णांक]);
   /* Check whether z$ is a var (rather than funct. or express.) */
   /* GOSUB Lab_755 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_755;
   अगर(पंचांगpfl_पूर्णांक == 0)
   अणु
    अगर(VAL(z_S) == 0 && म_भेद(LEFT_S(z_S, 1), "0") != 0)   /* Memorizing variable z$ */
    अणु
     /* GOSUB Lab_790 */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_790;
    पूर्ण
   पूर्ण
  पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);
Lab_755:   /* Check whether z$ is a var (not array, funct. or expr.) */
 पंचांगpfl_पूर्णांक = 0;
 अगर(म_भेद(LEFT_S(z_S, 1), e_S) == 0)
 अणु
  पंचांगpfl_पूर्णांक = 1;
  जाओ Lab_756;
 पूर्ण
 क्रम(j_पूर्णांक = 1; j_पूर्णांक <= LEN(z_S); j_पूर्णांक++)
 अणु
  म_नकल(b_S,MID_S(z_S, j_पूर्णांक, 1));
  अगर(म_भेद(b_S, " ") == 0 || म_भेद(b_S, "(") == 0)
  अणु
   पंचांगpfl_पूर्णांक = 1;
   जाओ Lab_756;
  पूर्ण
 पूर्ण
Lab_756:
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_780:   /* Storing argumentlist of the SUB or FUNCTION */
 /* and storing of the SUB name */
 म_नकल(a_S,line_S);
 j_पूर्णांक = 0;
 k_पूर्णांक = 0;
 leng_पूर्णांक = LEN(a_S);
 brcnt_पूर्णांक = 0;
 क्रम(i_पूर्णांक = 4; i_पूर्णांक <= leng_पूर्णांक; i_पूर्णांक++)
 अणु
      c=a_S[i_पूर्णांक-1];
      अगर (c=='(') अणु अगर (brcnt_पूर्णांक++ == 0)   j_पूर्णांक = i_पूर्णांक + 1; पूर्ण
      अगर (c==')') अणु अगर (--brcnt_पूर्णांक == 0) अणु k_पूर्णांक = i_पूर्णांक - 1; जाओ Lab_781; पूर्णपूर्ण
 पूर्ण
Lab_781:
     अगर(स_भेद(a_S,"SUB ",4) == 0) अणुम_नकल(b_S, &a_S[4]), b_S[j_पूर्णांक-6]='\0';पूर्ण
     अगर(स_भेद(a_S,"FUNC",4) == 0) अणुम_नकल(b_S, &a_S[9]), b_S[j_पूर्णांक-11]='\0';पूर्ण
 gulix(b_S);
 म_नकल(subname_S[nsub_पूर्णांक],b_S);
 अगर(j_पूर्णांक == 0)
 अणु
  nsubvar_पूर्णांक[nsub_पूर्णांक] = 0;
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 म_नकल(varlist_S,MID_S(a_S, j_पूर्णांक, k_पूर्णांक - j_पूर्णांक + 1));
 gulix(varlist_S);   /* varlist -> पंचांगp$(), n% */
 tokenix(varlist_S, &n_पूर्णांक, ",", "");
 nsubvar_पूर्णांक[nsub_पूर्णांक] = n_पूर्णांक;
 अगर(n_पूर्णांक > 0)
 अणु
  क्रम(g_पूर्णांक = 1; g_पूर्णांक <= n_पूर्णांक; g_पूर्णांक++)
  अणु
   म_नकल(subvar_S[nsub_पूर्णांक][g_पूर्णांक],पंचांगp_S[g_पूर्णांक]);
  पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_790:   /* Spremanje jedne varijable z$, za deklaraciju ako je NOVA */
 /* i ako nije u SHARED i ako nije parametar करोticne SUBroutine */
 /* i ako nije अक्षर konstanta "..." ili brojna konstanta eg. 3 */
 अगर(म_भेद(z_S, fime_S) == 0)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 j_पूर्णांक = ASC(LEFT_S(z_S, 1));
 अगर((97 <= j_पूर्णांक && j_पूर्णांक <= 122 || 65 <= j_पूर्णांक && j_पूर्णांक <= 90 || 48 <= j_पूर्णांक && j_पूर्णांक <= 57))
 अणु
  /*       IF LEFT$(z$, 1) = e$ THEN RETURN */
          अगर (z_S[0] == '"') /* RETURN */ दीर्घ_लाँघ(j__buf[--j__lev],1);
  /* GOSUB Lab_795 */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_795;
  अगर(nvar_पूर्णांक == 0 && nshtok_पूर्णांक[nsub_पूर्णांक] == 0 && nsubvar_पूर्णांक[nsub_पूर्णांक] == 0)
  अणु
   nvar_पूर्णांक = 1;
   म_नकल(vlist_S[nsub_पूर्णांक][1],z_S);
  पूर्ण
  अन्यथा
  अणु
   क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nvar_पूर्णांक; j_पूर्णांक++)
   अणु
    अगर(म_भेद(vlist_S[nsub_पूर्णांक][j_पूर्णांक], z_S) == 0)
    अणु
     /* RETURN */
     दीर्घ_लाँघ(j__buf[--j__lev],1);
    पूर्ण
   पूर्ण
   अगर(nsub_पूर्णांक == 0)
   अणु
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nSHRDtk_पूर्णांक; j_पूर्णांक++)
    अणु
     अगर(म_भेद(shrd_S[j_पूर्णांक], z_S) == 0)
     अणु
      /* RETURN */
      दीर्घ_लाँघ(j__buf[--j__lev],1);
     पूर्ण
    पूर्ण
   पूर्ण
   अन्यथा
   अणु
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nshtok_पूर्णांक[nsub_पूर्णांक]; j_पूर्णांक++)
    अणु
     अगर(म_भेद(shtok_S[nsub_पूर्णांक][j_पूर्णांक], z_S) == 0)
     अणु
      /* RETURN */
      दीर्घ_लाँघ(j__buf[--j__lev],1);
     पूर्ण
    पूर्ण
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nsubvar_पूर्णांक[nsub_पूर्णांक]; j_पूर्णांक++)
    अणु
     अगर(म_भेद(subvar_S[nsub_पूर्णांक][j_पूर्णांक], z_S) == 0)
     अणु
      /* RETURN */
      दीर्घ_लाँघ(j__buf[--j__lev],1);
     पूर्ण
    पूर्ण
   पूर्ण
   nvar_पूर्णांक = nvar_पूर्णांक + 1;
   म_नकल(vlist_S[nsub_पूर्णांक][nvar_पूर्णांक],z_S);
  पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_795:   /* x(...)  -->  x() */
     अगर (z_S[म_माप(z_S)-1] == ')')
     अणु
      jj_पूर्णांक=0; जबतक( z_S[jj_पूर्णांक] != '(' ) jj_पूर्णांक++;
      z_S[++jj_पूर्णांक] = ')'; z_S[++jj_int] = '\0';
     पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_800:   /* preprocessing the whole file क्रम SHARED variables and arrays and */
 /* storing all SHARED token lists क्रम every SUB in shtok$(jsub%,i%) */
 /* Also takes care of: DEFSTR, DEF FN */
 /* Also makes a list of dynamically declared arrays, dyna$(,), ndyna%() */
 /* Set DYNAMIC flag क्रम SHARED arrays: dynaf_%() */
 nSHRDtk_पूर्णांक = 0;
 jsub_पूर्णांक = 0;
 narr_पूर्णांक = 0;
 alis_पूर्णांक = 0;
 flag_पूर्णांक = 0;
 nl_पूर्णांक = 0;
 g_पूर्णांक = 0;
 defstr_पूर्णांक = 0;   /* set अगर DEFSTR in effect (vartyp) */
 defपूर्णांक_पूर्णांक = 0;   /* set अगर DEFINT in effect (vartyp) */
 defdbl_पूर्णांक = 0;   /* set अगर DEFDBL in effect (vartyp) */
 deffnf_पूर्णांक = 0;   /* set अगर DEF FN occured. Then क्षणिक_ख$ is temporary filled */
 datalin_पूर्णांक = 0;   /* DATA lines counter */
 datacnt_पूर्णांक = 0;
 अगर((fp_3 = ख_खोलो(म_नकल(fn3__S,क्षणिक_ख_S), "w")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn3__S); निकास(1);
 पूर्ण
 अगर((fp_1 = ख_खोलो(म_नकल(fn1__S,inpf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn1__S); निकास(1);
 पूर्ण
 जबतक(! eof(fp_1))
 अणु
  ख_माला_लो(line_S, LMAX, fp_1);
  line_S[म_माप(line_S) - 1] = '\0';
  nl_पूर्णांक = nl_पूर्णांक + 1;
      अगर(line_S[म_माप(line_S)-1] == 13) line_S[म_माप(line_S)-1]='\0';/*croff*/
      अगर(line_S[0] == '\0') जाओ Lab_809;
  /* GOSUB Lab_900 */    /* line splitter */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_900;
  क्रम(itok_पूर्णांक = 1; itok_पूर्णांक <= ntok_पूर्णांक; itok_पूर्णांक++)
  अणु
   म_नकल(line_S,linetok_S[itok_पूर्णांक]);
   lleng_पूर्णांक = LEN(line_S);
       अगर(स_भेद(line_S,"DEFSTR ",7)==0 || स_भेद(line_S,"DEFINT ",7)==0 || स_भेद(line_S,"DEFDBL ",7)==0) अणु
   म_नकल(a_S,line_S);
   /* GOSUB Lab_19200 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19200;
       पूर्ण
       अगर(स_भेद(line_S,"DATA ",5)==0) अणु
   म_नकल(a_S,line_S);
   /* GOSUB Lab_19500 */
   अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_19500;
       पूर्ण
       अगर(स_भेद(line_S,"DEF FN",6)==0) अणु
   i_पूर्णांक = 6;
        जबतक(line_S[i_पूर्णांक] != '(' && line_S[i_पूर्णांक]) i_पूर्णांक++;
   j_पूर्णांक = i_पूर्णांक + 1;
        जबतक(line_S[j_पूर्णांक] != ')' && line_S[j_पूर्णांक]) j_पूर्णांक++;
   म_नकल(b_S,MID_S(line_S, 5, i_पूर्णांक - 4));   /* fn name */
   म_नकल(d_S,MID_S(line_S, 5, j_पूर्णांक - 3));
   ख_लिखो(fp_3,"\n");
   ख_लिखो(fp_3,"%s%s\n","FUNCTION ",d_S);
   ख_लिखो(fp_3,"%s\n","REM function created from DEF FN");
   ख_लिखो(fp_3,"%s%s%s\n"," ",b_S,MID_S(line_S, j_पूर्णांक + 2, LMAX));
   ख_लिखो(fp_3,"%s\n","END FUNCTION");
   /*     PRINT #3, */
   deffnf_पूर्णांक = 1;
       पूर्ण
       अगर(स_भेद(line_S,"SUB ",4)==0 || स_भेद(line_S,"FUNCTION ", 9)==0) अणु
   jsub_पूर्णांक = jsub_पूर्णांक + 1;
   g_पूर्णांक = 0;
       पूर्ण
   अगर(jsub_पूर्णांक > NSMX)
   अणु
    ख_लिखो(मानक_त्रुटि,"%s\n","Max. number of SUBroutines and FUNCTIONs reached !");
    ख_लिखो(मानक_त्रुटि,"%s\n","Enlarge the NSMX parameter in qb2c.c, and recompile it !");
    संकेत_पूर्णांक = 1;   /* निकास(1); */
    जाओ Lab_9999;
   पूर्ण
   /* List of dimensioned arrays in MAIN: */
   /* (Those which are shared shall be declared in the preamble.) */
   अगर(jsub_पूर्णांक == 0 && म_भेद(LEFT_S(line_S, 4), "DIM ") == 0)
   अणु
    अगर(म_भेद(LEFT_S(line_S, 11), "DIM DYNAMIC") == 0)
    अणु
     म_नकल(b_S,MID_S(line_S, 12, LMAX));
     flag_पूर्णांक = 1;
    पूर्ण
    अन्यथा
    अणु
     म_नकल(b_S,MID_S(line_S, 4, LMAX));
     flag_पूर्णांक = 0;
    पूर्ण
    tokenix(b_S, &ntok_पूर्णांक, ",", "");
    क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ntok_पूर्णांक; i_पूर्णांक++)
    अणु
     म_नकल(temp_S[i_पूर्णांक],पंचांगp_S[i_पूर्णांक]);
    पूर्ण
    अगर(ntok_पूर्णांक > 0)
    अणु
     क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ntok_पूर्णांक; i_पूर्णांक++)
     अणु
      म_नकल(d_S,temp_S[i_पूर्णांक]);
      arraydim(d_S);
      narr_पूर्णांक = narr_पूर्णांक + 1;
      अगर(narr_पूर्णांक >= MARR)
      अणु
       ख_लिखो(मानक_त्रुटि,"%s\n","Max. number of arrays in MAIN is reached !");
       ख_लिखो(मानक_त्रुटि,"%s\n","Enlarge the MARR parameter in qb2c.c, and recompile it !");
       संकेत_पूर्णांक = 1;   /* निकास(1); */
       जाओ Lab_9999;
      पूर्ण
      म_नकल(darr_S[narr_पूर्णांक],d_S);
      dynaf__पूर्णांक[narr_पूर्णांक] = flag_पूर्णांक;
     पूर्ण
    पूर्ण
   पूर्ण
   /* List of dynamically (explicite or implicite) declared arrays */
       अगर (स_भेद(line_S, "DIM ", 4)==0) अणु
   अगर(म_भेद(LEFT_S(line_S, 11), "DIM DYNAMIC") == 0)
   अणु
    ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: REDIM feature available in pay version only.",nl_पूर्णांक,":",line_S);
    संकेत_पूर्णांक = 1;   /* निकास(1); */
    जाओ Lab_9999;
   पूर्ण
       पूर्ण
   /* List of dynamically (explicite or implicite) declared arrays */
   अगर(म_भेद(LEFT_S(line_S, 7), "SHARED ") == 0)
   अणु
    म_नकल(d_S,MID_S(line_S, 8, lleng_पूर्णांक - 7));
    /* GOSUB Lab_810 */
    अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_810;
   पूर्ण
  पूर्ण
Lab_809:
 ;पूर्ण
 ख_बंद(fp_1);
 ख_बंद(fp_3);
 अगर(deffnf_पूर्णांक)
 अणु
  प्र_लिखो(tws__S,"%s%s%s%s%s%s","cat ",inpf_S," ",क्षणिक_ख_S," > ",पंचांगpfil0_S);
  प्रणाली(tws__S);
  म_नकल(inpf_S,पंचांगpfil0_S);
 पूर्ण
 /* Sorting SHARED variables */
 अगर(nSHRDtk_पूर्णांक > 0)
 अणु
  म_नकल(sपूर्णांक_S,"");
  म_नकल(srea_S,"");
  म_नकल(ssss_S,"");
  म_नकल(slin_S,"");
  म_नकल(sdbl_S,"");
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nSHRDtk_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(d_S,shrd_S[i_पूर्णांक]);
   म_नकल(z_S,RIGHT_S(d_S, 1));
   अगर(म_भेद(z_S, ")") != 0)
   अणु
    vartyp(d_S, &typ_पूर्णांक);
    अगर(typ_पूर्णांक == 1)
    अणु
     प्र_लिखो(tws__S,"%s%s%s",sपूर्णांक_S,d_S,", ");
     म_नकल(sपूर्णांक_S,tws__S);
    पूर्ण
    अन्यथा
    अणु
     अगर(typ_पूर्णांक == 5)
     अणु
      प्र_लिखो(tws__S,"%s%s%s",ssss_S,d_S,"[LMAX], ");
      म_नकल(ssss_S,tws__S);
     पूर्ण
     अन्यथा
     अणु
      अगर(typ_पूर्णांक == 2)
      अणु
       प्र_लिखो(tws__S,"%s%s%s",slin_S,d_S,", ");
       म_नकल(slin_S,tws__S);
      पूर्ण
      अन्यथा
      अणु
       अगर(typ_पूर्णांक == 4)
       अणु
        प्र_लिखो(tws__S,"%s%s%s",sdbl_S,d_S,", ");
        म_नकल(sdbl_S,tws__S);
       पूर्ण
       अन्यथा
       अणु
        प्र_लिखो(tws__S,"%s%s%s",srea_S,d_S,", ");
        म_नकल(srea_S,tws__S);
       पूर्ण
      पूर्ण
     पूर्ण
    पूर्ण
   पूर्ण
   अन्यथा
   अणु
    क्रम(j_पूर्णांक = 1; j_पूर्णांक <= narr_पूर्णांक; j_पूर्णांक++)
    अणु
     g_पूर्णांक = LEN(d_S) - 1;
     अगर(म_भेद(LEFT_S(d_S, g_पूर्णांक), LEFT_S(darr_S[j_पूर्णांक], g_पूर्णांक)) == 0)
     अणु
      alis_पूर्णांक = alis_पूर्णांक + 1;
      अगर(alis_पूर्णांक >= SHMX)
      अणु
       ख_लिखो(मानक_त्रुटि,"%s\n","Maximum number of SHARED arrays reached.");
       ख_लिखो(मानक_त्रुटि,"%s\n","Enlarge parameter SHMX in qb2c.c, and recompile qb2c !");
       संकेत_पूर्णांक = 1;   /* निकास(1); */
       जाओ Lab_9999;
      पूर्ण
      alist_पूर्णांक[alis_पूर्णांक] = j_पूर्णांक;
     पूर्ण
    पूर्ण
   पूर्ण
  पूर्ण
  /* Bare variables: */
  अगर(म_भेद(sपूर्णांक_S, "") != 0)
  अणु
   म_नकल(sपूर्णांक_S,LEFT_S(sपूर्णांक_S, LEN(sपूर्णांक_S) - 2));
  पूर्ण
  अगर(म_भेद(srea_S, "") != 0)
  अणु
   म_नकल(srea_S,LEFT_S(srea_S, LEN(srea_S) - 2));
  पूर्ण
  अगर(म_भेद(ssss_S, "") != 0)
  अणु
   म_नकल(ssss_S,LEFT_S(ssss_S, LEN(ssss_S) - 2));
  पूर्ण
  अगर(म_भेद(slin_S, "") != 0)
  अणु
   म_नकल(slin_S,LEFT_S(slin_S, LEN(slin_S) - 2));
  पूर्ण
  अगर(म_भेद(sdbl_S, "") != 0)
  अणु
   म_नकल(sdbl_S,LEFT_S(sdbl_S, LEN(sdbl_S) - 2));
  पूर्ण
 पूर्ण
 अगर(nSHRDtk_पूर्णांक > TMAX)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: MAIN (800): Dimension of tmp$() too small. Enlarge TMAX and recompile qb2c!");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nSHRDtk_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(shtok_S[0][i_पूर्णांक],shrd_S[i_पूर्णांक]);
 पूर्ण
 nshtok_पूर्णांक[0] = nSHRDtk_पूर्णांक;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_810:   /* tokenization of SHARED variables */
 leng_पूर्णांक = LEN(d_S);
 i_पूर्णांक = 1;   /* g% = 0, this is set at the beginning of a SUB */
 जबतक(i_पूर्णांक <= leng_पूर्णांक)
 अणु
  अगर(म_भेद(MID_S(d_S, i_पूर्णांक, 1), ",") != 0 && म_भेद(MID_S(d_S, i_पूर्णांक, 1), " ") != 0)
  अणु
   j_पूर्णांक = i_पूर्णांक;
   i_पूर्णांक = i_पूर्णांक + 1;
   जबतक(! (म_भेद(MID_S(d_S, i_पूर्णांक, 1), ",") == 0 || म_भेद(MID_S(d_S, i_पूर्णांक, 1), "  ") == 0 || i_पूर्णांक > leng_पूर्णांक))
   अणु
    i_पूर्णांक = i_पूर्णांक + 1;
   पूर्ण
   म_नकल(z_S,MID_S(d_S, j_पूर्णांक, i_पूर्णांक - j_पूर्णांक));
   g_पूर्णांक = g_पूर्णांक + 1;
   अगर(g_पूर्णांक > TMAX)
   अणु
    ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: MAIN (810): Dimension of tmp$() too small. Enlarge TMAX and recompile qb2c!");
    संकेत_पूर्णांक = 1;   /* निकास(1); */
    जाओ Lab_9999;
   पूर्ण
   म_नकल(shtok_S[jsub_पूर्णांक][g_पूर्णांक],z_S);
   अगर(nSHRDtk_पूर्णांक == 0)
   अणु
    nSHRDtk_पूर्णांक = 1;
    म_नकल(shrd_S[1],z_S);
   पूर्ण
   अन्यथा
   अणु
    पंचांगpfl_पूर्णांक = 0;
    क्रम(L_पूर्णांक = 1; L_पूर्णांक <= nSHRDtk_पूर्णांक; L_पूर्णांक++)
    अणु
     अगर(म_भेद(shrd_S[L_पूर्णांक], z_S) == 0)
     अणु
      पंचांगpfl_पूर्णांक = 1;
     पूर्ण
    पूर्ण
    अगर(पंचांगpfl_पूर्णांक == 0)
    अणु
     nSHRDtk_पूर्णांक = nSHRDtk_पूर्णांक + 1;
     म_नकल(shrd_S[nSHRDtk_पूर्णांक],z_S);
    पूर्ण
   पूर्ण
  पूर्ण
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 nshtok_पूर्णांक[jsub_पूर्णांक] = g_पूर्णांक;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_900:   /* splitting one physical line line$ पूर्णांकo ':' pieces, line splicer */
 /* Split IF lines अगर something after THEN and add END IF */
 /* Force splitting अगर line labeled */
 /* Returns (bare, gulix!) linetok$(), ntok% */
 /* C lines must never came here. */
 lleng_पूर्णांक = LEN(line_S);
 gulix(line_S);
 अगर(lleng_पूर्णांक == 0)
 अणु
  ntok_पूर्णांक = 0;
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 ntok_पूर्णांक = 0;
 tok_पूर्णांक[0] = 0;
 lremfl_पूर्णांक = 0;
 thnfl_पूर्णांक = 0;
 पंचांगpfl_पूर्णांक = 0;
 म_नकल(t_S,"");
     अगर (स_भेद(line_S,"REM",3)==0) अणु
 ntok_पूर्णांक = 1;
 म_नकल(linetok_S[1],line_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);
     पूर्ण
 g_दीर्घ = VAL(line_S);
 अगर(g_दीर्घ != 0)
 अणु
  म_नकल(b_S,STR_S(g_दीर्घ));
  म_नकल(d_S,MID_S(line_S, LEN(b_S), LMAX));
  gulix(d_S);
  प्र_लिखो(line_S,"%s%s%s",b_S,": ",d_S);
  /* C     अगर(स_भेद(d_S,"IF ",3)==0) पंचांगpfl_पूर्णांक = 1; */
 पूर्ण
 /* C    अगर(स_भेद(line_S,"IF ",3)==0) पंचांगpfl_पूर्णांक = 1; */
 i_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
     जबतक(i_पूर्णांक <= (lleng_पूर्णांक=म_माप(line_S))) अणु
      c = line_S[i_पूर्णांक-1];
      अगर (c == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
      अगर (c == ':' && togfl_पूर्णांक == 0)
      अणु
 ntok_पूर्णांक = ntok_पूर्णांक + 1;
 tok_पूर्णांक[ntok_पूर्णांक] = i_पूर्णांक;
      पूर्ण
 अगर(i_पूर्णांक >= lleng_पूर्णांक - 3)
 अणु
  जाओ Lab_901;
 पूर्ण
      अगर(स_भेद(&line_S[i_पूर्णांक-1],"IF ",3)==0 && !togfl_पूर्णांक) पंचांगpfl_पूर्णांक=1;
      अगर((स_भेद(&line_S[i_पूर्णांक-1],"GOTO",4)==0 || स_भेद(&line_S[i_पूर्णांक-1],"GOSUB",5)==0) && !togfl_पूर्णांक && पंचांगpfl_पूर्णांक) अणु
 प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),"THEN ",MID_S(line_S, i_पूर्णांक, LMAX));
 i_पूर्णांक = i_पूर्णांक - 1;
 पंचांगpfl_पूर्णांक = 0;
 जाओ Lab_901;
      पूर्ण
      अगर(स_भेद(&line_S[i_पूर्णांक-1],"THEN",4)==0 && !togfl_पूर्णांक) अणु
 म_नकल(f_S,MID_S(line_S, i_पूर्णांक + 4, LMAX));
 gulix(f_S);
 पंचांगpfl_पूर्णांक = 0;
 अगर(म_भेद(f_S, "") == 0)   /* Not अंतरभूत */
 अणु
  जाओ Lab_902;
 पूर्ण
 अगर(VAL(f_S) == 0)
 अणु
  प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक + 3),":",MID_S(line_S, i_पूर्णांक + 4, LMAX));
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक + 3),": GOTO",MID_S(line_S, i_पूर्णांक + 4, LMAX));
 पूर्ण
 thnfl_पूर्णांक = thnfl_पूर्णांक + 1;
 i_पूर्णांक = i_पूर्णांक + 3;
 जाओ Lab_901;
      पूर्ण
      अगर(स_भेद(&line_S[i_पूर्णांक-1],"ELSE ",5)==0 && !togfl_पूर्णांक) अणु
 म_नकल(f_S,MID_S(line_S, i_पूर्णांक + 4, LMAX));
 gulix(f_S);
 अगर(VAL(f_S) == 0)
 अणु
  प्र_लिखो(line_S,"%s%s%s%s%s",LEFT_S(line_S, i_पूर्णांक - 2),":",MID_S(line_S, i_पूर्णांक - 1, 5),":",MID_S(line_S, i_पूर्णांक + 4, LMAX));
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(line_S,"%s%s%s%s%s",LEFT_S(line_S, i_पूर्णांक - 2),":",MID_S(line_S, i_पूर्णांक - 1, 5),": GOTO",MID_S(line_S, i_पूर्णांक + 4, LMAX));
 पूर्ण
 ntok_पूर्णांक = ntok_पूर्णांक + 1;
 tok_पूर्णांक[ntok_पूर्णांक] = i_पूर्णांक - 1;
 i_पूर्णांक = i_पूर्णांक + 4;
 जाओ Lab_901;
      पूर्ण
      अगर(स_भेद(&line_S[i_पूर्णांक-1],"REM ",4)==0 && !togfl_पूर्णांक) अणु
 म_नकल(t_S,MID_S(line_S, i_पूर्णांक + 4, LMAX));
 म_नकल(line_S,LEFT_S(line_S, i_पूर्णांक - 3));
 gulix(t_S);
 j_पूर्णांक = LEN(line_S);
 lremfl_पूर्णांक = 1;
 जाओ Lab_902;
      पूर्ण
Lab_901:
 i_पूर्णांक = i_पूर्णांक + 1;
     पूर्ण /*LOOP*/
Lab_902:   /* Add eventual END IF's to अंतरभूतs */
 अगर(lremfl_पूर्णांक == 1)
 अणु
  ntok_पूर्णांक = ntok_पूर्णांक - 1;
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= thnfl_पूर्णांक; i_पूर्णांक++)
 अणु
  ntok_पूर्णांक = ntok_पूर्णांक + 1;
  tok_पूर्णांक[ntok_पूर्णांक] = LEN(line_S) + 1;
  प्र_लिखो(tws__S,"%s%s",line_S,": END IF");
  म_नकल(line_S,tws__S);
 पूर्ण
 ntok_पूर्णांक = ntok_पूर्णांक + 1;
 tok_पूर्णांक[ntok_पूर्णांक] = LEN(line_S) + 1;
Lab_903:   /* split the line in tokens separated by ":" */
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ntok_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(b_S,MID_S(line_S, tok_पूर्णांक[i_पूर्णांक - 1] + 1, tok_पूर्णांक[i_पूर्णांक] - tok_पूर्णांक[i_पूर्णांक - 1] - 1));
      अगर (स_भेद(b_S, "LET ", 4) == 0) स_हटाओ(b_S, &b_S[4], म_माप(b_S)-3);
  gulix(b_S);
  म_नकल(linetok_S[i_पूर्णांक],b_S);
 पूर्ण
 /*  PRINT line$ */
 /*  FOR i% = 1 TO ntok% */
 /*   PRINT linetok$(i%) */
 /*  NEXT i% */
 /*  PRINT t$ */
 /*  PRINT "Izasao 900!" */
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_1000:   /* "SUB name(varlist...)", "FUNCTION name(varlist...)" */
 अगर(commfl_पूर्णांक == 1)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 अगर(म_भेद(LEFT_S(a_S, 4), "SUB ") == 0)
 अणु
  xपंचांगpfl_पूर्णांक = 0;
  जाओ Lab_1001;
 पूर्ण
 अगर(म_भेद(LEFT_S(a_S, 9), "FUNCTION ") == 0)
 अणु
  xपंचांगpfl_पूर्णांक = 1;
  funcflag_पूर्णांक = 1;
  nfuncs_पूर्णांक = nfuncs_पूर्णांक + 1;
  जाओ Lab_1001;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);
Lab_1001:
 isub_पूर्णांक = isub_पूर्णांक + 1;
 jopn_पूर्णांक = 0;
 lspac_पूर्णांक = 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 statfl_पूर्णांक[isub_पूर्णांक] = 0;
 funcfl_पूर्णांक[isub_पूर्णांक] = xपंचांगpfl_पूर्णांक;
 /* GOSUB Lab_31000 */    /* Make a list of possibly used arrays in the current sub */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_31000;
 leng_पूर्णांक = LEN(a_S);
 क्रम(i_पूर्णांक = 4; i_पूर्णांक <= leng_पूर्णांक; i_पूर्णांक++)
 अणु
  अगर(म_भेद(RIGHT_S(a_S, 7), " STATIC") == 0)
  अणु
   म_नकल(a_S,LEFT_S(a_S, leng_पूर्णांक - 7));
   gulix(a_S);
   leng_पूर्णांक = LEN(a_S);
   statfl_पूर्णांक[isub_पूर्णांक] = 1;   /* Static variables flag */
  पूर्ण
 पूर्ण
 अगर(nsubvar_पूर्णांक[isub_पूर्णांक] == 0 && म_भेद(RIGHT_S(a_S, 2), "()") != 0)
 अणु
  j_पूर्णांक = leng_पूर्णांक + 2;
  k_पूर्णांक = j_पूर्णांक;
  म_नकल(varlist_S,"");
 पूर्ण
 अन्यथा
 अणु
  क्रम(i_पूर्णांक = 4; i_पूर्णांक <= leng_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(b_S,MID_S(a_S, i_पूर्णांक, 1));
   अगर(म_भेद(b_S, "(") == 0)
   अणु
    j_पूर्णांक = i_पूर्णांक + 1;
   पूर्ण
   अगर(म_भेद(b_S, ")") == 0)
   अणु
    k_पूर्णांक = i_पूर्णांक - 1;
   पूर्ण
  पूर्ण
  म_नकल(varlist_S,MID_S(a_S, j_पूर्णांक, k_पूर्णांक - j_पूर्णांक + 1));
 पूर्ण
 अगर(funcfl_पूर्णांक[isub_पूर्णांक] == 0)
 अणु
  म_नकल(prtf_S,MID_S(a_S, 4, j_पूर्णांक - 5));
  gulix(prtf_S);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(prtf_S,MID_S(a_S, 9, j_पूर्णांक - 10));
  gulix(prtf_S);
  म_नकल(funames_S[nfuncs_पूर्णांक],prtf_S);
  म_नकल(funcnam_S,prtf_S);
 पूर्ण
 अगर(xपंचांगpfl_पूर्णांक == 0)
 अणु
  प्र_लिखो(tws__S,"%s%s%s","int ",prtf_S,"(");
  म_नकल(prtf_S,tws__S);
 पूर्ण
 अन्यथा
 अणु
  vartyp(prtf_S, &typ_पूर्णांक);
  म_नकल(z_S,"");
  अगर(typ_पूर्णांक == 5)
  अणु
   म_नकल(z_S,"*");
  पूर्ण
  प्र_लिखो(tws__S,"%s%s%s%s%s","extern ",atyp_S[typ_पूर्णांक],z_S,prtf_S,"(");
  म_नकल(prtf_S,tws__S);
 पूर्ण
 tokenix(varlist_S, &n_पूर्णांक, ",", "");
 म_नकल(c_S,"");
 म_नकल(b_S,"");
 /*  IF funcfl%(isub%) = 0 THEN b$ = "*" Instead of this below is... */
 /*  a trashy solution क्रम string argument to function (no copy to temp) */
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(d_S,पंचांगp_S[i_पूर्णांक]);   /* type determination */
  /* GOSUB Lab_1010 */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_1010;
      b_S[0] = '\0';
  अगर(funcfl_पूर्णांक[isub_पूर्णांक] == 0 || funcfl_पूर्णांक[isub_पूर्णांक] && (typ_पूर्णांक == 5 || typ_पूर्णांक == 15 || typ_पूर्णांक == 25))
  अणु
   म_नकल(b_S,"*");
  पूर्ण
  प्र_लिखो(tws__S,"%s%s%s%s%s",prtf_S,e_S,b_S,पंचांगp_S[i_पूर्णांक],", ");
  म_नकल(prtf_S,tws__S);
  gulix(e_S);
  प्र_लिखो(tws__S,"%s%s%s%s",c_S,e_S,b_S,", ");   /* This is */
  म_नकल(c_S,tws__S);
 पूर्ण
 /*  c$ is a prototyping sequence of types, used only क्रम FUNCTIONs */
 /*  SUBs are declared implicitly (पूर्णांक) */
 अगर(n_पूर्णांक)
 अणु
  म_नकल(prtf_S,LEFT_S(prtf_S, LEN(prtf_S) - 2));
 पूर्ण
 अगर(xपंचांगpfl_पूर्णांक == 1)
 अणु
  अगर(म_भेद(c_S, "") != 0)
  अणु
   म_नकल(c_S,LEFT_S(c_S, LEN(c_S) - 2));
  पूर्ण
  म_नकल(funtyl_S[nfuncs_पूर्णांक],c_S);
 पूर्ण
 ख_लिखो(fp_2,"\n");
 ख_लिखो(fp_2,"%s\n","/*- User SUB--Start -*/");   /* Do not change, used in post. 45000 */
 ख_लिखो(fp_2,"%s%s%s\n",prtf_S,")",t_S);
 ख_लिखो(fp_2,"%s\n","{");
 commfl_पूर्णांक = 1;
 usersub_पूर्णांक = 1;
 अगर(nshtok_पूर्णांक[isub_पूर्णांक] > 0)
 अणु
  /* comment on shared variables */
  म_नकल(b_S,"");
  क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nshtok_पूर्णांक[isub_पूर्णांक]; j_पूर्णांक++)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",b_S,shtok_S[isub_पूर्णांक][j_पूर्णांक],", ");
   म_नकल(b_S,tws__S);
  पूर्ण
  म_नकल(b_S,LEFT_S(b_S, LEN(b_S) - 2));
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 3;
  i__s = (i__s + 0 ) % 16;
  splitdec(b_S, &n_पूर्णांक, &w__s[(i__sपंचांगp+0)%16]);
  क्रम(j_पूर्णांक = 1; j_पूर्णांक <= n_पूर्णांक; j_पूर्णांक++)
  अणु
   ख_लिखो(fp_2,"%s%s%s\n","/* SHARED: ",पंचांगp_S[j_पूर्णांक]," */");
  पूर्ण
  ख_लिखो(fp_2,"\n");
 पूर्ण
 /* lista varijabli: */
 पंचांगpfl_पूर्णांक = 0;
 म_नकल(पूर्णांक_S," int  ");
 म_नकल(भग्न_S," float ");
 अगर(दीर्घflg_पूर्णांक == 1)
 अणु
  म_नकल(पूर्णांक_S," long ");
 पूर्ण
 अगर(करोblflg_पूर्णांक == 1)
 अणु
  म_नकल(भग्न_S," double ");
 पूर्ण
 अगर(म_भेद(vari_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 3;
  i__s = (i__s + 0 ) % 16;
  declarix(पूर्णांक_S, vari_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varr_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(भग्न_S, varr_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(vars_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 1;
  i__s = (i__s + 0 ) % 16;
  declarix(" char ", vars_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varl_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 4;
  i__s = (i__s + 0 ) % 16;
  declarix(" long ", varl_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(vard_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(" double ", vard_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(म_भेद(varb_S[isub_पूर्णांक], "") != 0)
 अणु
  i__sपंचांगp = ++i__s % 16;
  w__s[(i__sपंचांगp + 0 ) % 16] = 0;
  i__s = (i__s + 0 ) % 16;
  declarix(" unsigned char ", varb_S[isub_पूर्णांक], &w__s[(i__sपंचांगp+0)%16]);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"\n");
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_1010:   /* sorting variable types (शेष) */
 vartyp(d_S, &typ_पूर्णांक);
 अगर((typ_पूर्णांक == 0 || typ_पूर्णांक > 5) && typ_पूर्णांक != 8)
 अणु
  म_लिखो("%s%s%s% d %s\n","Error at label 1010 of QB2C: vartyp of ",d_S," is",typ_पूर्णांक,"...");
  म_लिखो("%s% d %s%s\n","...in line No",nl_पूर्णांक,": ",a_S);
  निकास(0);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(e_S,atyp_S[typ_पूर्णांक]);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_1250:   /* "SHARED" - this is alपढ़ोy taken care of, just skip */
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_1400:   /* Braces count check */
 lspac_पूर्णांक = lspac_पूर्णांक - 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 अगर(lspac_पूर्णांक < 0)
 अणु
  म_लिखो("%s% d %s% d %s%s\n","WARNING! Braces count = ",lspac_पूर्णांक," at line: ",nl_पूर्णांक,":",line_S);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_1500:   /* "END" */
 /* PRINT "1500: END" */
 /* Syntax: END  -> निकास(0); END(n) -> निकास(n); */
 /* MUST be parsed after END IF, END FUNCTION and END SUB */
     अगर(म_माप(a_S) > 3 && a_S[3] != '(') जाओ Lab_29000;
     अगर(a_S[i_पूर्णांक=3]=='(') अणु
      जबतक(a_S[i_पूर्णांक] && a_S[i_पूर्णांक] != ')') i_पूर्णांक++;
      स_नकल(b_S, &a_S[4], i_पूर्णांक-4); b_S[i_पूर्णांक-4]='\0';
 /* PRINT i%, b$ */
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"exit(",b_S,");",t_S);
     पूर्ण अन्यथा अणु
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,"exit(0);",t_S);
     पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2000:   /* "REM" */
 अगर(commfl_पूर्णांक == 1)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 अगर(म_भेद(LEFT_S(a_S, 3), "REM") == 0)
 अणु
  अगर(LEN(a_S) == 3)
  अणु
   जाओ Lab_2001;
  पूर्ण
  प्र_लिखो(prtf_S,"%s%s%s","/*",MID_S(a_S, 4, LMAX)," */");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  अगर(isub_पूर्णांक == 0)
  अणु
   ni_पूर्णांक = ni_पूर्णांक + 1;
  पूर्ण
Lab_2001:
  commfl_पूर्णांक = 1;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2500:   /* "DECLARE" */
 commfl_पूर्णांक = 1;
 अगर(isub_पूर्णांक == 0)
 अणु
  initline_पूर्णांक = ni_पूर्णांक;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2600:   /* "CONST", this has been taken care of in pp 650 */
 म_नकल(b_S,MID_S(a_S, 6, LMAX));
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक == 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR in line No",nl_पूर्णांक,":",line_S);
  ख_लिखो(मानक_त्रुटि,"%s\n","Missing argument of CONST");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 अगर(ncnst_पूर्णांक > NCMX)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","Maximum number of CONStant declarations reached.");
  ख_लिखो(मानक_त्रुटि,"%s\n","Enlarge parameter NCMX in qb2c.c, and recompile it !");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 क्रम(i_पूर्णांक = n_पूर्णांक; i_पूर्णांक >= 1; i_पूर्णांक = i_पूर्णांक-1)
 अणु
  म_नकल(पंचांगp_S[i_पूर्णांक + 2],पंचांगp_S[i_पूर्णांक]);
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  tokenix(पंचांगp_S[i_पूर्णांक + 2], &j_पूर्णांक, "=", "");
  अगर(j_पूर्णांक != 2)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR in line No",nl_पूर्णांक,":",a_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  ncnst_पूर्णांक = ncnst_पूर्णांक + 1;
  प्र_लिखो(cnst_S[ncnst_पूर्णांक],"%s%s%s%s%s","#define ",पंचांगp_S[1]," ",पंचांगp_S[2],t_S);
  म_नकल(tcnst_S[ncnst_पूर्णांक],पंचांगp_S[1]);
 पूर्ण
 commfl_पूर्णांक = 1;
 अगर(isub_पूर्णांक == 0)
 अणु
  initline_पूर्णांक = ni_पूर्णांक;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2750:   /* "DIM " */
 /* Dimension arrays. Syntax: */
 /* DIM [DYNAMIC] array(dim)[, array(dim)[, ...]] */
 /* A dynamic array must be declared beक्रमe the line where it is used */
 commfl_पूर्णांक = 1;   /* flag set अगर explicite dynamic */
 flag_पूर्णांक = 0;
 म_नकल(b_S,MID_S(a_S, 5, LMAX));
 अगर(म_भेद(LEFT_S(b_S, 7), "DYNAMIC") == 0)
 अणु
  flag_पूर्णांक = 1;
  म_नकल(b_S,MID_S(a_S, 12, LMAX));
 पूर्ण
 gulix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक == 0)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(temp_S[i_पूर्णांक],पंचांगp_S[i_पूर्णांक]);
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(d_S,temp_S[i_पूर्णांक]);
  dflag_पूर्णांक = 0;   /* set अगर dynamic (expl. or impl.) */
  अगर(flag_पूर्णांक)
  अणु
   dflag_पूर्णांक = 1;
  पूर्ण
  अन्यथा
  अणु
   /* Check क्रम implicitly dynamic arrays: */
   क्रम(j_पूर्णांक = 1; j_पूर्णांक <= ndyna_पूर्णांक[isub_पूर्णांक]; j_पूर्णांक++)
   अणु
    अगर(म_भेद(dyna_S[isub_पूर्णांक][j_पूर्णांक], d_S) == 0)
    अणु
     dflag_पूर्णांक = 1;
     j_पूर्णांक = ndyna_पूर्णांक[isub_पूर्णांक];
    पूर्ण
   पूर्ण
  पूर्ण
  arraydim(d_S);
  अगर(isub_पूर्णांक == 0 && ! dflag_पूर्णांक)
  अणु
   क्रम(j_पूर्णांक = 1; j_पूर्णांक <= alis_पूर्णांक; j_पूर्णांक++)
   अणु
    अगर(म_भेद(d_S, darr_S[alist_पूर्णांक[j_पूर्णांक]]) == 0)
    अणु
     जाओ Lab_2755;
    पूर्ण
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   /* Tu nesto fali ????? */
  पूर्ण
  vartyp(d_S, &typ_पूर्णांक);
  /* GOSUB Lab_2760 */    /* Get rid of dimensions & memorize arr. to aपंचांगp$() */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_2760;
  अगर(dflag_पूर्णांक)
  अणु
   म_नकल(b_S,"");
   tokenix(c_S, &L_पूर्णांक, ",", "");
   क्रम(j_पूर्णांक = 1; j_पूर्णांक <= L_पूर्णांक; j_पूर्णांक++)
   अणु
    प्र_लिखो(tws__S,"%s%s%s%s",b_S,"*(",पंचांगp_S[j_पूर्णांक],")");
    म_नकल(b_S,tws__S);
   पूर्ण
   म_नकल(c_S,atyp_S[typ_पूर्णांक - 10]);
   gulix(c_S);
   अगर(typ_पूर्णांक == 15)
   अणु
    प्र_लिखो(tws__S,"%s%s",b_S,"*LMAX");
    म_नकल(b_S,tws__S);
   पूर्ण
   प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s"," ",LEFT_S(z_S, LEN(z_S) - 1)," = calloc(",MID_S(b_S, 2, LMAX),", sizeof(",c_S,"));",t_S);
  पूर्ण
  अन्यथा
  अणु
   brackets(d_S);
   प्र_लिखो(prtf_S,"%s%s%s%s%s"," static ",atyp_S[typ_पूर्णांक - 10],d_S,";",t_S);
  पूर्ण
  ख_लिखो(fp_2,"%s\n",prtf_S);
  अगर(isub_पूर्णांक == 0 && ! flag_पूर्णांक)
  अणु
   ni_पूर्णांक = ni_पूर्णांक + 1;
   initline_पूर्णांक = ni_पूर्णांक;
  पूर्ण
Lab_2755:
 ;पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_2760:   /* Get rid of dimensions & memorize arrayname to aपंचांगp$() अगर new */
 /* करोn't change the d$. c$ is the array argument (list). */
 /* This dynamically fills aपंचांगp$() क्रम a current SUB or MAIN */
 म_नकल(z_S,"");
 jj_पूर्णांक = 0;
      जबतक (d_S[jj_पूर्णांक]!= '(' && d_S[jj_int] !='\0') jj_पूर्णांक++;
 म_नकल(z_S,LEFT_S(d_S, jj_पूर्णांक + 1));
 k_पूर्णांक = jj_पूर्णांक + 1;
      जबतक (d_S[k_पूर्णांक]!= ')' && d_S[k_int] !='\0') k_पूर्णांक++;
 म_नकल(c_S,MID_S(d_S, jj_पूर्णांक + 2, k_पूर्णांक - jj_पूर्णांक - 1));
 पंचांगpfl_पूर्णांक = 1;
 क्रम(j_पूर्णांक = 1; j_पूर्णांक <= naपंचांगp_पूर्णांक; j_पूर्णांक++)
 अणु
  अगर(म_भेद(z_S, aपंचांगp_S[j_पूर्णांक]) == 0)
  अणु
   पंचांगpfl_पूर्णांक = 0;
   जाओ Lab_2761;
  पूर्ण
 पूर्ण
Lab_2761:
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  naपंचांगp_पूर्णांक = naपंचांगp_पूर्णांक + 1;
  म_नकल(aपंचांगp_S[naपंचांगp_पूर्णांक],z_S);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2800:   /* "ERASE " */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: ERASE feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_2850:   /* "REDIM " */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: REDIM feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_3000:   /* "IF ... THEN ... [ELSEIF ... THEN] ... ELSE ...END IF" */
 /* Prema QB sपूर्णांकaksi IF, ELSEIF, ELSE i END IF moraju zapocinjati liniju */
 /* osim u करोpustenim अंतरभूत sपूर्णांकaksama. Kod njih, izraz se sijece */
 /* u multilinijski tip i करोdaje se END IF na kraju */
 /* Inline se sijeku na nivou line splitera, 900. */
 /* Syntax, अंतरभूत: */
 /* IF bool THEN expr */
 /* IF bool THEN expr ELSE expr */
 /* IF bool THEN expr ELSE IF expr THEN expr */
 /* IF bool GOTO 100 */
 /* IF bool GOSUB 100 */
 /* In अंतरभूत syntax, after THEN and ELSE may be only a label,क्रम example: */
 /* IF a = b THEN 100 ELSE 200 */
 /* or multiline: */
 /* IF bool THEN */
 /*  expr */
 /* [[ELSEIF bool THEN */
 /*  expr] */
 /* [ELSE */
 /*  expr]] */
 /* END IF */
 stringx(a_S);   /* String स्थिरant preprocessor */
 म_नकल(e_S,CHR_S(34));
 togfl_पूर्णांक = 0;
 leng_पूर्णांक = LEN(a_S);
 i1_पूर्णांक = 4;
 i2_पूर्णांक = 0;
 क्रम(j_पूर्णांक = 5; j_पूर्णांक <= leng_पूर्णांक - 3; j_पूर्णांक++)
 अणु
       अगर(a_S[j_पूर्णांक-1] == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
       अगर((स_भेद(&a_S[j_पूर्णांक-1],"THEN",4)==0 || स_भेद(&a_S[j_पूर्णांक-1],"GOTO",4)==0 || स_भेद(&a_S[j_पूर्णांक-1],"GOSUB",5)==0) && !togfl_पूर्णांक)
       अणु i2_पूर्णांक=j_पूर्णांक-2; जाओ Lab_3005; पूर्ण
 पूर्ण
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: SYNTAX ERROR in line No",nl_पूर्णांक,":",line_S);
 ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: Missing keyword: THEN or GOTO or GOSUB");
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
Lab_3005:
 अगर(i2_पूर्णांक != 0)
 अणु
  म_नकल(b_S,MID_S(a_S, i1_पूर्णांक, i2_पूर्णांक - i1_पूर्णांक + 1));
  gulix(b_S);
  mathexp(b_S);
  logix(b_S);
  quadrix(b_S);
  प्र_लिखो(prtf_S,"%s%s%s","if(",b_S,")");
  ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
  ख_लिखो(fp_2,"%s%s\n",spc_S,"{");
  lspac_पूर्णांक = lspac_पूर्णांक + 1;
  म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
  commfl_पूर्णांक = 1;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_3100:   /* "ELSEIF " */
 /* Syntax: ELSEIF bool THEN */
 अगर(म_भेद(RIGHT_S(a_S, 4), "THEN") != 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing or misplaced THEN at line: ",nl_पूर्णांक,":",line_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,MID_S(a_S, 7, LEN(a_S) - 10));
 gulix(b_S);
 gulix(b_S);
 mathexp(b_S);
 logix(b_S);
 quadrix(b_S);
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"}");
 ख_लिखो(fp_2,"%s%s%s%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"else if (",b_S,") ",t_S);
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"{");
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_3250:   /* "ELSE" */
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"}");
 ख_लिखो(fp_2,"%s%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"else",t_S);
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"{");
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_3500:   /* "END IF" */
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"}");
 lspac_पूर्णांक = lspac_पूर्णांक - 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 अगर(lspac_पूर्णांक < 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s% d %s%s\n","ERROR: Braces count = ",lspac_पूर्णांक," at line: ",nl_पूर्णांक,":",line_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_3750:   /* "DO WHILE" or "WHILE" */
 stringx(a_S);   /* String स्थिरant pretprocessor */
      अगर( स_भेद(a_S,"DO WHILE",8)==0 ) अणु म_नकल(b_S,&a_S[8]); जाओ Lab_3751; पूर्ण
      अगर( स_भेद(a_S,"WHILE",5)==0 )    अणु म_नकल(b_S,&a_S[5]); जाओ Lab_3751; पूर्ण
      अगर( स_भेद(a_S,"DO UNTIL",8)==0 )
      अणु म_नकल(b_S,"NOT ("); म_जोड़ो(b_S,&a_S[9]); म_जोड़ो(b_S,")"); पूर्ण
Lab_3751:
 gulix(b_S);
 mathexp(b_S);
 logix(b_S);
 quadrix(b_S);
 प्र_लिखो(prtf_S,"%s%s%s","while(",b_S,")");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 ख_लिखो(fp_2,"%s%s\n",spc_S,"{");
 lspac_पूर्णांक = lspac_पूर्णांक + 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_3900:   /* "LOOP" or "WEND" */
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"}");
 lspac_पूर्णांक = lspac_पूर्णांक - 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 अगर(lspac_पूर्णांक < 0)
 अणु
  म_लिखो("%s% d %s% d %s%s\n","WARNING! Braces count = ",lspac_पूर्णांक," at line: ",nl_पूर्णांक,":",line_S);
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_4000:   /* "PRINT #" */
 stringx(a_S);   /* String स्थिरant pretprocessor */
 leng_पूर्णांक = LEN(a_S);
 commfl_पूर्णांक = 1;
 i_पूर्णांक = 1;
 जबतक(! म_भेद(MID_S(a_S, i_पूर्णांक, 1), "#") == 0 && i_पूर्णांक < leng_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 j_पूर्णांक = i_पूर्णांक + 1;
 जबतक(! म_भेद(MID_S(a_S, j_पूर्णांक, 1), ",") == 0 && j_पूर्णांक <= leng_पूर्णांक)
 अणु
  j_पूर्णांक = j_पूर्णांक + 1;
 पूर्ण
 म_नकल(b_S,MID_S(a_S, i_पूर्णांक + 1, j_पूर्णांक - i_पूर्णांक - 1));
 gulix(b_S);
 म_नकल(d_S,MID_S(a_S, j_पूर्णांक + 1, leng_पूर्णांक - j_पूर्णांक));
 gulix(d_S);
 अगर(म_भेद(d_S, "") == 0)
 अणु
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s","fprintf(fp_",b_S,",",CHR_S(34),"\\n",CHR_S(34),");");
 पूर्ण
 अन्यथा
 अणु
  म_लिखोmt(d_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  quadrix(prt_S);
  अगर(nflag_पूर्णांक == 1)
  अणु
   प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"\\n");
   म_नकल(क्रमmt_S,tws__S);
  पूर्ण
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s","fprintf(fp_",b_S,",",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_4100:   /* "PRINT USING" */
 म_नकल(e_S,CHR_S(34));
 nflag_पूर्णांक = 1;
      अगर (a_S[म_माप(a_S)-1]==';') {nflag_int = 0; a_S[strlen(a_S)-1]='\0';पूर्ण
      जबतक(a_S[i_पूर्णांक] != ';' && a_S[i_पूर्णांक]) i_पूर्णांक++;
      अगर (!a_S[i_पूर्णांक]) अणु
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR Missing ';' in line No",nl_पूर्णांक,": ",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
      पूर्ण
 म_नकल(using_S,MID_S(a_S, 12, i_पूर्णांक - 11));
 gulix(using_S);
 म_नकल(a_S,MID_S(a_S, i_पूर्णांक + 2, LMAX));
 gulix(a_S);
 म_नकल(क्रमmt_S,"");
 म_नकल(d_S,"");
 tokenix(a_S, &n_पूर्णांक, ",", "");
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  vartyp(पंचांगp_S[i_पूर्णांक], &typ_पूर्णांक);
  अगर(typ_पूर्णांक >= 10 || typ_पूर्णांक == 6)
  अणु
   quadrix(पंचांगp_S[i_पूर्णांक]);
  पूर्ण
  अगर(typ_पूर्णांक > 10)
  अणु
   typ_पूर्णांक = typ_पूर्णांक - 10;
  पूर्ण
  अगर(typ_पूर्णांक == 5)
  अणु
   प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"s");
   म_नकल(क्रमmt_S,tws__S);
   प्र_लिखो(tws__S,"%s%s%s",d_S,",",पंचांगp_S[i_पूर्णांक]);   /* Simplअगरied string treaपंचांगent */
   म_नकल(d_S,tws__S);
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"f");
   म_नकल(क्रमmt_S,tws__S);
   अगर(typ_पूर्णांक <= 2 || typ_पूर्णांक == 6)
   अणु
    प्र_लिखो(tws__S,"%s%s%s%s",d_S,",(double)(",पंचांगp_S[i_पूर्णांक],")");
    म_नकल(d_S,tws__S);
   पूर्ण
   अन्यथा
   अणु
    प्र_लिखो(tws__S,"%s%s%s",d_S,",",पंचांगp_S[i_पूर्णांक]);
    म_नकल(d_S,tws__S);
   पूर्ण
  पूर्ण
 पूर्ण
 अगर(nflag_पूर्णांक == 1)
 अणु
  प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"n");
  म_नकल(क्रमmt_S,tws__S);
 पूर्ण
 प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s","printf(print__using(",using_S,",",e_S,क्रमmt_S,e_S,")",d_S,");");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 usingff_पूर्णांक = 1;
 extrnfl_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_4200:   /* "GET #" file I/O staपंचांगent */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: GET # feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_4300:   /* "PUT #" file I/O staपंचांगent */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: PUT # feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_4400:   /* "SEEK " file I/O staपंचांगent */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: SEEK feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_4500:   /* "LINE INPUT #" */
 leng_पूर्णांक = LEN(a_S);
 commfl_पूर्णांक = 1;
 i_पूर्णांक = 12;
 म_नकल(prtf_S,"fgets(");
 j_पूर्णांक = i_पूर्णांक + 1;
 जबतक(! म_भेद(MID_S(a_S, j_पूर्णांक, 1), ",") == 0 && j_पूर्णांक <= leng_पूर्णांक)
 अणु
  j_पूर्णांक = j_पूर्णांक + 1;
 पूर्ण
 अगर(j_पूर्णांक >= leng_पूर्णांक)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","ERROR in line No",nl_पूर्णांक,":",a_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,MID_S(a_S, i_पूर्णांक + 1, j_पूर्णांक - i_पूर्णांक - 1));
 gulix(b_S);
 म_नकल(d_S,MID_S(a_S, j_पूर्णांक + 1, leng_पूर्णांक - j_पूर्णांक));
 gulix(d_S);
 quadrix(d_S);
 प्र_लिखो(tws__S,"%s%s%s%s%s",prtf_S,d_S,", LMAX, fp_",b_S,");");
 म_नकल(prtf_S,tws__S);
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,d_S,"[strlen(",d_S,") - 1] = '\\0';");
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_4600:   /* "OUT " I/O statement */
 /* Syntax: OUT port, data */
 म_नकल(d_S,MID_S(a_S, 4, LMAX));
 tokenix(d_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  जाओ Lab_29500;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"outb(",पंचांगp_S[2],",",पंचांगp_S[1],");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_5000:   /* "PRINT" */
      अगर( a_S[0] == 'E' ) अणु
 म_नकल(prtf_S,"fprintf(stderr,");
      पूर्ण अन्यथा अणु
 म_नकल(prtf_S,"printf(");
      पूर्ण
 अगर(म_भेद(a_S, "PRINT") == 0 || म_भेद(a_S, "EPRINT") == 0)
 अणु
  म_नकल(क्रमmt_S,"\\n");
  म_नकल(prt_S,"");
  जाओ Lab_5001;
 पूर्ण
 stringx(a_S);   /* String स्थिरant pretprocessor */
 म_नकल(a_S,MID_S(a_S, 7, LMAX));
 gulix(a_S);
 म_लिखोmt(a_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);   /* tokenizacija list varijabli itd. => क्रमmt$ */
 quadrix(prt_S);
 अगर(nflag_पूर्णांक == 1)
 अणु
  प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"\\n");
  म_नकल(क्रमmt_S,tws__S);
 पूर्ण
Lab_5001:
 प्र_लिखो(tws__S,"%s%s%s%s%s%s",prtf_S,CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
 म_नकल(prtf_S,tws__S);
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_5100:   /* "LOCATE " */
 म_नकल(d_S,MID_S(a_S, 8, LMAX));
 tokenix(d_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: SYNTAX ERROR in line No",nl_पूर्णांक,":",a_S);
  ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: Must be two arguments to LOCATE!");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,पंचांगp_S[1]);
 म_नकल(d_S,पंचांगp_S[2]);
 mathexp(b_S);
 mathexp(d_S);
 quadrix(b_S);
 प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s","printf(",CHR_S(34),"\\033[%d;%d;f",CHR_S(34),",(int)(",b_S,"),(int)(",d_S,"));");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_5200:   /* "COLOR" */
 म_नकल(d_S,MID_S(a_S, 6, LMAX));
 gulix(d_S);
 अगर(म_भेद(d_S, "") == 0)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"printf(",CHR_S(34),"\\033[0m",CHR_S(34),");",t_S);
  जाओ Lab_5201;
 पूर्ण
 tokenix(d_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक > 2)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: SYNTAX ERROR in line No",nl_पूर्णांक,":",a_S);
  ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: Must be one or two arguments to COLOR!");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,पंचांगp_S[1]);
 mathexp(b_S);
 quadrix(b_S);
 अगर(n_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"COLOR((int)(",b_S,"), -1);",t_S);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(d_S,पंचांगp_S[2]);
  mathexp(d_S);
  quadrix(b_S);
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"COLOR((int)(",b_S,"), (int)(",d_S,"));",t_S);
 पूर्ण
 colorff_पूर्णांक = 1;
 extrnfl_पूर्णांक = 1;
Lab_5201:
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_5300:   /* "CLS" */
 म_नकल(b_S,MID_S(a_S, 4, LMAX));
 gulix(b_S);
 अगर(म_भेद(b_S, "") == 0)
 अणु
  प्र_लिखो(prtf_S,"%s%s%s%s%s","printf(",CHR_S(34),"\\033[2J\\033[H",CHR_S(34),");");
 पूर्ण
 अन्यथा
 अणु
  mathexp(b_S);
  quadrix(b_S);
  प्र_लिखो(prtf_S,"%s%s%s","CLS((int)(",b_S,"));");
  clsff_पूर्णांक = 1;
  extrnfl_पूर्णांक = 1;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_5500:   /* "INPUT #" */
 leng_पूर्णांक = LEN(a_S);
 commfl_पूर्णांक = 1;
 i_पूर्णांक = 8;
 म_नकल(e_S,CHR_S(34));
 जबतक(! म_भेद(MID_S(a_S, i_पूर्णांक, 1), ",") == 0 && i_पूर्णांक < leng_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 अगर(i_पूर्णांक >= leng_पूर्णांक)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","ERROR in line No",nl_पूर्णांक,":",a_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,MID_S(a_S, 8, i_पूर्णांक - 8));
 gulix(b_S);
 L_पूर्णांक = VAL(b_S);
 म_नकल(d_S,MID_S(a_S, i_पूर्णांक + 1, LMAX));
 gulix(d_S);
 अगर(म_भेद(t_S, "") != 0)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,t_S);
 पूर्ण
 i__sपंचांगp = ++i__s % 16;
 w__s[(i__sपंचांगp + 0 ) % 16] = 0;
 i__s = (i__s + 0 ) % 16;
 inputfmt(d_S, क्रमmt_S, prt_S, &n_पूर्णांक, &w__s[(i__sपंचांगp+0)%16]);
 quadrix(prt_S);
 /* GOSUB Lab_5505 */    /* get filename */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_5505;
 अगर(n_पूर्णांक == -1)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"while(fgets(",d_S,", LMAX, fp_",b_S,")==NULL)");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s\n",spc_S,"{ printf(",e_S,"Error in reading (probably EOF) file: %s\\n",e_S,",fn",b_S,"__S); exit(0);}");
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,d_S,"[strlen(",d_S,") - 1] = '\\0';");
 पूर्ण
 अन्यथा
 अणु
  /*    PRINT #2, spc$ + "if(fscanf(fp_" + b$ + "," + e$ + क्रमmt$ + " " + e$ + prt$ + ") !=" + STR$(n%) + ")" */
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"fgets(tws__S, LMAX, fp_",b_S,");");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s\n",spc_S,"if(sscanf(tws__S,",e_S,क्रमmt_S,e_S,prt_S,") !=",STR_S(n_पूर्णांक),")");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s\n",spc_S,"{ printf(",e_S,"Error in reading file: %s\\n",e_S,",fn",b_S,"__S); }");
  twsflg_पूर्णांक = 1;
 पूर्ण
 अक्षरtfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_5505:   /* get filename */
 i_पूर्णांक = 1;
 जबतक(lख_खोलो_पूर्णांक[i_पूर्णांक] != L_पूर्णांक && i_पूर्णांक <= nlखोलो_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 अगर(i_पूर्णांक > nlखोलो_पूर्णांक)
 अणु
  प्र_लिखो(f_S,"%s%s",e_S,e_S);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(f_S,lख_खोलो_S[i_पूर्णांक]);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_5600:   /* "SSCAN " */
 म_नकल(e_S,CHR_S(34));
      i_पूर्णांक = 5; c = a_S[i_पूर्णांक];
      जबतक(c != ';' && c != '\0') अणु
       c = a_S[++i_पूर्णांक];
      पूर्ण
      अगर(!c) जाओ Lab_29000;
 म_नकल(b_S,MID_S(a_S, 7, i_पूर्णांक - 6));
 म_नकल(d_S,MID_S(a_S, i_पूर्णांक + 2, LMAX));
 quadrix(b_S);
 i__sपंचांगp = ++i__s % 16;
 w__s[(i__sपंचांगp + 0 ) % 16] = 2;
 i__s = (i__s + 0 ) % 16;
 inputfmt(d_S, क्रमmt_S, prt_S, &n_पूर्णांक, &w__s[(i__sपंचांगp+0)%16]);
 quadrix(prt_S);
 अगर(n_पूर्णांक == -1)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"strcpy(",b_S,",",d_S,");");
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"SScan(",b_S,");");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"if(sscanf(",b_S,",",e_S,क्रमmt_S,e_S,prt_S,") !=",STR_S(n_पूर्णांक),")");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s\n",spc_S,"{ printf(",e_S,"Error in scanning string: ",b_S,"\\n",e_S,"); }");
  extrnfl_पूर्णांक = 1;
  SScan_पूर्णांक = 1;
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_5750:   /* "INPUT" */
 अगर(म_भेद(t_S, "") != 0)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,t_S);
 पूर्ण
 leng_पूर्णांक = LEN(a_S);
 म_नकल(d_S,CHR_S(34));
 अगर(leng_पूर्णांक == 5)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"INPUT(",d_S,d_S,",1)",t_S);
 पूर्ण
 i_पूर्णांक = 6;
 g_पूर्णांक = 6;
 जबतक(म_भेद(MID_S(a_S, i_पूर्णांक, 1), d_S) != 0 && i_पूर्णांक < leng_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 अगर(i_पूर्णांक < leng_पूर्णांक)
 अणु
  j_पूर्णांक = i_पूर्णांक + 1;
  जबतक(म_भेद(MID_S(a_S, j_पूर्णांक, 1), d_S) != 0 && j_पूर्णांक < leng_पूर्णांक)
  अणु
   j_पूर्णांक = j_पूर्णांक + 1;
  पूर्ण
  म_नकल(b_S,MID_S(a_S, i_पूर्णांक, j_पूर्णांक - i_पूर्णांक + 1));
  stringx(b_S);   /* String स्थिरant preprocessor */
  g_पूर्णांक = j_पूर्णांक;
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(b_S,"%s%s",d_S,d_S);
 पूर्ण
 i_पूर्णांक = g_पूर्णांक + 1;
 म_नकल(z_S,MID_S(a_S, i_पूर्णांक, 1));
 म_नकल(e_S,",1");
 अगर(म_भेद(z_S, ",") == 0)
 अणु
  म_नकल(e_S,",0");
 पूर्ण
 जबतक((म_भेद(z_S, " ") == 0 || म_भेद(z_S, ",") == 0 || म_भेद(z_S, ";") == 0) && i_पूर्णांक < leng_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
  म_नकल(z_S,MID_S(a_S, i_पूर्णांक, 1));
  अगर(म_भेद(z_S, ";") == 0)
  अणु
   म_नकल(e_S,",1");
  पूर्ण
 पूर्ण
 म_नकल(a_S,RIGHT_S(a_S, leng_पूर्णांक - i_पूर्णांक + 1));   /* CALL gulix(a$) */
 i__sपंचांगp = ++i__s % 16;
 w__s[(i__sपंचांगp + 0 ) % 16] = 1;
 i__s = (i__s + 0 ) % 16;
 inputfmt(a_S, क्रमmt_S, prt_S, &n_पूर्णांक, &w__s[(i__sपंचांगp+0)%16]);
 quadrix(prt_S);
 अगर(n_पूर्णांक == -1)
 अणु
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s","while(INPUT(",b_S,e_S,") == NULL) printf(",d_S,"Redo from start:\\n",d_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"strcpy(",prt_S,",tws__S);");
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s%s","while(sscanf(INPUT(",b_S,e_S,"),",d_S,क्रमmt_S,d_S,prt_S,") !=",STR_S(n_पूर्णांक)," && tws__S[0] != '\\n')");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"{ printf(",d_S,"Redo from start:\\n",d_S,"); }");
 पूर्ण
 commfl_पूर्णांक = 1;
 inputff_पूर्णांक = 1;
 extrnfl_पूर्णांक = 1;
 twsflg_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_6000:   /* Labels */
 /* Delete labels in DIM statements beक्रमe initline% ! */
 अगर(ntok_पूर्णांक >= 2)
 अणु
      अगर(स_भेद(linetok_S[2],"DIM ", 4)==0 && nl_पूर्णांक < initline_पूर्णांक) अणु
  ख_लिखो(मानक_त्रुटि,"%s%s%s\n","WARNING: Label ",linetok_S[1]," in DIM statement erased.");
  commfl_पूर्णांक = 1;
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
      पूर्ण
 पूर्ण
     अगर (a_S[0] >= '0' && a_S[0] <= '9') अणु
 म_नकल(labl_S,STR_S(VAL(a_S)));
 प्र_लिखो(labl_S,"%s%s",MID_S(labl_S, 2, LEN(labl_S) - 1),":");
 ख_लिखो(fp_2,"%s%s%s\n","Lab_",labl_S,t_S);
 commfl_पूर्णांक = 1;
     पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_6500:   /* "GOTO" */
 leng_पूर्णांक = LEN(a_S);
 म_नकल(b_S,MID_S(a_S, 5, leng_पूर्णांक - 4));
 gulix(b_S);
 ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"goto ","Lab_",b_S,";",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_7000:   /* "CALL" */
 commfl_पूर्णांक = 1;
 म_नकल(e_S,CHR_S(34));
 leng_पूर्णांक = LEN(a_S);
 j_पूर्णांक = 0;
 क्रम(i_पूर्णांक = 5; i_पूर्णांक <= leng_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(b_S,MID_S(a_S, i_पूर्णांक, 1));
  अगर(म_भेद(b_S, "(") == 0)
  अणु
   j_पूर्णांक = i_पूर्णांक;
   जाओ Lab_7001;
  पूर्ण
 पूर्ण
Lab_7003:
 म_नकल(prtf_S,MID_S(a_S, 5, leng_पूर्णांक - 4));
 gulix(prtf_S);
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,prtf_S,"();",t_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);
Lab_7001:
 म_नकल(prtf_S,MID_S(a_S, 5, j_पूर्णांक - 5));
 gulix(prtf_S);
 क्रम(k_पूर्णांक = 1; k_पूर्णांक <= nsub_पूर्णांक; k_पूर्णांक++)
 अणु
  अगर(म_भेद(prtf_S, subname_S[k_पूर्णांक]) == 0)
  अणु
   जाओ Lab_7004;
  पूर्ण
 पूर्ण
 म_लिखो("%s%s%s\n","WARNING: ",prtf_S," is not a user defined SUBroutine or FUNCTION");
 जाओ Lab_7003;
Lab_7004:
 म_नकल(varlist_S,MID_S(a_S, j_पूर्णांक + 1, leng_पूर्णांक - j_पूर्णांक - 1));
 tokenix(varlist_S, &n_पूर्णांक, ",", "");
 म_नकल(varlist_S,"");
 पंचांगp1_पूर्णांक = 0;
 पंचांगp2_पूर्णांक = 0;
 पंचांगp3_पूर्णांक = 0;
 पंचांगp4_पूर्णांक = 0;
 पंचांगp8_पूर्णांक = 0;
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(d_S,पंचांगp_S[i_पूर्णांक]);
  vartyp(d_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 7)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d %s\n","ERROR: String expressions not allowed as function parameters in line",nl_पूर्णांक,":");
   ख_लिखो(मानक_त्रुटि,"%s\n",line_S);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  minusf_पूर्णांक = 0;
      अगर (d_S[0]=='-') minusf_पूर्णांक = 1;
  अगर(स्थिरfl_पूर्णांक == 1 || typ_पूर्णांक == 6 || minusf_पूर्णांक)
  अणु
   tip_पूर्णांक = 0;
   म_नकल(b_S,subvar_S[k_पूर्णांक][i_पूर्णांक]);
   vartyp(b_S, &tip_पूर्णांक);
   अगर(tip_पूर्णांक == 1 || tip_पूर्णांक == 6)
   अणु
    अगर(पंचांगp1_पूर्णांक == 0)
    अणु
     ख_लिखो(fp_2,"%s%s\n",spc_S,"i__stmp = ++i__s % 16;");
    पूर्ण
    ख_लिखो(fp_2,"%s%s% d %s%s%s\n",spc_S,"w__s[(i__stmp +",पंचांगp1_पूर्णांक,") % 16] = ",d_S,";");
     प्र_लिखो(tws__S,"%s%s%d%s",varlist_S,"&w__s[(i__stmp+",पंचांगp1_पूर्णांक,")%16], ");
     म_नकल(varlist_S,tws__S);
        पंचांगp1_पूर्णांक++;
    पूर्णांकtfl_पूर्णांक = 1;
   पूर्ण
   अन्यथा
   अणु
    अगर(tip_पूर्णांक == 2)
    अणु
     अगर(पंचांगp2_पूर्णांक == 0)
     अणु
      ख_लिखो(fp_2,"%s%s\n",spc_S,"i__ltmp = ++i__l % 16;");
     पूर्ण
     ख_लिखो(fp_2,"%s%s% d %s%s%s\n",spc_S,"w__l[(i__ltmp +",पंचांगp2_पूर्णांक,") % 16] = ",d_S,";");
     प्र_लिखो(tws__S,"%s%s%d%s",varlist_S,"&w__l[(i__ltmp+",पंचांगp2_पूर्णांक,")%16], ");
     म_नकल(varlist_S,tws__S);
         पंचांगp2_पूर्णांक++;
     दीर्घtfl_पूर्णांक = 1;
    पूर्ण
    अन्यथा
    अणु
     अगर(tip_पूर्णांक == 3)
     अणु
      अगर(पंचांगp3_पूर्णांक == 0)
      अणु
       ख_लिखो(fp_2,"%s%s\n",spc_S,"i__ftmp = ++i__f % 16;");
      पूर्ण
      ख_लिखो(fp_2,"%s%s% d %s%s%s\n",spc_S,"w__f[(i__ftmp +",पंचांगp3_पूर्णांक,") % 16] = ",d_S,";");
     प्र_लिखो(tws__S,"%s%s%d%s",varlist_S,"&w__f[(i__ftmp+",पंचांगp3_पूर्णांक,")%16], ");
     म_नकल(varlist_S,tws__S);
          पंचांगp3_पूर्णांक++;
      भग्नtfl_पूर्णांक = 1;
     पूर्ण
     अन्यथा
     अणु
      अगर(tip_पूर्णांक == 4)
      अणु
       अगर(पंचांगp4_पूर्णांक == 0)
       अणु
        ख_लिखो(fp_2,"%s%s\n",spc_S,"i__dtmp = ++i__d % 16;");
       पूर्ण
       ख_लिखो(fp_2,"%s%s% d %s%s%s\n",spc_S,"w__d[(i__dtmp +",पंचांगp4_पूर्णांक,") % 16] = ",d_S,";");
     प्र_लिखो(tws__S,"%s%s%d%s",varlist_S,"&w__d[(i__dtmp+",पंचांगp4_पूर्णांक,")%16], ");
     म_नकल(varlist_S,tws__S);
           पंचांगp4_पूर्णांक++;
       vdblff_पूर्णांक = 1;
      पूर्ण
      अन्यथा
      अणु
       अगर(tip_पूर्णांक == 5)
       अणु
        /*         PRINT #2, spc$ + "if(++j__S == 16) j__S=0;" */
        /*         PRINT #2, spc$ + "strcpy(w__S[j__S], " + d$ + ");" */
        /*         varlist$ = varlist$ + "w__S[j__S], " */
        /*         अक्षरtfl% = 1 */
        प्र_लिखो(tws__S,"%s%s%s",varlist_S,d_S,", ");
        म_नकल(varlist_S,tws__S);
       पूर्ण
       अन्यथा
       अणु
        अगर(tip_पूर्णांक == 8)
        अणु
         अगर(पंचांगp8_पूर्णांक == 0)
         अणु
          ख_लिखो(fp_2,"%s%s\n",spc_S,"i__btmp = ++i__b % 16;");
         पूर्ण
         ख_लिखो(fp_2,"%s%s% d %s%s%s\n",spc_S,"w__b[(i__btmp +",पंचांगp8_पूर्णांक,") % 16] = ",d_S,";");
     प्र_लिखो(tws__S,"%s%s%d%s",varlist_S,"&w__b[(i__btmp+",पंचांगp8_पूर्णांक,")%16], ");
     म_नकल(varlist_S,tws__S);
             पंचांगp8_पूर्णांक++;
         byttfl_पूर्णांक = 1;
        पूर्ण
        अन्यथा
        अणु
         ख_लिखो(मानक_त्रुटि,"%s%s%s%s\n","ERROR: Unrecognized argument: ",d_S," in subroutine: ",subname_S[k_पूर्णांक]);
         ख_लिखो(मानक_त्रुटि,"%s%s%s% d \n","when calling: ",line_S," in line No: ",nl_पूर्णांक);
         संकेत_पूर्णांक = 1;   /* निकास(1); */
         जाओ Lab_9999;
        पूर्ण
       पूर्ण
      पूर्ण
     पूर्ण
    पूर्ण
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
   अणु
    प्र_लिखो(tws__S,"%s%s%s",varlist_S,d_S,", ");
    म_नकल(varlist_S,tws__S);
   पूर्ण
   अन्यथा
   अणु
    प्र_लिखो(tws__S,"%s%s%s%s",varlist_S,"&",d_S,", ");
    म_नकल(varlist_S,tws__S);
   पूर्ण
  पूर्ण
 पूर्ण
 म_नकल(varlist_S,LEFT_S(varlist_S, LEN(varlist_S) - 2));
 quadrix(varlist_S);
 प्र_लिखो(tws__S,"%s%s%s%s",prtf_S,"(",varlist_S,");");
 म_नकल(prtf_S,tws__S);
 अगर(पंचांगp1_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s% .7G %s\n",spc_S,"i__s = (i__s +",(द्विगुन)(पंचांगp1_पूर्णांक - 1),") % 16;");
 पूर्ण
 अगर(पंचांगp2_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s% .7G %s\n",spc_S,"i__l = (i__l +",(द्विगुन)(पंचांगp2_पूर्णांक - 1),") % 16;");
 पूर्ण
 अगर(पंचांगp3_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s% .7G %s\n",spc_S,"i__f = (i__f +",(द्विगुन)(पंचांगp3_पूर्णांक - 1),") % 16;");
 पूर्ण
 अगर(पंचांगp4_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s% .7G %s\n",spc_S,"i__d = (i__d +",(द्विगुन)(पंचांगp4_पूर्णांक - 1),") % 16;");
 पूर्ण
 अगर(पंचांगp8_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s% .7G %s\n",spc_S,"i__b = (i__b +",(द्विगुन)(पंचांगp8_पूर्णांक - 1),") % 16;");
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_8000:   /* "FOR " */
 leng_पूर्णांक = LEN(a_S);
 ix0_पूर्णांक = 5;
 j_पूर्णांक = ix0_पूर्णांक;
 जबतक(म_भेद(MID_S(a_S, j_पूर्णांक, 3), "TO ") != 0 && j_पूर्णांक < leng_पूर्णांक)
 अणु
  j_पूर्णांक = j_पूर्णांक + 1;
 पूर्ण
 अगर(j_पूर्णांक == leng_पूर्णांक)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","ERROR: missing TO in line No",nl_पूर्णांक,":",line_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(b_S,MID_S(a_S, ix0_पूर्णांक, j_पूर्णांक - ix0_पूर्णांक - 1));
 gulix(b_S);
 mathexp(b_S);
 quadrix(b_S);
 k_पूर्णांक = 1;
 जबतक(म_भेद(MID_S(b_S, k_पूर्णांक, 1), "=") != 0)
 अणु
  k_पूर्णांक = k_पूर्णांक + 1;
 पूर्ण
 म_नकल(e_S,MID_S(b_S, 1, k_पूर्णांक - 2));
 म_नकल(c_S,MID_S(b_S, k_पूर्णांक + 2, LMAX));
 gulix(c_S);
 L_पूर्णांक = j_पूर्णांक + 3;
 जबतक(म_भेद(MID_S(a_S, L_पूर्णांक, 4), "STEP") != 0 && L_पूर्णांक <= leng_पूर्णांक)
 अणु
  L_पूर्णांक = L_पूर्णांक + 1;
 पूर्ण
 म_नकल(d_S,MID_S(a_S, j_पूर्णांक + 3, L_पूर्णांक - j_पूर्णांक - 3));
 gulix(d_S);
 mathexp(d_S);
 quadrix(d_S);
 अगर(leng_पूर्णांक - L_पूर्णांक - 3 >= 0)
 अणु
  म_नकल(f_S,RIGHT_S(a_S, leng_पूर्णांक - L_पूर्णांक - 3));
  gulix(f_S);
  x = VAL(f_S);
  अगर((x > 0.))
  अणु
   प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s",spc_S,"for(",b_S,"; ",e_S," <= ",d_S,"; ",e_S," = ",e_S," + ",f_S,")");
  पूर्ण
  अन्यथा
  अणु
   अगर((x < 0.))
   अणु
    प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s%s%s%s",spc_S,"for(",b_S,"; ",e_S," >= ",d_S,"; ",e_S," = ",e_S,f_S,")");
   पूर्ण
   अन्यथा
   अणु
    mathexp(f_S);
    quadrix(f_S);
    ख_लिखो(fp_2,"%s%s%s\n",spc_S,"if(++j__sig == 16) j__sig=0;",t_S);
    म_नकल(t_S,"");
    sigअगरf_पूर्णांक = 1;
    ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"sig__i[j__sig] = 1; if(",f_S," < 0) sig__i[j__sig] = -1;");
    प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s",spc_S,"for(",b_S,"; sig__i[j__sig]*",e_S," <= sig__i[j__sig]*",d_S,"; ",e_S," = ",e_S," + ",f_S,")");
   पूर्ण
  पूर्ण
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s",spc_S,"for(",b_S,"; ",e_S," <= ",d_S,"; ",e_S,"++)");
 पूर्ण
 ख_लिखो(fp_2,"%s%s\n",prtf_S,t_S);
 ख_लिखो(fp_2,"%s%s\n",spc_S,"{");
 lspac_पूर्णांक = lspac_पूर्णांक + 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_8500:   /* "NEXT" */
 ख_लिखो(fp_2,"%s%s\n",SPACE_S(lspac_पूर्णांक - 1),"}");
 lspac_पूर्णांक = lspac_पूर्णांक - 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 अगर(lspac_पूर्णांक < 0)
 अणु
  म_लिखो("%s% d %s% d %s%s\n","WARNING! Braces count = ",lspac_पूर्णांक," at line: ",nl_पूर्णांक,":",line_S);
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_9000:   /* "OPEN " */
 /* Open files क्रम I/O. Syntax: */
 /* OPEN filename$ FOR mode [ACCESS access] AS [#]filक्रमागतber [LEN=reclen] */
 /* ACCESS and LEN are पढ़ो but NOT OPERATIONAL YET !!! */
 leng_पूर्णांक = LEN(a_S);
 jopn_पूर्णांक = jopn_पूर्णांक + 1;
 i_पूर्णांक = 3;
 /*   Modes and their temporary found flags: */
 j_पूर्णांक = 0;
 म_नकल(mode_S,"");
 k_पूर्णांक = 0;
 म_नकल(access_S,"");
 i1_पूर्णांक = 0;
 n_पूर्णांक = 0;
 म_नकल(Len_S,"");
      जबतक (a_S[++i_पूर्णांक]) अणु
       अगर (स_भेद(&a_S[i_पूर्णांक], " FOR ", 5)==0) j_पूर्णांक = i_पूर्णांक;
       अगर (स_भेद(&a_S[i_पूर्णांक], "INPUT ", 6)==0 && j_पूर्णांक) म_नकल(mode_S, "r");
       अगर (स_भेद(&a_S[i_पूर्णांक], "OUTPUT ", 7)==0 && j_पूर्णांक) म_नकल(mode_S, "w");
       अगर (स_भेद(&a_S[i_पूर्णांक], "APPEND ", 7)==0 && j_पूर्णांक) म_नकल(mode_S, "a");
       अगर (स_भेद(&a_S[i_पूर्णांक], "RANDOM ", 7)==0 && j_पूर्णांक) म_नकल(mode_S, "r+");
       अगर (स_भेद(&a_S[i_पूर्णांक], "BINARY ", 7)==0 && j_पूर्णांक) म_नकल(mode_S, "r+");
       अगर (स_भेद(&a_S[i_पूर्णांक], "ACCESS ", 7)==0) k_पूर्णांक = i_पूर्णांक;
       अगर (स_भेद(&a_S[i_पूर्णांक], "READ ", 5)==0) म_नकल(access_S, "r");
       अगर (स_भेद(&a_S[i_पूर्णांक], "WRITE ", 6)==0) म_नकल(access_S, "w");
       अगर (स_भेद(&a_S[i_पूर्णांक], "READ WRITE ",11)==0) म_नकल(access_S, "rw");
       अगर (स_भेद(&a_S[i_पूर्णांक], " AS ", 4)==0) i1_पूर्णांक = i_पूर्णांक + 2;
      पूर्ण
      अगर (!j_पूर्णांक) अणु
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing FOR in line No",nl_पूर्णांक,": ",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
      पूर्ण
      अगर (!i1_पूर्णांक) अणु
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing AS in line No",nl_पूर्णांक,": ",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
      पूर्ण
 अगर(म_भेद(mode_S, "") == 0)
 अणु
  म_नकल(mode_S,"r+");
 पूर्ण
      स_नकल(f_S, &a_S[5], j_पूर्णांक-4); f_S[j_पूर्णांक-4]='\0';
 gulix(f_S);
      अगर (f_S[0] == '\0') अणु
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: missing filename in line No",nl_पूर्णांक,": ",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
      पूर्ण
 quadrix(f_S);
 tokenix(f_S, &n_पूर्णांक, "+", "");
 अगर(n_पूर्णांक > 1)
 अणु
  म_लिखोmt(f_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(f_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
 gulix(f_S);
 n_पूर्णांक = 0;
      जबतक (a_S[++i1_पूर्णांक]) अणु
       अगर (n_पूर्णांक=म_से_प(&a_S[i1_पूर्णांक])) अवरोध;
      पूर्ण
 अगर(n_पूर्णांक == 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: file number missing or not literal in line No",nl_पूर्णांक,": ",line_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(d_S,STR_S(n_पूर्णांक));
 म_नकल(n_S,MID_S(d_S, 2, LMAX));
 प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s%s%s%s","if((fp_",n_S," = fopen(strcpy(fn",n_S,"__S,",f_S,"), ",CHR_S(34),mode_S,CHR_S(34),")) == NULL)");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 ख_लिखो(fp_2,"%s%s\n",spc_S,"{");
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s\n",SPACE_S(lspac_पूर्णांक + 1),"fprintf(stderr,",CHR_S(34),"Can't open file %s\\n",CHR_S(34),",fn",n_S,"__S); exit(1);");
 ख_लिखो(fp_2,"%s%s\n",spc_S,"}");
 commfl_पूर्णांक = 1;
 i_पूर्णांक = 1;
 जबतक(lख_खोलो_पूर्णांक[i_पूर्णांक] != n_पूर्णांक && i_पूर्णांक <= nlखोलो_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 /*   Save inक्रमmation about खोलो files: */
 अगर(i_पूर्णांक <= nlखोलो_पूर्णांक)
 अणु
  lख_खोलो_पूर्णांक[i_पूर्णांक] = n_पूर्णांक;
  म_नकल(lख_खोलो_S[i_पूर्णांक],f_S);
 पूर्ण
 अन्यथा
 अणु
  nlखोलो_पूर्णांक = nlखोलो_पूर्णांक + 1;
  lख_खोलो_पूर्णांक[nlखोलो_पूर्णांक] = n_पूर्णांक;
  म_नकल(lख_खोलो_S[nlखोलो_पूर्णांक],f_S);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_9500:   /* "CLOSE" */
 /* Syntax: CLOSE [[#]filक्रमागतber[,[#] filक्रमागतber]...] */
 tokenix(MID_S(a_S, 6, LMAX), &n_पूर्णांक, ",", "");
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
       c = पंचांगp_S[i_पूर्णांक][0];
       अगर ('0' <= c && c <= '9') अणु
        म_नकल(b_S, पंचांगp_S[i_पूर्णांक]);
       पूर्ण अन्यथा अणु
        c = पंचांगp_S[i_पूर्णांक][1];
        अगर ('0' <= c && c <= '9') अणु
         म_नकल(b_S, &पंचांगp_S[i_पूर्णांक][1]);
        पूर्ण अन्यथा अणु
Lab_9501:
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR: invalid argument(s) in line No",nl_पूर्णांक,":",a_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
        पूर्ण
       पूर्ण
  g_दीर्घ = VAL(b_S);
  अगर(! g_दीर्घ)
  अणु
   जाओ Lab_9501;
  पूर्ण
  म_नकल(n_S,STR_S(g_दीर्घ));
  म_नकल(n_S,MID_S(n_S, 2, LMAX));
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"fclose(fp_",n_S,");",t_S);
 पूर्ण
 अगर(n_पूर्णांक == 0)
 अणु
  /* Overसमाप्त. Close everything even अगर not खोलोed yet! */
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nखोलो_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(n_S,STR_S(ख_खोलो_पूर्णांक[i_पूर्णांक]));
   म_नकल(n_S,MID_S(n_S, 2, LMAX));
   ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"fclose(fp_",n_S,");",t_S);
  पूर्ण
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_10000:   /* "ENVIRON " */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: ENVIRON feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_11000:   /* "GOSUB " */
 leng_पूर्णांक = LEN(a_S);
 म_नकल(b_S,MID_S(a_S, 6, leng_पूर्णांक - 5));
 gulix(b_S);
 प्र_लिखो(prtf_S,"%s%s%s","if (setjmp(j__buf[j__lev++])==0) goto Lab_",b_S,";");
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"/* GOSUB Lab_",b_S," */ ",t_S);
 ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
 retrnfl_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_11500:   /* "RETURN" */
 म_नकल(prtf_S,"longjmp(j__buf[--j__lev],1);");
 ख_लिखो(fp_2,"%s%s\n",spc_S,"/* RETURN */");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 retrnfl_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_12000:   /* "RANDOMIZE" */
 म_नकल(b_S,MID_S(a_S, 10, LMAX));
 gulix(b_S);
 quadrix(b_S);
       अगर (म_माप(b_S)==0) अणु
 म_नकल(prtf_S,"RANDOMIZE(32767);");
       पूर्ण अन्यथा अणु
 प्र_लिखो(prtf_S,"%s%s%s","RANDOMIZE((long)",b_S,");");
       पूर्ण
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_12200:   /* "PAUSE " */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 gulix(b_S);
 अगर(म_भेद(b_S, "") == 0)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 quadrix(b_S);
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"t__.tv_sec = floor(",b_S,");");
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"t__.tv_usec= 1000000*(",b_S,"-t__.tv_sec);");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,"select(0, (void *)0, (void *)0, (void *)0, &t__);",t_S);
 mathfl_पूर्णांक = 1;
 छोड़ोfl_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_17000:   /* "SHELL"  Only explicite क्रमm "..." of shell commands is suported. */
 /* eg. "del " + name$ */
 commfl_पूर्णांक = 1;
 अगर(म_भेद(a_S, "SHELL") == 0)
 अणु
  म_नकल(a_S,"");
  जाओ Lab_17030;
 पूर्ण
 म_नकल(a_S,MID_S(a_S, 6, LMAX));
 stringx(a_S);
 gulix(a_S);
 leng_पूर्णांक = LEN(a_S);
 अगर(noshell_पूर्णांक == 1)
 अणु
  जाओ Lab_17015;
 पूर्ण
 ii_पूर्णांक = 1;
 togfl_पूर्णांक = 0;
 जबतक(ii_पूर्णांक < leng_पूर्णांक)
 अणु
  अगर(ASC(MID_S(a_S, ii_पूर्णांक, 1)) == 34)
  अणु
   togfl_पूर्णांक = 1 - togfl_पूर्णांक;
  पूर्ण
  अगर(togfl_पूर्णांक == 0)
  अणु
   जाओ Lab_17010;
  पूर्ण
  म_नकल(b_S,MID_S(a_S, ii_पूर्णांक, 3));
  म_नकल(d_S,MID_S(a_S, ii_पूर्णांक, 4));
  म_नकल(e_S,MID_S(a_S, ii_पूर्णांक, 6));
       अगर (ii_पूर्णांक == 1)
       अणु i1_पूर्णांक=32; पूर्ण
       अन्यथा
       अणु i1_पूर्णांक=a_S[ii_पूर्णांक-2]; पूर्ण
  अगर(i1_पूर्णांक != 32 && i1_पूर्णांक != 34)
  अणु
   जाओ Lab_17010;
  पूर्ण
  अगर(म_भेद(d_S, "copy") == 0)
  अणु
        i2_पूर्णांक=a_S[ii_पूर्णांक-1+4];
        अगर (i2_पूर्णांक!=32 && i2_पूर्णांक!=34) जाओ Lab_17010;
   प्र_लिखो(a_S,"%s%s%s",LEFT_S(a_S, ii_पूर्णांक - 1),"cp",RIGHT_S(a_S, leng_पूर्णांक - ii_पूर्णांक - 3));
   leng_पूर्णांक = leng_पूर्णांक - 2;
   ii_पूर्णांक = ii_पूर्णांक + 2;
   जाओ Lab_17010;
  पूर्ण
  अगर(म_भेद(e_S, "rename") == 0)
  अणु
        i2_पूर्णांक=a_S[ii_पूर्णांक-1+6];
        अगर (i2_पूर्णांक!=32 && i2_पूर्णांक!=34) जाओ Lab_17010;
   प्र_लिखो(a_S,"%s%s%s",LEFT_S(a_S, ii_पूर्णांक - 1),"mv",RIGHT_S(a_S, leng_पूर्णांक - ii_पूर्णांक - 5));
   leng_पूर्णांक = leng_पूर्णांक - 4;
   ii_पूर्णांक = ii_पूर्णांक + 2;
   जाओ Lab_17010;
  पूर्ण
  अगर(म_भेद(b_S, "del") == 0)
  अणु
        i2_पूर्णांक=a_S[ii_पूर्णांक-1+3];
        अगर (i2_पूर्णांक!=32 && i2_पूर्णांक!=34) जाओ Lab_17010;
   प्र_लिखो(a_S,"%s%s%s",LEFT_S(a_S, ii_पूर्णांक - 1),"rm -f",RIGHT_S(a_S, leng_पूर्णांक - ii_पूर्णांक - 2));
   leng_पूर्णांक = leng_पूर्णांक + 2;
   ii_पूर्णांक = ii_पूर्णांक + 5;
   जाओ Lab_17010;
  पूर्ण
  अगर(म_भेद(b_S, "dir") == 0)
  अणु
        i2_पूर्णांक=a_S[ii_पूर्णांक-1+3];
        अगर (i2_पूर्णांक!=32 && i2_पूर्णांक!=34) जाओ Lab_17010;
   प्र_लिखो(a_S,"%s%s%s",LEFT_S(a_S, ii_पूर्णांक - 1),"ls -l",RIGHT_S(a_S, leng_पूर्णांक - ii_पूर्णांक - 2));
   leng_पूर्णांक = leng_पूर्णांक + 2;
   ii_पूर्णांक = ii_पूर्णांक + 5;
   जाओ Lab_17010;
  पूर्ण
  अगर(म_भेद(b_S, "cls") == 0)
  अणु
        i2_पूर्णांक=a_S[ii_पूर्णांक-1+3];
        अगर (i2_पूर्णांक!=32 && i2_पूर्णांक!=34) जाओ Lab_17010;
   प्र_लिखो(a_S,"%s%s%s",LEFT_S(a_S, ii_पूर्णांक - 1),"clear",RIGHT_S(a_S, leng_पूर्णांक - ii_पूर्णांक - 2));
   leng_पूर्णांक = leng_पूर्णांक + 2;
   ii_पूर्णांक = ii_पूर्णांक + 5;
   जाओ Lab_17010;
  पूर्ण
Lab_17010:
  ii_पूर्णांक = ii_पूर्णांक + 1;
 पूर्ण
Lab_17015:
 gulix(a_S);
 tokenix(a_S, &n_पूर्णांक, "+", "");
 अगर(n_पूर्णांक > 1)
 अणु
  म_लिखोmt(a_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  quadrix(prt_S);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(a_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
Lab_17030:
 quadrix(a_S);
 प्र_लिखो(prtf_S,"%s%s%s","system(",a_S,");");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_18000:   /* numerical and string expressions */
 अगर(commfl_पूर्णांक == 1)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 leng_पूर्णांक = LEN(a_S);
 togfl_पूर्णांक = 0;
 i_पूर्णांक = 1;
      जबतक (! (togfl_पूर्णांक == 0 && a_S[i_पूर्णांक-1] == '=') && i_पूर्णांक < leng_पूर्णांक) अणु
       अगर (a_S[i_पूर्णांक-1] == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
       i_पूर्णांक++;
      पूर्ण
 अगर(i_पूर्णांक == leng_पूर्णांक)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 commfl_पूर्णांक = 1;
 पंचांगpfl_पूर्णांक = 0;
 expflg_पूर्णांक = 1;
 fcond_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
 lmid_पूर्णांक = 0;
 म_नकल(e_S,LEFT_S(a_S, i_पूर्णांक - 1));
 gulix(e_S);
 vartyp(e_S, &typ_पूर्णांक);
 अगर(funcflag_पूर्णांक == 1)
 अणु
  अगर(म_भेद(e_S, funcnam_S) == 0)   /* Function assignment line */
  अणु
   fcond_पूर्णांक = 1;
  पूर्ण
 पूर्ण
 अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
 अणु
  म_नकल(a_S,MID_S(a_S, i_पूर्णांक + 1, LMAX));
  gulix(a_S);
  stringx(a_S);   /* String स्थिरant pretprocessor */
  vartyp(a_S, &typ_पूर्णांक);
  म_लिखोmt(a_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);   /* string expression processing */
       अगर (स_भेद(e_S, "MID$(", 5) == 0) अणु
  lmid_पूर्णांक = typ_पूर्णांक;
  म_नकल(b_S,MID_S(e_S, 6, LEN(e_S) - 6));
  quadrix(b_S);
  tokenix(b_S, &n_पूर्णांक, ",", "");
  अगर(n_पूर्णांक == 2)
  अणु
   म_नकल(पंचांगp_S[3],"LMAX");
  पूर्ण
  अगर(lmid_पूर्णांक == 7)
  अणु
   ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
   twsflg_पूर्णांक = 1;
   ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"strncpy(&",पंचांगp_S[1],"[(int)(",पंचांगp_S[2],"-1)],tws__S,(int)MIN(MIN(",पंचांगp_S[3],",strlen(",पंचांगp_S[1],")-(",पंचांगp_S[2],")+1),strlen(tws__S)));");
  पूर्ण
  अन्यथा
  अणु
   ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"strncpy(&",पंचांगp_S[1],"[(int)(",पंचांगp_S[2],"-1)],",a_S,",(int)MIN(MIN(",पंचांगp_S[3],",strlen(",पंचांगp_S[1],")-(",पंचांगp_S[2],")+1),strlen(",a_S,")));");
  पूर्ण
  minff_पूर्णांक = 1;
  जाओ Lab_18009;
       पूर्ण
  अगर(typ_पूर्णांक == 7)
  अणु
   क्रम(j_पूर्णांक = 1; j_पूर्णांक <= nptk_पूर्णांक; j_पूर्णांक++)
   अणु
    अगर(म_भेद(e_S, पंचांगp_S[j_पूर्णांक]) == 0)
    अणु
     पंचांगpfl_पूर्णांक = 1;
     जाओ Lab_18001;
    पूर्ण
   पूर्ण
Lab_18001:
   अगर(पंचांगpfl_पूर्णांक == 1 && fcond_पूर्णांक == 1)
   अणु
    ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","SYNTAX ERROR in line No",nl_पूर्णांक,":",line_S);
    ख_लिखो(मानक_त्रुटि,"%s\n","Function name must be on the left side only");
    संकेत_पूर्णांक = 1;   /* निकास(1); */
    जाओ Lab_9999;
   पूर्ण
   अगर(पंचांगpfl_पूर्णांक == 1 || fcond_पूर्णांक == 1)
   अणु
    प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
    twsflg_पूर्णांक = 1;
    अगर(fcond_पूर्णांक == 1)
    अणु
     togfl_पूर्णांक = 1;
    पूर्ण
   पूर्ण
   अन्यथा
   अणु
    quadrix(e_S);
    प्र_लिखो(prtf_S,"%s%s%s%s%s%s%s%s","sprintf(",e_S,",",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   अगर(fcond_पूर्णांक == 1)
   अणु
    प्र_लिखो(prtf_S,"%s%s%s","return ",MID_S(prt_S, 2, LMAX),";");
   पूर्ण
   अन्यथा
   अणु
    quadrix(e_S);
    प्र_लिखो(prtf_S,"%s%s%s%s","strcpy(",e_S,prt_S,");");
   पूर्ण
  पूर्ण
 पूर्ण
 अन्यथा
 अणु
       म_नकल(b_S, &a_S[i_पूर्णांक]);
  gulix(b_S);
  अगर(म_भेद(LEFT_S(b_S, 8), "XWINDOW ") == 0)
  अणु
   xwflag_पूर्णांक = 1;
   म_नकल(f_S,e_S);
   quadrix(f_S);
   म_नकल(a_S,b_S);
   जाओ Lab_21000;
  पूर्ण
  mathexp(a_S);   /* Translating math. functions */
  अगर(fcond_पूर्णांक == 1)
  अणु
   प्र_लिखो(prtf_S,"%s%s%s","return ",MID_S(a_S, i_पूर्णांक + 1, LMAX),";");
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(prtf_S,"%s%s",a_S,";");
  पूर्ण
  expflg_पूर्णांक = 0;
 पूर्ण
 quadrix(prtf_S);
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  अगर(! fcond_पूर्णांक)
  अणु
   quadrix(e_S);
  पूर्ण
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"strcpy(",e_S,",tws__S);");
 पूर्ण
 अगर(togfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"return tws__S;");
 पूर्ण
Lab_18009:
 expflg_पूर्णांक = 0;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19000:   /* "END SUB"  and "END FUNCTION" */
 ख_लिखो(fp_2,"%s\n","}");
 अगर(lspac_पूर्णांक != 1)
 अणु
  अगर(funcflag_पूर्णांक == 1)
  अणु
        ख_लिखो(मानक_त्रुटि,"ERROR: Brace misscount of %d occured at the end of FUNCTION: %s\n",lspac_पूर्णांक-1, subname_S[isub_पूर्णांक]);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
  अन्यथा
  अणु
        ख_लिखो(मानक_त्रुटि,"ERROR: Brace misscount of %d occured at the end of SUBroutine: %s\n",lspac_पूर्णांक-1, subname_S[isub_पूर्णांक]);
   संकेत_पूर्णांक = 1;   /* निकास(1); */
   जाओ Lab_9999;
  पूर्ण
 पूर्ण
 commfl_पूर्णांक = 1;
 funcflag_पूर्णांक = 0;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19100:   /* "EXIT SUB" */
 म_नकल(prtf_S,"return 0;");
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prtf_S,t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19200:   /* "DEFSTR " */
 flag_पूर्णांक = 0;
      अगर(स_भेद(&a_S[3],"STR",3)==0) flag_पूर्णांक=1;
      अगर(स_भेद(&a_S[3],"INT",3)==0) flag_पूर्णांक=2;
      अगर(स_भेद(&a_S[3],"DBL",3)==0) flag_पूर्णांक=3;
 अगर(! flag_पूर्णांक)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","Bug in 19200");
  निकास(3);
 पूर्ण
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक == 0)
 अणु
  जाओ Lab_29000;
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
  j_पूर्णांक = LEN(पंचांगp_S[i_पूर्णांक]);   /* IF j% <> 1 OR j% <> 3 THEN GOTO 29000 */
  अगर(j_पूर्णांक != 1)
  अणु
        क्रम(k_पूर्णांक=बड़े(पंचांगp_S[i_पूर्णांक][0]); k_पूर्णांक<=बड़े(पंचांगp_S[i_पूर्णांक][j_पूर्णांक-1]); k_पूर्णांक++) अणु
         अगर (flag_पूर्णांक==1) def__str[k_पूर्णांक-'A'] = 1;
         अगर (flag_पूर्णांक==2) def__पूर्णांक[k_पूर्णांक-'A'] = 1;
         अगर (flag_पूर्णांक==3) def__dbl[k_पूर्णांक-'A'] = 1;
   /*      PRINT flag%; " k% = "; k% - 'A' */
        पूर्ण
  पूर्ण
  अन्यथा
  अणु
        अगर (flag_पूर्णांक==1) def__str[बड़े(पंचांगp_S[i_पूर्णांक][0])-'A'] = 1;
        अगर (flag_पूर्णांक==2) def__पूर्णांक[बड़े(पंचांगp_S[i_पूर्णांक][0])-'A'] = 1;
        अगर (flag_पूर्णांक==3) def__dbl[बड़े(पंचांगp_S[i_पूर्णांक][0])-'A'] = 1;
  पूर्ण
 पूर्ण
 अगर(flag_पूर्णांक == 1)
 अणु
  defstr_पूर्णांक = 1;
 पूर्ण
 अगर(flag_पूर्णांक == 2)
 अणु
  defपूर्णांक_पूर्णांक = 1;
 पूर्ण
 अगर(flag_पूर्णांक == 3)
 अणु
  defdbl_पूर्णांक = 1;
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19300:   /* "DEF FN" */
 /* Syntax: DEF FNxx(x) = x * x - 5 * x + 6 */
 /* Done in 800. */
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19400:   /* "SOUND" */
 /* Syntax: SOUND .... NOT YET */
 म_नकल(e_S,CHR_S(34));
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"printf(",e_S,"\\a",e_S,");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19500:   /* "DATA " */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: DATA feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19550:   /* "READ " */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: READ feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_19575:   /* "RESTORE [item%]" */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: RESTORE feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_20000:   /* "LINE (" or "LINE -" (graphics) statement */
 /* Supported syntax: */
 /* LINE (x1, y1) - (x2, y2)[,[color][,[B[F]][,style]]]   flag% = 0 */
 /* LINE - (x, y)[,[color][,[B[F]][,style]]]              flag% = 1 */
 /* LINE - STEP(x, y)[,[color][,[B[F]][,style]]]          flag% = 2 */
 /* (there may be spaces *after* the STEP keyword) */
 /* Draws a line and sets the new current position x=xy(0,0), y=xy(0,1) */
 flag_पूर्णांक = 0;
 म_नकल(b_S,MID_S(a_S, 5, LMAX));
 quadrix(b_S);   /* vraca oguljeno ! */
      अगर (b_S[0] == '-') अणु
 flag_पूर्णांक = 1;
 म_नकल(b_S,MID_S(b_S, 3, LMAX));
       अगर (स_भेद(b_S, "STEP", 4)==0) अणु
 म_नकल(b_S,MID_S(b_S, 5, LMAX));
 flag_पूर्णांक = 2;
       पूर्ण
      पूर्ण
 अगर(flag_पूर्णांक)
 अणु
  प्र_लिखो(tws__S,"%s%s","(xy__pos[0][0], xy__pos[0][1])-",b_S);
  म_नकल(b_S,tws__S);
 पूर्ण
 tokenix(b_S, &k_पूर्णांक, "-", ",");
 अगर(k_पूर्णांक > 5)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","ERROR: too many arguments to LINE in line No",nl_पूर्णांक,": ",line_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
      म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
      म_नकल(d_S,पंचांगp_S[2]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 म_नकल(temp_S[1],पंचांगp_S[1]);
 म_नकल(temp_S[2],पंचांगp_S[2]);
 tokenix(d_S, &n_पूर्णांक, ",", "");
 म_नकल(temp_S[3],पंचांगp_S[1]);
 म_नकल(temp_S[4],पंचांगp_S[2]);
 पंचांगpfl_पूर्णांक = 0;
 /* GOSUB Lab_20050 */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_20050;
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  जाओ Lab_20009;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"xy__pos[1][0]=",temp_S[1],"; xy__pos[1][1]=",temp_S[2],";",t_S);
 अगर(flag_पूर्णांक == 2)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"xy__pos[0][0]+=",temp_S[3],"; xy__pos[0][1]+=",temp_S[4],";");
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"xy__pos[0][0]=",temp_S[3],"; xy__pos[0][1]=",temp_S[4],";");
 पूर्ण
 ख_लिखो(fp_2,"%s%s\n",spc_S,"ixline(2,xy__pos);");
Lab_20009:
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_20050:   /* options handling (color, B[F], style) */
 j_पूर्णांक = 0;
 अगर(k_पूर्णांक >= 3)
 अणु
  म_नकल(b_S,पंचांगp_S[3]);
       अगर (b_S[0] != '\0') अणु
  quadrix(b_S);
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetlc((int)",b_S,");");
  j_पूर्णांक = 1;
       पूर्ण
 पूर्ण
 अगर(! j_पूर्णांक && colorfl_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixsetlc(1);");
 पूर्ण
 अगर(k_पूर्णांक == 5)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixsetld((int)(",पंचांगp_S[5],"));",t_S);
 पूर्ण
 अगर(k_पूर्णांक >= 4 && (म_भेद(पंचांगp_S[4], "BF") == 0 || म_भेद(पंचांगp_S[4], "B") == 0))
 अणु
  /* C      अगर (पंचांगp_S[4][0]=='\0') */
  /* C      अणु */
  /*        RETURN */
  /* C      पूर्ण */
  अगर(म_भेद(पंचांगp_S[4], "BF") == 0)
  अणु
        अगर (b_S[0] != '\0') अणु
   ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetfc((int)",b_S,"); ixsetfs(1, 1);");
        पूर्ण
   म_नकल(e_S,"),1);");
  पूर्ण
  अन्यथा
  अणु
   म_नकल(e_S,"),0);");
  पूर्ण
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixbox((int)(",temp_S[1],"),(int)(",temp_S[3],"),(int)(",temp_S[2],"),(int)(",temp_S[4],e_S,t_S);
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_20500:   /* "PSET " (graphics) statement */
 /* Draws a poपूर्णांक and sets the new current position x=xy(0,0), y=xy(0,1) */
 म_नकल(b_S,MID_S(a_S, 5, LMAX));
 gulix(b_S);
      अगर (b_S[0] != '(') जाओ Lab_29000;
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक == 0 || k_पूर्णांक > 2)
 अणु
  जाओ Lab_29500;
 पूर्ण
 अगर(k_पूर्णांक == 2)
 अणु
  प्र_लिखो(d_S,"%s%s%s","(int)(",पंचांगp_S[2],")");
 पूर्ण
 अन्यथा
 अणु
  अगर(colorfl_पूर्णांक)
  अणु
   म_नकल(d_S,"1");
  पूर्ण
  अन्यथा
  अणु
   म_नकल(d_S,"-1");
  पूर्ण
 पूर्ण
      म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"xy__pos[0][0]=",पंचांगp_S[1],"; xy__pos[0][1]=",पंचांगp_S[2],";");
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixpset(xy__pos[0][0],xy__pos[0][1],",d_S,");",t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_21000:   /* "SCREEN " and/or "XWINDOW " (graphics) */
 /* SCREEN: Initialize graphics and खोलो an X-winकरोw */
 /* Original syntax:   SCREEN mode */
 /* Additional syntax: SCREEN (x, y)[, w, h[, title$[, Xfont_name$]]] */
 /* XWINDOW: Open a new X-winकरोw. SCREEN खोलोs winकरोw with ID=0, whereas */
 /* XWINDOW खोलोs ID=1, 2, ... 20. It is NOT a BASIC command. */
 /* Syntax: XWINDOW (x, y)[, w, h[, title$]] */
 /* (x, y)=position, (w, h)=size in pixels */
 /* 819x484 -misc-fixed-medium-r-normal-*-20-140-*-100-c-100-iso8859-1 */
 म_नकल(e_S,CHR_S(34));
 twsflg_पूर्णांक = 1;
      अगर ( स_भेद(a_S,"SCREEN ",7)==0 ) अणु
 ख_लिखो(fp_2,"%s%s\n",spc_S,"/* SCREEN initializations */");
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"if (ixopnds(",e_S,e_S,")==-1) exit(0);");
      पूर्ण
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
 अगर(म_भेद(b_S, "") == 0)
 अणु
  जाओ Lab_29000;
 पूर्ण
 typ_पूर्णांक = 0;   /* Used as a flag */
      c = b_S[0];
 tokenix(b_S, &k_पूर्णांक, ",", "");
      अगर (c == '(')
      अणु
       k_पूर्णांक++;
 म_नकल(temp_S[6],पंचांगp_S[5]);
 म_नकल(temp_S[5],पंचांगp_S[4]);
 म_नकल(temp_S[4],पंचांगp_S[3]);
 म_नकल(temp_S[3],पंचांगp_S[2]);
       म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 म_नकल(temp_S[2],पंचांगp_S[2]);
 म_नकल(temp_S[1],पंचांगp_S[1]);

 vartyp(temp_S[5], &typ_पूर्णांक);
 अगर(typ_पूर्णांक == 7)
 अणु
  म_लिखोmt(temp_S[5], क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  /*     PRINT #2, spc$ + prtf$ */
  म_नकल(temp_S[5],"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
      पूर्ण
 प्र_लिखो(b_S,"%s%s%s",e_S,"QB2C",e_S);
 म_नकल(d_S,"-misc-fixed-medium-r-normal-*-20-140-*-100-c-100-iso8859-1");
 प्र_लिखो(tws__S,"%s%s%s",e_S,d_S,e_S);
 म_नकल(d_S,tws__S);
 अगर(k_पूर्णांक > 4)   /* title */
 अणु
  म_नकल(b_S,temp_S[5]);
 पूर्ण
 अगर(k_पूर्णांक > 5)   /* font */
 अणु
  म_नकल(d_S,temp_S[6]);
 पूर्ण
      अगर (k_पूर्णांक == 1 && c != '(')
      अणु
 अगर(म_भेद(पंचांगp_S[1], "10") == 0)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s%s",spc_S,"ixopnwi(100,100,819,484,",b_S,",0);",t_S);
  commfl_पूर्णांक = 1;
 पूर्ण
 अन्यथा
 अणु
  अगर(म_भेद(पंचांगp_S[1], "0") == 0)
  अणु
   म_लिखो("%s\n","WARNING! SCREEN 0 is obsolete, ignored since");
   म_लिखो("%s\n","there is no need to switch to tty mode.");
   commfl_पूर्णांक = 1;
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
  अन्यथा
  अणु
   म_लिखो("%s%s%s\n","WARNING: ",a_S," not supported! Using mode 10 instead.");
   प्र_लिखो(prt_S,"%s%s%s%s%s",spc_S,"ixopnwi(100,100,819,484,",b_S,",0);",t_S);
   commfl_पूर्णांक = 1;
  पूर्ण
 पूर्ण
      पूर्ण
      अन्यथा
      अणु
 अगर(k_पूर्णांक == 2)
 अणु
  म_नकल(temp_S[3],"819");
  म_नकल(temp_S[4],"484");
 पूर्ण
 अन्यथा
 अणु
  अगर(k_पूर्णांक < 4)
  अणु
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
 पूर्ण
 प्र_लिखो(prt_S,"%s%s%s%s%s%s%s%s%s%s%s%s","ixopnwi((int)",temp_S[1],",(int)",temp_S[2],",(int)",temp_S[3],",(int)",temp_S[4],",",b_S,",0);",t_S);
      पूर्ण
      अगर ( स_भेद(a_S,"SCREEN ",7)==0 ) अणु
 ख_लिखो(fp_2,"%s%s\n",spc_S,"ixsetfs(0,0); ixsetfc(1); ixsettc(1); ixsetta(0,0); ixsetms(0,5,xy__pos);");
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"strcpy(tws__S,",d_S,");");
 ख_लिखो(fp_2,"%s%s\n",spc_S,"if(ixsettf(1,tws__S)==1)");
 ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"{ fprintf(stderr,",e_S,"Requested Xfont not found: %s\\n",e_S,",tws__S); }");
      पूर्ण
 अगर(typ_पूर्णांक == 7)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
 पूर्ण
 अगर(xwflag_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,f_S,"=",prt_S);
  xwflag_पूर्णांक = 0;
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,prt_S);
 पूर्ण
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_21500:   /* "SET " (graphics) statement */
 म_नकल(e_S,CHR_S(34));
 j_पूर्णांक = LEN(a_S);
      i_पूर्णांक = 4; जबतक(a_S[i_पूर्णांक] != ' ' && i_पूर्णांक < j_पूर्णांक) i_पूर्णांक++;
 अगर(i_पूर्णांक == j_पूर्णांक)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","ERROR: Syntax error in line No",nl_पूर्णांक,": ",a_S);
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 म_नकल(d_S,MID_S(a_S, 5, i_पूर्णांक - 4));   /* Opcija od SET */
 म_नकल(b_S,MID_S(a_S, i_पूर्णांक + 2, LMAX));
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक == 1)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s","((int)(",पंचांगp_S[1],")); ",t_S);
 पूर्ण
 अन्यथा
 अणु
  अगर(k_पूर्णांक == 2)
  अणु
   प्र_लिखो(prt_S,"%s%s%s%s%s%s","((int)(",पंचांगp_S[1],") ,(int)(",पंचांगp_S[2],"));",t_S);
  पूर्ण
 पूर्ण
 अगर(म_भेद(d_S, "PLCI") == 0 || म_भेद(d_S, "LCOL") == 0)
 अणु
  अगर(k_पूर्णांक != 1)
  अणु
   जाओ Lab_29000;
  पूर्ण
  ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetlc",prt_S);
  commfl_पूर्णांक = 1;
 पूर्ण
 अन्यथा
 अणु
  अगर(म_भेद(d_S, "LWID") == 0)
  अणु
   अगर(k_पूर्णांक != 1)
   अणु
    जाओ Lab_29000;
   पूर्ण
   ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetln",prt_S);
   commfl_पूर्णांक = 1;
  पूर्ण
  अन्यथा
  अणु
   अगर(म_भेद(d_S, "PMTS") == 0)
   अणु
    अगर(k_पूर्णांक != 2)
    अणु
     जाओ Lab_29000;
    पूर्ण
    ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetmts",prt_S);
    commfl_पूर्णांक = 1;
   पूर्ण
   अन्यथा
   अणु
    अगर(म_भेद(d_S, "PMCI") == 0)
    अणु
     अगर(k_पूर्णांक != 1)
     अणु
      जाओ Lab_29000;
     पूर्ण
     ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetmc",prt_S);
     commfl_पूर्णांक = 1;
    पूर्ण
    अन्यथा
    अणु
     अगर(म_भेद(d_S, "FASI") == 0)
     अणु
      अगर(k_पूर्णांक > 2)
      अणु
       जाओ Lab_29000;
      पूर्ण
      अगर(k_पूर्णांक == 1)
      अणु
       प्र_लिखो(prt_S,"%s%s%s%s","((int)(",पंचांगp_S[1],"), 0); ",t_S);
      पूर्ण
      ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetfs",prt_S);
      commfl_पूर्णांक = 1;
     पूर्ण
     अन्यथा
     अणु
      अगर(म_भेद(d_S, "FACI") == 0)
      अणु
       अगर(k_पूर्णांक != 1)
       अणु
        जाओ Lab_29000;
       पूर्ण
       ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetfc",prt_S);
       commfl_पूर्णांक = 1;
      पूर्ण
      अन्यथा
      अणु
       अगर(म_भेद(d_S, "TXCI") == 0)
       अणु
        अगर(k_पूर्णांक != 1)
        अणु
         जाओ Lab_29000;
        पूर्ण
        ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsettc",prt_S);
        commfl_पूर्णांक = 1;
       पूर्ण
       अन्यथा
       अणु
        अगर(म_भेद(d_S, "TFON") == 0)
        अणु
         अगर(k_पूर्णांक == 1)
         अणु
          म_नकल(siz_S,"14");
         पूर्ण
         अगर(k_पूर्णांक == 2)
         अणु
          म_नकल(siz_S,पंचांगp_S[2]);
          म_नकल(enc_S,"iso8859-1");
         पूर्ण
         अगर(k_पूर्णांक == 3)
         अणु
          म_नकल(enc_S,पंचांगp_S[3]);
         पूर्ण
         अगर(k_पूर्णांक > 3)
         अणु
          जाओ Lab_29000;
         पूर्ण
         vartyp(पंचांगp_S[1], &typ_पूर्णांक);
         अगर(! (LEN(पंचांगp_S[1]) <= 5 && (typ_पूर्णांक == 3 || typ_पूर्णांक == 4)))
         अणु
          जाओ Lab_21505;
         पूर्ण
         म_नकल(f_S,"p");
         म_नकल(b_S,LEFT_S(पंचांगp_S[1], 3));
         अगर(म_भेद(b_S, "Hel") == 0)
         अणु
          म_नकल(fam_S,"-adobe-helvetica");
          जाओ Lab_21503;
         पूर्ण
         अगर(म_भेद(b_S, "Tim") == 0)
         अणु
          म_नकल(fam_S,"-adobe-times");
          जाओ Lab_21503;
         पूर्ण
         अगर(म_भेद(b_S, "Sym") == 0)
         अणु
          म_नकल(fam_S,"-adobe-symbol");
          जाओ Lab_21503;
         पूर्ण
         अगर(म_भेद(b_S, "Fix") == 0)
         अणु
          म_नकल(fam_S,"-misc-fixed");
          म_नकल(f_S,"c");
          जाओ Lab_21503;
         पूर्ण
         ख_लिखो(मानक_त्रुटि,"%s%s%s\n","qb2c: Special font name ",पंचांगp_S[1]," undefined");
         जाओ Lab_29000;
Lab_21503:
         म_नकल(b_S,MID_S(पंचांगp_S[1], 4, LMAX));
         अगर(म_भेद(b_S, "") == 0)
         अणु
          म_नकल(b_S,"-medium-r");
         पूर्ण
         अगर(म_भेद(b_S, "B") == 0)
         अणु
          म_नकल(b_S,"-bold-r");
         पूर्ण
         अगर(म_भेद(b_S, "I") == 0)
         अणु
          म_नकल(b_S,"-medium-o");
         पूर्ण
         अगर(म_भेद(b_S, "BI") == 0)
         अणु
          म_नकल(b_S,"-bold-o");
         पूर्ण
Lab_21504:
         प्र_लिखो(पंचांगp_S[1],"%s%s%s%s%s%s%s%s%s%s",e_S,fam_S,b_S,"-normal-*-",siz_S,"-*-100-100-",f_S,"-*-",enc_S,e_S);
Lab_21505:
         ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"if(ixsettf(1, strcpy(tws__S,",पंचांगp_S[1],"))==1)",t_S);
         ख_लिखो(fp_2,"%s%s%s%s%s%s\n",spc_S,"{ fprintf(stderr,",e_S,"Requested Xfont not found: %s\\n",e_S,",tws__S); }");
         commfl_पूर्णांक = 1;
        पूर्ण
        अन्यथा
        अणु
         अगर(म_भेद(d_S, "TXAL") == 0)
         अणु
          अगर(k_पूर्णांक != 2)
          अणु
           जाओ Lab_29000;
          पूर्ण
          ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetta",prt_S);
          commfl_पूर्णांक = 1;
         पूर्ण
         अन्यथा
         अणु
          अगर(म_भेद(d_S, "BG") == 0)
          अणु
           ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetbg",prt_S);
           commfl_पूर्णांक = 1;
          पूर्ण
          अन्यथा
          अणु
           अगर(म_भेद(d_S, "DRMD") == 0)
           अणु
            अगर(k_पूर्णांक != 1)
            अणु
             जाओ Lab_29000;
            पूर्ण
            ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixdrmde",prt_S);
            commfl_पूर्णांक = 1;
           पूर्ण
           अन्यथा
           अणु
            अगर(म_भेद(d_S, "DMOD") == 0)
            अणु
             अगर(k_पूर्णांक > 16)
             अणु
              ख_लिखो(मानक_त्रुटि,"%s\n","Too many arguments to DMOD (>16)");
              संकेत_पूर्णांक = 1;   /* निकास(1); */
              जाओ Lab_9999;
             पूर्ण
             अगर(k_पूर्णांक == 1)
             अणु
              ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixsetls(-",पंचांगp_S[1],", D__);",t_S);
             पूर्ण
             अन्यथा
             अणु
              अगर(k_पूर्णांक >= 2)
              अणु
                    म_नकल(b_S,"D__[0]=");
                    म_जोड़ो(b_S,पंचांगp_S[1]); म_जोड़ो(b_S,"; ");
               क्रम(i_पूर्णांक = 2; i_पूर्णांक <= k_पूर्णांक; i_पूर्णांक++)
               अणु
                     म_जोड़ो(b_S,"D__["); c='0'+i_पूर्णांक-1; म_जोड़न(b_S,&c,1);
                     म_जोड़ो(b_S,"]="); म_जोड़ो(b_S,पंचांगp_S[i_पूर्णांक]);
                     म_जोड़ो(b_S,"; ");
               पूर्ण
               ख_लिखो(fp_2,"%s%s%s\n",spc_S,b_S,t_S);
               ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetls((int)",STR_S(k_पूर्णांक),", D__);");
              पूर्ण
              अन्यथा
              अणु
               ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixsetls(0, D__);",t_S);
              पूर्ण
             पूर्ण
             grafflg_पूर्णांक = 1;
             commfl_पूर्णांक = 1;
            पूर्ण
           पूर्ण
          पूर्ण
         पूर्ण
        पूर्ण
       पूर्ण
      पूर्ण
     पूर्ण
    पूर्ण
   पूर्ण
  पूर्ण
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_22000:   /* "SAVEGIF ", "SAVEPS ", "SAVEEPS ", "SAVEPSL " (graphics) statements */
 /* save the picture पूर्णांकo the file */
 /* Syntax: SAVExxx filename$ */
 म_नकल(c_S,"0");
       अगर (a_S[4]=='P') अणु म_नकल(d_S, "0"); जाओ Lab_22001;पूर्ण
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: This SAVExxx feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
Lab_22001:
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
 stringx(b_S);
 vartyp(b_S, &typ_पूर्णांक);
 अगर(typ_पूर्णांक == 7)
 अणु
  म_लिखोmt(b_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(b_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s\n",spc_S,"ixdogif(",b_S,", ",d_S,", ",c_S,");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_22500:   /* "LOADGIF " (graphics) statement */
 /* load a picture from the file */
 /* Syntax: LOADGIF (x%, y%), filename$[, ipal%], bgcolor%] */
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
      अगर (b_S[0] != '(') जाओ Lab_22509;
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक < 2)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 म_नकल(b_S,पंचांगp_S[1]);
 म_नकल(d_S,पंचांगp_S[2]);
 stringx(d_S);
 quadrix(d_S);
      म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(k_पूर्णांक >= 3)
 अणु
  म_नकल(b_S,पंचांगp_S[3]);
  quadrix(b_S);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(b_S,"0");   /* शेष क्रम ipal */
 पूर्ण
 अगर(k_पूर्णांक >= 4)
 अणु
  म_नकल(f_S,पंचांगp_S[4]);
  quadrix(f_S);
 पूर्ण
 अन्यथा
 अणु
  म_नकल(f_S,"-1");   /* शेष क्रम bgcolor */
 पूर्ण
 म_नकल(temp_S[1],पंचांगp_S[1]);
 म_नकल(temp_S[2],पंचांगp_S[2]);

 tokenix(d_S, &n_पूर्णांक, "+", "");
 अगर(n_पूर्णांक > 1)
 अणु
  म_लिखोmt(d_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(d_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण

 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixldgif((int)(",temp_S[1],"),(int)(",temp_S[2],"),",d_S,",(int)(",b_S,"),(int)(",f_S,"));",t_S);
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
Lab_22509:
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_22600:   /* "GIFINFO " (graphics) statement */
 /* Obtain width, height and ncol of a GIF */
 /* Syntax: GIFINFO file$, width[, height[, ncol]] */
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक < 2)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 प्र_लिखो(prt_S,"%s%s%s",spc_S,पंचांगp_S[2]," = GInf__[0]; ");
 अगर(k_पूर्णांक >= 3)
 अणु
  प्र_लिखो(tws__S,"%s%s%s",prt_S,पंचांगp_S[3]," = GInf__[1]; ");
  म_नकल(prt_S,tws__S);
 पूर्ण
 अगर(k_पूर्णांक >= 4)
 अणु
  प्र_लिखो(tws__S,"%s%s%s",prt_S,पंचांगp_S[4]," = GInf__[2];");
  म_नकल(prt_S,tws__S);
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"gifinfo(",पंचांगp_S[1],", GInf__);",t_S);
 ख_लिखो(fp_2,"%s\n",prt_S);
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_22100:   /* "GET " OR "XGETGE " (graphics) statements */
 /* GET: get image in an array of pixels */
 /* Syntax: GET (x%, y%), array?, w%, h% */
 /* XGETGE: get winकरोw (win% >= 0) or the root winकरोw (win% < 0) geometry */
 /* Syntax: XGETGE (x%, y%), w%, h%, win% */
 पंचांगpfl_पूर्णांक = 0;
      अगर (a_S[0] == 'G') पंचांगpfl_पूर्णांक = 1;
 अगर(पंचांगpfl_पूर्णांक)
 अणु
  म_नकल(b_S,MID_S(a_S, 4, LMAX));
  gulix(b_S);
 पूर्ण
 अगर(! पंचांगpfl_पूर्णांक)
 अणु
  म_नकल(b_S,MID_S(a_S, 7, LMAX));
  gulix(b_S);
 पूर्ण
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
      अगर (b_S[0] != '(' || k_पूर्णांक != 4) अणु
 ख_लिखो(मानक_त्रुटि,"%s%s%s\n","ERROR in line",STR_S(nl_पूर्णांक)," probably wrong number of arguments:");
 ख_लिखो(मानक_त्रुटि,"%s\n",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
      पूर्ण
 म_नकल(b_S,पंचांगp_S[1]);
 म_नकल(d_S,पंचांगp_S[2]);
      म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 अगर(पंचांगpfl_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixpicget((int)(",पंचांगp_S[1],"),(int)(",पंचांगp_S[2],"),(int)(",पंचांगp_S[3],"),(int)(",पंचांगp_S[4],"),",d_S,");",t_S);
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixgetge(",पंचांगp_S[4],",&",पंचांगp_S[1],",&",पंचांगp_S[2],",&",d_S,",&",पंचांगp_S[3],");",t_S);
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_22200:   /* "PUT " and/or "XANIM "(graphics) statement */
 /* Put array of pixels on winकरोw: */
 /* Syntax: PUT (x%, y%), array?, w%, h%[, (xs%, ys%)[, sw%, sh%]] */
 /* Animate series of arrays: */
 /* Syntax: XANIM (x%, y%), array?, w%, h%[, (xs%, ys%)[, sw%, sh%]] */
 flag_पूर्णांक = 1;
      अगर (स_भेद(a_S,"XANIM ",6)==0) flag_पूर्णांक = 0;
 अगर(flag_पूर्णांक)
 अणु
  म_नकल(b_S,MID_S(a_S, 4, LMAX));
 पूर्ण
 अन्यथा
 अणु
  म_नकल(b_S,MID_S(a_S, 6, LMAX));
 पूर्ण
 gulix(b_S);
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
      अगर (b_S[0] != '(' || (k_पूर्णांक != 4 && k_पूर्णांक != 5 && k_पूर्णांक != 7)) अणु
 जाओ Lab_29500;   /* Error message on No of args and निकास */
      पूर्ण
 म_नकल(d_S,पंचांगp_S[2]);
 म_नकल(b_S,पंचांगp_S[1]);
      म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 म_नकल(temp_S[1],पंचांगp_S[1]);
 म_नकल(temp_S[2],पंचांगp_S[2]);
 अगर(k_पूर्णांक > 4)
 अणु
  म_नकल(b_S,पंचांगp_S[5]);
       म_नकल(b_S,पंचांगp_S[5]+1); b_S[म_माप(b_S)-1]='\0';
  tokenix(b_S, &n_पूर्णांक, ",", "");
  अगर(n_पूर्णांक != 2)
  अणु
   /* RETURN */
   दीर्घ_लाँघ(j__buf[--j__lev],1);
  पूर्ण
 पूर्ण
 अगर(k_पूर्णांक == 5)
 अणु
  प्र_लिखो(पंचांगp_S[6],"%s%s%s",पंचांगp_S[3],"-",पंचांगp_S[1]);
  प्र_लिखो(पंचांगp_S[7],"%s%s%s",पंचांगp_S[4],"-",पंचांगp_S[2]);
 पूर्ण
 अगर(k_पूर्णांक == 4)
 अणु
  म_नकल(पंचांगp_S[1],"0");
  म_नकल(पंचांगp_S[2],"0");
  म_नकल(पंचांगp_S[6],पंचांगp_S[3]);
  म_नकल(पंचांगp_S[7],पंचांगp_S[4]);
 पूर्ण
 प्र_लिखो(prt_S,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s","((int)(",temp_S[1],"),(int)(",temp_S[2],"),",d_S,",(int)(",पंचांगp_S[3],"),(int)(",पंचांगp_S[4],"),(int)(",पंचांगp_S[1],"),(int)(",पंचांगp_S[2],"),(int)(",पंचांगp_S[6],"),(int)(",पंचांगp_S[7],"));");
 अगर(flag_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixpicput",prt_S,t_S);
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixpicanim",prt_S,t_S);
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23000:   /* "XUPDATE" (graphics) statement */
 /* update (refresh) the X-winकरोw */
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixupdwi(0); ",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23200:   /* "XCLS" (graphics) statement */
 /* Clear the current winकरोw according to the current background or */
 /* change background color and then clear. */
 म_नकल(b_S,MID_S(a_S, 6, LMAX));
 gulix(b_S);
 quadrix(b_S);
 अगर(म_भेद(b_S, "") == 0)
 अणु
  ख_लिखो(fp_2,"%s%s%s\n",spc_S,"ixclrwi(); ",t_S);
 पूर्ण
 अन्यथा
 अणु
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixsetbg((int)",b_S,"); ixclrwi();",t_S);
 पूर्ण
 commfl_पूर्णांक = 1;
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23300:   /* "GETCOL " (graphics) statement */
 /* get color components */
 /* अ_लोol index%, r%, g%, b%  Input: index%, Output r%,g%,b%<=255 */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक == 4)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s%s%s%s",पंचांगp_S[1],"),&",पंचांगp_S[2],",&",पंचांगp_S[3],",&",पंचांगp_S[4]);
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixgetcol((int)(",prt_S,");",t_S);
 पूर्ण
 अन्यथा
 अणु
  जाओ Lab_29500;   /* Error message on No of args and निकास */
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23400:   /* "XSELWI" and/or "XCLOSE" and/or "XCURSOR" and/or "XCLOSEDS" */
 /* (graphics) statement */
 /* select and उठाओ winकरोw to which subseq. output is sent D=current */
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
 quadrix(b_S);
 अगर(म_भेद(b_S, "") == 0)
 अणु
  म_नकल(prt_S,"(-1); ");
 पूर्ण
 अन्यथा
 अणु
  प्र_लिखो(prt_S,"%s%s%s","((int)(",b_S,")); ");
 पूर्ण
       अगर ( स_भेद(a_S,"XSELWI",6)==0 ) अणु
 म_नकल(d_S,"ixselwi");
       पूर्ण अन्यथा अणु
        अगर ( स_भेद(a_S,"XCLOSEDS",8)==0 ) अणु
 म_नकल(d_S,"ixclsds");
 म_नकल(prt_S,"(); ");
        पूर्ण अन्यथा अणु
         अगर ( स_भेद(a_S,"XCLOSE",6)==0 ) अणु
 म_नकल(d_S,"ixclswi");
         पूर्ण अन्यथा अणु
 म_नकल(d_S,"ixcursor");
         पूर्ण
        पूर्ण
       पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,d_S,prt_S,t_S);
 commfl_पूर्णांक = 1;
 grafflg_पूर्णांक = 1;
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23500:   /* "PALETTE " (graphics) statement */
 /* palette index,#hex_color   or */
 /* palette index,r,g,b  where r,g,b<=255 */
 म_नकल(b_S,MID_S(a_S, 9, LMAX));
 quadrix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक == 4)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s%s%s%s",पंचांगp_S[1],"),",पंचांगp_S[2],",",पंचांगp_S[3],",",पंचांगp_S[4]);
  ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixsetco((int)(",prt_S,");",t_S);
 पूर्ण
 अन्यथा
 अणु
  जाओ Lab_29500;   /* Error message on No of args and निकास */
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23600:   /* "XTITLE " (graphics) statement */
 /* xtitle title$[, win%]  Set winकरोw title */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 म_नकल(b_S,पंचांगp_S[1]);
 अगर(n_पूर्णांक == 1)
 अणु
  म_नकल(d_S,"-1");
 पूर्ण
 अन्यथा
 अणु
  अगर(n_पूर्णांक == 2)
  अणु
   प्र_लिखो(d_S,"%s%s%s","(int)(",पंचांगp_S[2],")");
  पूर्ण
  अन्यथा
  अणु
   जाओ Lab_29500;   /* Error message on No of args and निकास */
  पूर्ण
 पूर्ण
 vartyp(b_S, &typ_पूर्णांक);
 अगर(typ_पूर्णांक == 7)
 अणु
  म_लिखोmt(b_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(b_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"ixtitle(",b_S,",",d_S,");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23700:   /* "XREQST " (graphics) statement */
 /* xreqst (x%, y%), test$, status% - request string at the postition */
 /* and वापस status 0 = <Esc>, 1 = <Return> */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 3)
 अणु
  जाओ Lab_29500;   /* Error message on No of args and निकास */
 पूर्ण
 म_नकल(temp_S[2],पंचांगp_S[2]);
       म_नकल(d_S,पंचांगp_S[1]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(d_S, &n_पूर्णांक, ",", "");
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s\n",spc_S,पंचांगp_S[3]," = ixreqst((int)(",पंचांगp_S[1],"),(int)(",पंचांगp_S[2],"),",temp_S[2],");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23800:   /* "XCLIP " (graphics) statement */
 /* xclip (x1%, y1%)-(x2%, y2%), win% - set clipping rectangle in */
 /* the winकरोw win% */
 म_नकल(b_S,MID_S(a_S, 6, LMAX));
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, "-", ",");
 अगर(k_पूर्णांक != 3)
 अणु
  जाओ Lab_29500;   /* Error message on No of args and निकास */
 पूर्ण
       म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
       म_नकल(d_S,पंचांगp_S[2]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 म_नकल(temp_S[1],पंचांगp_S[1]);
 म_नकल(temp_S[2],पंचांगp_S[2]);
 tokenix(d_S, &n_पूर्णांक, ",", "");
 म_नकल(temp_S[3],पंचांगp_S[1]);
 म_नकल(temp_S[4],पंचांगp_S[2]);
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixclip1((int)(",पंचांगp_S[3],"),(int)(",temp_S[1],"),(int)(",temp_S[2],"),(int)(",temp_S[3],"),(int)(",temp_S[4],"));",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23900:   /* "XNOCLI " (graphics) statement */
 /* xnocli win% - set no clipping क्रम win% */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"ixnocli((int)(",b_S,"));",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_23950:   /* "XWARP " (graphics) statement */
 /* xwarp (x%, y%) - move graphical cursor (poपूर्णांकer) to the position */
 /* (x%, y%) in the current winकरोw */
 म_नकल(b_S,MID_S(a_S, 6, LMAX));
 quadrix(b_S);
       b_S[0]=' '; b_S[strlen(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  जाओ Lab_29500;   /* Error message on No of args and निकास */
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"ixwarp((int)(",पंचांगp_S[1],"),(int)(",पंचांगp_S[2],"));",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_24000:   /* "MARKER " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 gulix(b_S);
       अगर (b_S[0] != '(') जाओ Lab_24009;
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक >= 2)
 अणु
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetmc(",पंचांगp_S[2],");");
 पूर्ण
       म_नकल(b_S,पंचांगp_S[1]+1); b_S[म_माप(b_S)-1]='\0';
 tokenix(b_S, &n_पूर्णांक, ",", "");
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"xy__pos[0][0]=",पंचांगp_S[1],"; xy__pos[0][1]=",पंचांगp_S[2],";",t_S);
 ख_लिखो(fp_2,"%s%s\n",spc_S,"ixmarke(1,xy__pos);");
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 grafflg_पूर्णांक = 1;
 commfl_पूर्णांक = 1;
Lab_24009:
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_24500:   /* "PLINE " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 tokenix(b_S, &n_पूर्णांक, ",", "");
 quadrix(पंचांगp_S[1]);
 quadrix(पंचांगp_S[2]);
 अगर(n_पूर्णांक > 2)
 अणु
  quadrix(पंचांगp_S[3]);
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetlc(",पंचांगp_S[3],");");
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"ixline(",पंचांगp_S[1],",",पंचांगp_S[2],");",t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_25000:   /* "PMARKER " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 9, LMAX));
 tokenix(b_S, &n_पूर्णांक, ",", "");
 quadrix(पंचांगp_S[1]);
 quadrix(पंचांगp_S[2]);
 अगर(n_पूर्णांक > 2)
 अणु
  quadrix(पंचांगp_S[3]);
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetmc(",पंचांगp_S[3],");");
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"ixmarke(",पंचांगp_S[1],",",पंचांगp_S[2],");",t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_25500:   /* "XTEXT " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 म_नकल(b_S,पंचांगp_S[2]);   /* CALL stringix(d$) */
 म_नकल(temp_S[5],पंचांगp_S[4]);
 म_नकल(temp_S[4],पंचांगp_S[3]);
       म_नकल(d_S,पंचांगp_S[1]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(d_S, &n_पूर्णांक, ",", "");
 म_नकल(temp_S[2],पंचांगp_S[2]);
 म_नकल(temp_S[1],पंचांगp_S[1]);
 अगर(k_पूर्णांक  == 2)
 अणु
  म_नकल(temp_S[4],"0.");
 पूर्ण
 अगर(k_पूर्णांक <= 3)
 अणु
  म_नकल(temp_S[5],"1.");
 पूर्ण
 vartyp(b_S, &typ_पूर्णांक);
 अगर(typ_पूर्णांक == 7)
 अणु
  म_लिखोmt(b_S, क्रमmt_S, prt_S, &nflag_पूर्णांक);
  प्र_लिखो(prtf_S,"%s%s%s%s%s%s","sprintf(tws__S,",CHR_S(34),क्रमmt_S,CHR_S(34),prt_S,");");
  ख_लिखो(fp_2,"%s%s\n",spc_S,prtf_S);
  म_नकल(b_S,"tws__S");
  twsflg_पूर्णांक = 1;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,"ixtext(0,(int)(",temp_S[1],"),(int)(",temp_S[2],"),(float)(",temp_S[4],"),(float)(",temp_S[5],"),",b_S,");",t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_26000:   /* "FAREA " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 quadrix(b_S);
 tokenix(b_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक > 2)
 अणु
  quadrix(पंचांगp_S[3]);
  ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetfc(",पंचांगp_S[3],");");
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n",spc_S,"ixflare(",पंचांगp_S[1],",",पंचांगp_S[2],");",t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_26500:   /* "CIRCLE " (graphics) statement */
 म_नकल(b_S,MID_S(a_S, 8, LMAX));
 quadrix(b_S);
       पंचांगp_S[3][0] = '\0';
       पंचांगp_S[4][0] = '\0';
       पंचांगp_S[5][0] = '\0';
       पंचांगp_S[6][0] = '\0';
 tokenix(b_S, &k_पूर्णांक, ",", "");
 म_नकल(पंचांगp_S[0],पंचांगp_S[2]);
       म_नकल(d_S,पंचांगp_S[1]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(d_S, &n_पूर्णांक, ",", "");
 प्र_लिखो(prt_S,"%s%s%s%s%s%s","ixcirc((int)(",पंचांगp_S[1],"),(int)(",पंचांगp_S[2],"),(int)(",पंचांगp_S[0]);
 flag_पूर्णांक = 0;
       अगर (पंचांगp_S[3][0]!='\0')
       अणु
 ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,"ixsetlc(",पंचांगp_S[3],");");
 flag_पूर्णांक = 1;
       पूर्ण
 अगर(! flag_पूर्णांक && colorfl_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixsetlc(1);");
 पूर्ण
       अगर (पंचांगp_S[4][0]=='\0')
       अणु
 म_नकल(पंचांगp_S[4],"0.");
       पूर्ण
       अगर (पंचांगp_S[5][0]=='\0')
       अणु
 म_नकल(पंचांगp_S[5],"6.2832");
       पूर्ण
       अगर (पंचांगp_S[6][0]=='\0')
       अणु
 म_नकल(पंचांगp_S[6],"1.");
       पूर्ण
 प्र_लिखो(tws__S,"%s%s%s%s%s%s%s%s",prt_S,"),",पंचांगp_S[4],",",पंचांगp_S[5],",",पंचांगp_S[6],");");
 म_नकल(prt_S,tws__S);
 ख_लिखो(fp_2,"%s%s%s\n",spc_S,prt_S,t_S);
 अगर(updateff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s%s\n",spc_S,"ixupdwi(0);");
 पूर्ण
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_27000:   /* "GCGET " (graphics) statement */
 /* Request mouse position: gcget (x%, y%), answ%[, typ%[, mode%]] */
 म_नकल(b_S,MID_S(a_S, 7, LMAX));
 gulix(b_S);
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक < 2 || k_पूर्णांक > 4)
 अणु
  जाओ Lab_29000;
 पूर्ण
 अगर(k_पूर्णांक < 3)   /* Default ityp */
 अणु
  म_नकल(पंचांगp_S[3],"0");
 पूर्ण
 अगर(k_पूर्णांक < 4)   /* Default mode */
 अणु
  म_नकल(पंचांगp_S[4],"1");
 पूर्ण
 म_नकल(पंचांगp_S[0],पंचांगp_S[2]);
 म_नकल(d_S,पंचांगp_S[1]);
       म_नकल(d_S,पंचांगp_S[1]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(d_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  जाओ Lab_29000;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,पंचांगp_S[0],"=ixreqlo((int)",पंचांगp_S[4],",(int)",पंचांगp_S[3],",&",पंचांगp_S[1],",&",पंचांगp_S[2],");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_27500:   /* "XPOINTER " (graphics) statement */
 /* Request mouse position:xpoपूर्णांकer (x%, y%), win%, answ%[, typ%[, mode%]] */
 म_नकल(b_S,MID_S(a_S, 10, LMAX));
 gulix(b_S);
 quadrix(b_S);
 tokenix(b_S, &k_पूर्णांक, ",", "");
 अगर(k_पूर्णांक < 3 || k_पूर्णांक > 5)
 अणु
  जाओ Lab_29000;
 पूर्ण
 अगर(k_पूर्णांक < 4)   /* Default ityp */
 अणु
  म_नकल(पंचांगp_S[4],"1");
 पूर्ण
 अगर(k_पूर्णांक < 5)   /* Default mode */
 अणु
  म_नकल(पंचांगp_S[5],"1");
 पूर्ण
 म_नकल(पंचांगp_S[0],पंचांगp_S[2]);
 म_नकल(d_S,पंचांगp_S[1]);
       म_नकल(d_S,पंचांगp_S[1]+1); d_S[म_माप(d_S)-1]='\0';
 tokenix(d_S, &n_पूर्णांक, ",", "");
 अगर(n_पूर्णांक != 2)
 अणु
  जाओ Lab_29000;
 पूर्ण
 ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",spc_S,पंचांगp_S[3],"=ixwptrq(&",पंचांगp_S[1],",&",पंचांगp_S[2],",&",पंचांगp_S[0],",(int)",पंचांगp_S[4],",(int)",पंचांगp_S[5],");",t_S);
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_28000:   /* "XROT " (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: XROT feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_28100:   /* "XTRAN " (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: XTRAN feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_28200:   /* "XSCAL " (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: XSCAL feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_28300:   /* "MRESET" (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: MRESET feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_28400:   /* "XBUF" (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: XBUF feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_28500:   /* "XRMBUF" (graphics) statement */
 ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: XRMBUF feature available in pay version only.",nl_पूर्णांक,":",line_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_29000:   /* Anything अन्यथा not covered yet */
 अगर(commfl_पूर्णांक == 1)
 अणु
  /* RETURN */
  दीर्घ_लाँघ(j__buf[--j__lev],1);
 पूर्ण
 ख_लिखो(मानक_त्रुटि,"%s%s%s%s\n","ERROR in line",STR_S(nl_पूर्णांक),": ",line_S);
 ख_लिखो(मानक_त्रुटि,"%s%s%s%s\n","'",a_S,"'"," cannot be translated ! Please see the manual.");
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;
 commfl_पूर्णांक = 1;
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_29500:   /* Error message on number of arguments */
 ख_लिखो(मानक_त्रुटि,"%s%s%s\n","ERROR on line",STR_S(nl_पूर्णांक)," probably wrong number of arguments in:");
 ख_लिखो(मानक_त्रुटि,"%s\n",a_S);
 संकेत_पूर्णांक = 1;   /* निकास(1); */
 जाओ Lab_9999;


Lab_30000:   /* क्रम nicer 'REM' placements */
 /* input: lremfl%, itok%, ntok% */
 अगर(lremfl_पूर्णांक == 1 && itok_पूर्णांक == 1)
 अणु
  प्र_लिखो(tws__S,"%s%s%s%s",SPACE_S(3),"/* ",t_S," */");
  म_नकल(t_S,tws__S);
  lremfl_पूर्णांक = 0;
 पूर्ण
 अन्यथा
 अणु
  म_नकल(t_S,"");
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_31000:   /* Called beक्रमe every sub (and MAIN) makes a list of possibly used */
 /*   arrays "name(" which are converted to C क्रमmat in 28000 */
 /* Inमाला_दो: */
 /* 1) list of shared     vars. & arrs. shtok$(isub%,i%), nsthok%(isub%) */
 /* 2) list of used local vars. & arrs. vlist$(isub%,i%), nvlist%(isub%) */
 /* 3) list of SUB arguments (NOT YET ! arrays cannot be passed yet) */
 /* Outमाला_दो: */
 /* aपंचांगp$(), naपंचांगp% */
 naपंचांगp_पूर्णांक = 0;   /* Extracting all array names */
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nshtok_पूर्णांक[isub_पूर्णांक]; i_पूर्णांक++)
 अणु
  म_नकल(z_S,shtok_S[isub_पूर्णांक][i_पूर्णांक]);
  अगर(म_भेद(RIGHT_S(z_S, 1), ")") == 0)
  अणु
   naपंचांगp_पूर्णांक = naपंचांगp_पूर्णांक + 1;
   म_नकल(aपंचांगp_S[naपंचांगp_पूर्णांक],LEFT_S(z_S, LEN(z_S) - 1));
  पूर्ण
 पूर्ण
 /*   Not needed since DIM fills dynamycally arrays of this class */
 /*   FOR i% = 1 TO nvlist%(isub%) */
 /*    z$ = vlist$(isub%, i%) */
 /*    IF RIGHT$(z$, 1) = ")" THEN */
 /*      naपंचांगp% = naपंचांगp% + 1 */
 /*      aपंचांगp$(naपंचांगp%) = LEFT$(z$, LEN(z$) - 1) */
 /*    END IF */
 /*   NEXT i% */
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_40000:   /* postprocessing i% -> i_पूर्णांक, i& -> i_दीर्घ, c$ -> c_S */
 /* and array brackets (except in declarations which is करोne). */
 /* Also handles MID$(a$,i%) -> MID_S(a_S,i_पूर्णांक,LMAX) */
 अगर((fp_3 = ख_खोलो(म_नकल(fn3__S,outf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn3__S); निकास(1);
 पूर्ण
 अगर((fp_2 = ख_खोलो(म_नकल(fn2__S,क्षणिक_ख_S), "w")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn2__S); निकास(1);
 पूर्ण
 /* GOSUB Lab_41000 */    /* Writing out headers and global declarations */
 अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_41000;
 म_नकल(e_S,CHR_S(34));
 togfl_पूर्णांक = 0;
 जबतक(! eof(fp_3))
 अणु
  ख_माला_लो(line_S, LMAX, fp_3);
  line_S[म_माप(line_S) - 1] = '\0';
       अगर (togfl_पूर्णांक == 1) जाओ Lab_40001;
       अगर (म_भेदन(line_S,"/* Trans",8) == 0)
       अणु अगर (म_भेदन(line_S,"/* Translates of used QB's intrinsic functions: */",50) == 0)
         togfl_पूर्णांक = 1; जाओ Lab_40001; पूर्ण
       अगर (cflag_पूर्णांक==1 && line_S[0] == 'C')
       अणु
        अगर (line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t') line_S[0]=' ';
       पूर्ण
       अन्यथा
       अणु
  varpost(line_S);   /* Postprocessing variable names */
       पूर्ण
Lab_40001:
  ख_लिखो(fp_2,"%s\n",line_S);
 पूर्ण
 ख_बंद(fp_3);
 ख_बंद(fp_2);
 प्र_लिखो(tws__S,"%s%s%s%s","mv -f ",क्षणिक_ख_S," ",outf_S);
 प्रणाली(tws__S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_41000:   /* Writes out headers: #समावेश files and global declarations */
 /* beक्रमe the 'main(...)' */
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%s% .7G \n","Postprocess 41000. Headers and global declarations: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 lspac_पूर्णांक = 0;   /* dirty... */
 isub_पूर्णांक = 0;
 statfl_पूर्णांक[isub_पूर्णांक] = 1;
 म_नकल(spc_S,SPACE_S(lspac_पूर्णांक));
 ख_लिखो(fp_2,"%s\n","#include <stdio.h>");
 ख_लिखो(fp_2,"%s\n","#include <string.h>");
 ख_लिखो(fp_2,"%s\n","#include <stddef.h>");
 ख_लिखो(fp_2,"%s\n","#include <stdlib.h>");
 अगर(retrnfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <setjmp.h>");
 पूर्ण
 अगर(समयfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <time.h>");
 पूर्ण
 अगर(sysसमयfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <sys/time.h>");
 पूर्ण
 अगर(unistdfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <unistd.h>");
 पूर्ण
 अगर(mathfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <math.h>");
 पूर्ण
 अगर(grafflg_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <X11/cursorfont.h>");
 पूर्ण
 ख_लिखो(fp_2,"%s\n","#include <ctype.h>");
 अगर(inkeyff_पूर्णांक == 1 && tflg_पूर्णांक == 0)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <fcntl.h>");
  ख_लिखो(fp_2,"%s\n","#include <sys/ioctl.h>");
  ख_लिखो(fp_2,"%s\n","#include <termio.h>");
  ख_लिखो(fp_2,"%s\n","#include <termios.h>");
  अगर(Iflag_पूर्णांक && ! छोड़ोfl_पूर्णांक)
  अणु
   ख_लिखो(fp_2,"%s\n","#include <sys/time.h>");
   ख_लिखो(fp_2,"%s\n","#include <sys/types.h>");
  पूर्ण
 पूर्ण
 अगर(छोड़ोfl_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <sys/types.h>");
  ख_लिखो(fp_2,"%s\n","#include <sys/time.h>");
 पूर्ण
 अगर(lofff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","#include <sys/stat.h>");
  अगर(! छोड़ोfl_पूर्णांक)
  अणु
   ख_लिखो(fp_2,"%s\n","#include <sys/types.h>");
  पूर्ण
 पूर्ण
 ख_लिखो(fp_2,"\n");
 ख_लिखो(fp_2,"%s\n","/* This file was generated by QuasiBASIC to C translator */");
 ख_लिखो(fp_2,"%s%s%s\n","/* qb2c  ver.",Version_S,"                            */");
 ख_लिखो(fp_2,"\n");
 /* Global स्थिरants: */
 /* PRINT #2, "#define LMAX 32767" */
 ख_लिखो(fp_2,"%s%s%s\n","#define LMAX",STR_S(Lmax_पूर्णांक)," /* Max strig length */");   /* Max. in/out line length (max 32767) */
 अगर(minff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#define MIN(a,b) ((a) < (b) ? (a) : (b))");
 पूर्ण
 अगर(maxff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","#define MAX(a,b) ((a) > (b) ? (a) : (b))");
 पूर्ण
 अगर(ncnst_पूर्णांक > 0)
 अणु
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ncnst_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(prtf_S,cnst_S[i_पूर्णांक]);
   varpost(prtf_S);
   ख_लिखो(fp_2,"%s\n",prtf_S);
  पूर्ण
 पूर्ण
 अगर(ncg_पूर्णांक > 0)
 अणु
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ncg_पूर्णांक; i_पूर्णांक++)
  अणु
   ख_लिखो(fp_2,"%s\n",cg_S[i_पूर्णांक]);
  पूर्ण
 पूर्ण
 ख_लिखो(fp_2,"\n");
 ख_लिखो(fp_2,"%s\n","/* Function declarations */");
 /*   Intrinsic QB functions: */
 अगर(extrnfl_पूर्णांक == 1)
 अणु
  qbfdecl();
 पूर्ण
 /*   User SUBs and FUNCTIONs: */
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nfuncs_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(b_S,funames_S[i_पूर्णांक]);
  vartyp(b_S, &typ_पूर्णांक);
  varpost(b_S);
  म_नकल(z_S,"");
  अगर(typ_पूर्णांक == 5)
  अणु
   म_नकल(z_S,"*");
  पूर्ण
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s\n","extern ",atyp_S[typ_पूर्णांक],z_S,b_S,"(",funtyl_S[i_पूर्णांक],");");
 पूर्ण
 ख_लिखो(fp_2,"\n");
 पंचांगpfl_पूर्णांक = 0;
 ख_लिखो(fp_2,"%s\n","/* Shared variables and arrays declarations */");
 अगर(retrnfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s% .7G %s\n","static jmp_buf j__buf[",(द्विगुन)(GMAX),"];");
  ख_लिखो(fp_2,"%s\n","static int  j__lev=0;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 /*   DATA block: */
 अगर(datalin_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s%s%s\n","static int  data__c_int=0, data__M_int=",STR_S(datacnt_पूर्णांक),";");
  ख_लिखो(fp_2,"%s\n","static char *DATA__S[]={  /* DATA block */");
       data_S[datalin_पूर्णांक][म_माप(data_S[datalin_पूर्णांक])-1]='\0';
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= datalin_पूर्णांक; i_पूर्णांक++)
  अणु
   ख_लिखो(fp_2,"%s\n",data_S[i_पूर्णांक]);
  पूर्ण
  ख_लिखो(fp_2,"%s\n","};");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(grafflg_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static short xy__pos[3][2], D__[16], GInf__[3];");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(inkeyff_पूर्णांक == 1 && tflg_पूर्णांक == 0)
 अणु
  ख_लिखो(fp_2,"%s\n","static struct termio term_orig;");
  ख_लिखो(fp_2,"%s\n","static int  kbdflgs;");
  ख_लिखो(fp_2,"%s\n","static char keyb__S[30][9], keyq__S[30][4];");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(छोड़ोfl_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","static struct timeval t__;");
 पूर्ण
 अगर(lofff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","static struct stat stbuf;");
 पूर्ण
 /* Declaring SHARED arrays in MAIN */
 अगर(alis_पूर्णांक > 0)
 अणु
  क्रम(i_पूर्णांक = 1; i_पूर्णांक <= alis_पूर्णांक; i_पूर्णांक++)
  अणु
   म_नकल(d_S,darr_S[alist_पूर्णांक[i_पूर्णांक]]);
   vartyp(d_S, &typ_पूर्णांक);
   brackets(d_S);
   अगर(dynaf__पूर्णांक[alist_पूर्णांक[i_पूर्णांक]])
   अणु
    ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","qb2c: DIM DYNAMIC feature available in pay version only.",nl_पूर्णांक,":",line_S);
    संकेत_पूर्णांक = 1;   /* निकास(1); */
    जाओ Lab_9999;
   पूर्ण
   अन्यथा
   अणु
    /* Static arrays */
    प्र_लिखो(prtf_S,"%s%s%s",atyp_S[typ_पूर्णांक - 10],d_S,";");
   पूर्ण
   varpost(prtf_S);
   ख_लिखो(fp_2,"%s%s\n","static ",prtf_S);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
 पूर्ण
 अगर(अक्षरtfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static char   w__S[16][LMAX];");
  ख_लिखो(fp_2,"%s\n","static int    j__S = 0, j__Stmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(पूर्णांकtfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static int    w__s[16];");
  ख_लिखो(fp_2,"%s\n","static int    i__s = 0, i__stmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(दीर्घtfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static long   w__l[16];");
  ख_लिखो(fp_2,"%s\n","static int    i__l = 0, i__ltmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(भग्नtfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static float  w__f[16];");
  ख_लिखो(fp_2,"%s\n","static int    i__f = 0, i__ftmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(vdblff_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static double w__d[16];");
  ख_लिखो(fp_2,"%s\n","static int    i__d = 0, i__dtmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(byttfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static unsigned char w__b[16];");
  ख_लिखो(fp_2,"%s\n","static int    i__b = 0, i__btmp;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(sigअगरf_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"%s\n","static int  sig__i[16];");
  ख_लिखो(fp_2,"%s\n","static int  j__sig = 0;");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(twsflg_पूर्णांक == 1)
 अणु
  पंचांगpfl_पूर्णांक = 1;
  ख_लिखो(fp_2,"%s\n","static char tws__S[LMAX];");
 पूर्ण
 अगर(nSHRDtk_पूर्णांक > 0)
 अणु
  म_नकल(पूर्णांक_S," int  ");
  म_नकल(भग्न_S," float ");
  अगर(दीर्घflg_पूर्णांक == 1)
  अणु
   म_नकल(पूर्णांक_S," long ");
  पूर्ण
  अगर(करोblflg_पूर्णांक == 1)
  अणु
   म_नकल(भग्न_S," double ");
  पूर्ण
  अगर(म_भेद(sपूर्णांक_S, "") != 0)
  अणु
   i__sपंचांगp = ++i__s % 16;
   w__s[(i__sपंचांगp + 0 ) % 16] = 3;
   i__s = (i__s + 0 ) % 16;
   declarix(पूर्णांक_S, sपूर्णांक_S, &w__s[(i__sपंचांगp+0)%16]);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
  अगर(म_भेद(srea_S, "") != 0)
  अणु
   i__sपंचांगp = ++i__s % 16;
   w__s[(i__sपंचांगp + 0 ) % 16] = 0;
   i__s = (i__s + 0 ) % 16;
   declarix(भग्न_S, srea_S, &w__s[(i__sपंचांगp+0)%16]);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
  अगर(म_भेद(ssss_S, "") != 0)
  अणु
   i__sपंचांगp = ++i__s % 16;
   w__s[(i__sपंचांगp + 0 ) % 16] = 1;
   i__s = (i__s + 0 ) % 16;
   declarix(" char ", ssss_S, &w__s[(i__sपंचांगp+0)%16]);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
  अगर(म_भेद(slin_S, "") != 0)
  अणु
   i__sपंचांगp = ++i__s % 16;
   w__s[(i__sपंचांगp + 0 ) % 16] = 4;
   i__s = (i__s + 0 ) % 16;
   declarix(" long ", slin_S, &w__s[(i__sपंचांगp+0)%16]);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
  अगर(म_भेद(sdbl_S, "") != 0)
  अणु
   i__sपंचांगp = ++i__s % 16;
   w__s[(i__sपंचांगp + 0 ) % 16] = 0;
   i__s = (i__s + 0 ) % 16;
   declarix(" double ", sdbl_S, &w__s[(i__sपंचांगp+0)%16]);
   पंचांगpfl_पूर्णांक = 1;
  पूर्ण
 पूर्ण
 ख_लिखो(fp_2,"\n");
 ख_लिखो(fp_2,"%s\n","/* Open files pointers */");
 अगर(nखोलो_पूर्णांक > 0)
 अणु
  ख_लिखो(fp_2,"%s%s%s\n","FILE ",fff_S,";");
  ख_लिखो(fp_2,"%s%s%s\n","char ",fn_S,";");
  पंचांगpfl_पूर्णांक = 1;
 पूर्ण
 अगर(पंचांगpfl_पूर्णांक == 1)
 अणु
  ख_लिखो(fp_2,"\n");
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);



Lab_45000:   /* Adding poपूर्णांकer prefixes '*' to variables in SUBs (postprocess) */
 /* except in FUNCTIONs */
 /* Also handles Labels to override HP compiler problem, 45050 */
 /* Must be करोne *beक्रमe* 40000 post. */
 /* Does not change comment lines ???? */
 /* ग_लिखोs out initializations in MAIN that appear after declarations */
 अगर(debug_पूर्णांक)
 अणु
  म_लिखो("%s% .7G \n","Postprocess 45000. Adding pointer prefixes '*' etc: ",(द्विगुन)(TIMER() - T0));
 पूर्ण
 isub_पूर्णांक = 0;
 lbfl_पूर्णांक = 0;
 nl_पूर्णांक = 0;
 पंचांगpfl_पूर्णांक = 0;
 अगर((fp_2 = ख_खोलो(म_नकल(fn2__S,outf_S), "r")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn2__S); निकास(1);
 पूर्ण
 अगर((fp_3 = ख_खोलो(म_नकल(fn3__S,क्षणिक_ख_S), "w")) == शून्य)
 अणु
  ख_लिखो(मानक_त्रुटि,"Can't open file %s\n",fn3__S); निकास(1);
 पूर्ण
 जबतक(! eof(fp_2))
 अणु
  ख_माला_लो(line_S, LMAX, fp_2);
  line_S[म_माप(line_S) - 1] = '\0';
  nl_पूर्णांक = nl_पूर्णांक + 1;
  अगर(पंचांगpfl_पूर्णांक == 1)
  अणु
   जाओ Lab_45010;
  पूर्ण
  /* GOSUB Lab_45050 */    /* Handle HP Labels problem */
  अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_45050;
  lleng_पूर्णांक = LEN(line_S);
  togfl_पूर्णांक = 0;
  अगर(lleng_पूर्णांक <= 2)
  अणु
   जाओ Lab_45010;
  पूर्ण
  म_नकल(b_S,LEFT_S(line_S, 18));
  अगर(म_भेद(b_S, "/*- User SUBs--End") == 0)
  अणु
   पंचांगpfl_पूर्णांक = 1;
   जाओ Lab_45010;
  पूर्ण
  अगर(म_भेद(b_S, "/*- User SUB--Star") == 0)
  अणु
   isub_पूर्णांक = isub_पूर्णांक + 1;
   ख_लिखो(fp_3,"%s\n",line_S);
   ख_माला_लो(line_S, LMAX, fp_2);
   line_S[म_माप(line_S) - 1] = '\0';
   ख_लिखो(fp_3,"%s\n",line_S);
   जाओ Lab_45015;
  पूर्ण
  अगर(funcfl_पूर्णांक[isub_पूर्णांक] == 1)
  अणु
   जाओ Lab_45010;
  पूर्ण
  अगर(isub_पूर्णांक > 0)
  अणु
   /*     Processing will pass here only क्रम all non-empty lines within a SUB */
        अगर (cflag_पूर्णांक==1 && line_S[0] == 'C') अणु
         अगर(line_S[1]==' ' || line_S[1]=='\0' || line_S[1]=='\t') जाओ Lab_45010;
        पूर्ण
   अगर(nsubvar_पूर्णांक[isub_पूर्णांक] > 0)
   अणु
    क्रम(i_पूर्णांक = 1; i_पूर्णांक <= nsubvar_पूर्णांक[isub_पूर्णांक]; i_पूर्णांक++)
    अणु
     म_नकल(z_S,subvar_S[isub_पूर्णांक][i_पूर्णांक]);
     vartyp(z_S, &typ_पूर्णांक);
     अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
     अणु
      जाओ Lab_45005;
     पूर्ण
     j_पूर्णांक = 0;
     lz_पूर्णांक = LEN(z_S);
     togfl_पूर्णांक = 0;
     flag_पूर्णांक = 0;
     leng_पूर्णांक = LEN(line_S);
     g_पूर्णांक = 0;
Lab_45001:
     flag_पूर्णांक = 0;
     जबतक((! flag_पूर्णांक) && j_पूर्णांक <= leng_पूर्णांक)
     अणु
           अगर (line_S[j_पूर्णांक] == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
           अगर (!togfl_पूर्णांक) अणु
            अगर (स_भेद(&line_S[j_पूर्णांक], "/* ", 3) == 0) flag_पूर्णांक=1;
            अगर (स_भेद(&line_S[j_पूर्णांक], z_S, lz_पूर्णांक) == 0) flag_पूर्णांक = 2;
           पूर्ण
      j_पूर्णांक = j_पूर्णांक + 1;
     पूर्ण
     अगर(flag_पूर्णांक == 1)
     अणु
      जाओ Lab_45005;
     पूर्ण
     अगर(flag_पूर्णांक == 2)
     अणु
           c = line_S[j_पूर्णांक + lz_पूर्णांक - 1];
           अगर (c==' ' || c==',' || c==')' || c==';' || c==']') अणु
      अगर(j_पूर्णांक > 1)
      अणु
       g_पूर्णांक = ASC(MID_S(line_S, j_पूर्णांक - 1, 1));
      पूर्ण
      अगर(j_पूर्णांक == 1 || ! (g_पूर्णांक > 96 && g_पूर्णांक < 123 || g_पूर्णांक > 64 && g_पूर्णांक < 91))
      अणु
       प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, j_पूर्णांक - 1),"*",MID_S(line_S, j_पूर्णांक, LMAX));
       leng_पूर्णांक = 1 + leng_पूर्णांक;
       j_पूर्णांक = j_पूर्णांक + lz_पूर्णांक;
      पूर्ण
           पूर्ण
     पूर्ण
     j_पूर्णांक = j_पूर्णांक + 1;
     अगर(j_पूर्णांक < leng_पूर्णांक)
     अणु
      जाओ Lab_45001;
     पूर्ण
Lab_45005:
    ;पूर्ण
   पूर्ण
  पूर्ण
Lab_45010:
  ख_लिखो(fp_3,"%s\n",line_S);
Lab_45011:
  अगर(nl_पूर्णांक == initline_पूर्णांक)
  अणु
   अगर(commff_पूर्णांक == 1)
   अणु
    ख_लिखो(fp_3,"%s\n"," n_arg_int--;");
   पूर्ण
   अगर(inkeyff_पूर्णांक == 1 && tflg_पूर्णांक == 0)
   अणु
    ख_लिखो(fp_3,"%s\n"," keybd__init();");
   पूर्ण
  पूर्ण
Lab_45015:
 ;पूर्ण
 ख_बंद(fp_3);
 ख_बंद(fp_2);
 प्र_लिखो(tws__S,"%s%s%s%s","mv -f ",क्षणिक_ख_S," ",outf_S);
 प्रणाली(tws__S);
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_45050:   /* Handle HP Labeling style */
 अगर(lbfl_पूर्णांक)
 अणु
  म_नकल(t_S,line_S);
  gulix(t_S);
       अगर (t_S[0] == '}')
       अणु
        k_पूर्णांक=0; जबतक(line_S[k_पूर्णांक] != '}') k_पूर्णांक++;
        म_नकलन(t_S,line_S,k_पूर्णांक); t_S[k_पूर्णांक]='\0'; म_जोड़ो(t_S,";"); म_जोड़ो(t_S,&line_S[k_पूर्णांक]);
  म_नकल(line_S,t_S);
  lbfl_पूर्णांक = 0;
       पूर्ण
 पूर्ण
      अगर (स_भेद(line_S, "Lab_", 4) == 0)
      अणु
 lbfl_पूर्णांक = 1;
      पूर्ण अन्यथा अणु
 lbfl_पूर्णांक = 0;
      पूर्ण
Lab_45051:
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);


Lab_50000:   /* COMMAND$ line tokenization and options handling */
 /* -i or -पूर्णांक => implicit पूर्णांकegers i*,j*,k*,l*,m*,n* or upper हाल */
 /* -d or -द्विगुन => all भग्नs -> द्विगुन */
 /* -c64 or -C64 => C-64 specअगरic syntax, चयनes on -b flag also */
 /* -p or -post => करो not perक्रमm postprocessing varnames */
 /* -l or -दीर्घ => all पूर्णांकegers (except लघु)-> दीर्घ */
 /* -b or -bcpp => insensitive to हाल & spacing in QBASIC text */
 /* -a or -ansi => OBSOLETE and NOT USED */
 /* -c or -C    => allows C text lines commented with 'C ' */
 /* -m or -M    => disallow logical expr. in math. expression */
 /* -w          => AND, OR operate bitwise */
 /* -t or -T    => INKEY_S is dead (<termios.h> etc. not specअगरied) */
 /* -I          => INKEY_S is of sample type (no पूर्णांकernal loop) */
 /* -n or -N    => To supress SHELL command पूर्णांकerpreter: all cmds literal */
 /* -u          => Do not update SCREEN after every LINE, PSET, etc. */
 /* -s          => Strip type sufixes from variable and function names */
 /* -D          => implicit द्विगुनs d*, D* */
 /* -r          => पूर्णांकeger fractions became द्विगुन: '/' -> '/ (double)' */
 /* -v          => prपूर्णांक version and निकास */
 /* -g          => prपूर्णांक debug messages (expert) */
 /* -A          => convert array arguments to पूर्णांकeger as in true BASIC */
 /* -L          => set LMAX other than शेष (1024), must be 1-32767 */
 /* -P          => treat PRINT as prपूर्णांक to the current graphics screen */
 /* -col        => शेष color is क्रमeground (अन्यथा the last set color) */
 /* -B          => maximum compliance with BASIC: -A -r -b -P -I -col */
 /* -Ox         => optimization option(s) passed to the C compiler */
 पूर्णांकflg_पूर्णांक = 0;
 c64flg_पूर्णांक = 0;
 postflg_पूर्णांक = 1;
 दीर्घflg_पूर्णांक = 0;
 cflag_पूर्णांक = 0;
 Dflg_पूर्णांक = 0;
 करोblflg_पूर्णांक = 0;
 bcppflg_पूर्णांक = 0;
 ansअगरlg_पूर्णांक = 0;
 mflg_पूर्णांक = 1;
 rflag_पूर्णांक=0;
 tflg_पूर्णांक = 0;   /* शेष flags */
 noshell_पूर्णांक = 0;
 updateff_पूर्णांक = 1;
 stripff_पूर्णांक = 0;
 debug_पूर्णांक = 0;
 Arrfl_पूर्णांक = 0;
 Lmax_पूर्णांक = 1025;
 prnfl_पूर्णांक = 0;
 Iflag_पूर्णांक = 0;
 bwfl_पूर्णांक = 0;
 colorfl_पूर्णांक = 0;
 म_नकल(optim_S,"");
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_arg_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(d_S,argv_S[i_पूर्णांक]);
  अगर(म_भेद(d_S, "-v") == 0 || म_भेद(d_S, "-V") == 0)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s%s\n","Version: ",Version_S);
   निकास(0);
  पूर्ण
  अगर(म_भेद(d_S, "-h") == 0 || म_भेद(d_S, "-?") == 0)
  अणु
   helpm();
   निकास(0);
  पूर्ण
  अगर(म_भेद(d_S, "-i") == 0 || म_भेद(d_S, "-int") == 0)
  अणु
   पूर्णांकflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-C64") == 0 || म_भेद(d_S, "-c64") == 0)
  अणु
   c64flg_पूर्णांक = 1;
   bcppflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-p") == 0 || म_भेद(d_S, "-post") == 0)
  अणु
   postflg_पूर्णांक = 0;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-l") == 0 || म_भेद(d_S, "-long") == 0)
  अणु
   दीर्घflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-d") == 0 || म_भेद(d_S, "-double") == 0)
  अणु
   करोblflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-b") == 0 || म_भेद(d_S, "-bcpp") == 0)
  अणु
   bcppflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-a") == 0 || म_भेद(d_S, "-ansi") == 0)
  अणु
   ansअगरlg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-c") == 0 || म_भेद(d_S, "-C") == 0)
  अणु
   cflag_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-m") == 0 || म_भेद(d_S, "-M") == 0)
  अणु
   mflg_पूर्णांक = 0;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-w") == 0)
  अणु
   bwfl_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-t") == 0 || म_भेद(d_S, "-T") == 0)
  अणु
   tflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-I") == 0)
  अणु
   Iflag_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-n") == 0 || म_भेद(d_S, "-N") == 0)
  अणु
   noshell_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-u") == 0)
  अणु
   updateff_पूर्णांक = 0;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-s") == 0)
  अणु
   stripff_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-D") == 0)
  अणु
   Dflg_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-r") == 0)
  अणु
   rflag_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-g") == 0)
  अणु
   debug_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-A") == 0)
  अणु
   Arrfl_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-L") == 0)
  अणु
   i_पूर्णांक = i_पूर्णांक + 1;
   Lmax_पूर्णांक = 1 + VAL(argv_S[i_पूर्णांक]);
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-P") == 0)
  अणु
   prnfl_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-col") == 0)
  अणु
   colorfl_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(d_S, "-B") == 0)
  अणु
   Arrfl_पूर्णांक = 1;
   bcppflg_पूर्णांक = 1;
   rflag_पूर्णांक = 1;
   prnfl_पूर्णांक = 1;
   Iflag_पूर्णांक = 1;
   colorfl_पूर्णांक = 1;
   bwfl_पूर्णांक = 1;
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(LEFT_S(d_S, 2), "-O") == 0)
  अणु
   म_नकल(optim_S,d_S);
   जाओ Lab_50005;
  पूर्ण
  अगर(म_भेद(LEFT_S(d_S, 1), "-") == 0)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s%s\n","qb2c: Unrecognized option, ignored: ",d_S);
   ख_लिखो(मानक_त्रुटि,"%s\n","type 'qb2c -h' to see the list of options");
   जाओ Lab_50005;
  पूर्ण
  म_नकल(inpf_S,argv_S[i_पूर्णांक]);
Lab_50005:
 ;पूर्ण
 अगर(n_arg_पूर्णांक == 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"QuasiBASIC to C translator (QB2C), version: 3.41 04 May 2000\n");
  ख_लिखो(मानक_त्रुटि,"By Mario Stipcevic, Zagreb, Croatia (C)1997-\n");
  ख_लिखो(मानक_त्रुटि,"%s\n","Usage: qb2c [-option [...]] input_file[.bas] [output_file]");
  संकेत_पूर्णांक = 1;   /* निकास(1); */
  जाओ Lab_9999;
 पूर्ण
 अन्यथा
 अणु
  म_नकल(b_S,inpf_S);
  अगर(LEN(inpf_S) > 4)
  अणु
   म_नकल(d_S,RIGHT_S(inpf_S, 4));
   अगर(म_भेद(d_S, ".bas") == 0 || म_भेद(d_S, ".BAS") == 0)
   अणु
    प्र_लिखो(outf_S,"%s%s",LEFT_S(inpf_S, LEN(inpf_S) - 4),".c");
   पूर्ण
   अन्यथा
   अणु
    प्र_लिखो(outf_S,"%s%s",inpf_S,".c");
    प्र_लिखो(inpf_S,"%s%s",b_S,".bas");
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(outf_S,"%s%s",b_S,".c");
   प्र_लिखो(inpf_S,"%s%s",b_S,".bas");
   /*      IF NOT EXISTS(inpf$) THEN inpf$ = b$ + ".BAS" */
   /*      IF NOT EXISTS(inpf$) THEN */
   /*       EPRINT "Can not open files " + b$ + ".bas nor " + b$ + ".BAS": END */
   /*      END IF */
  पूर्ण
 पूर्ण
 म_नकल(ime_S,inpf_S);
 अगर(! EXISTS(ime_S))
 अणु
  ख_लिखो(मानक_त्रुटि,"%s%s%s\n",argv_S[0],": can't open file ",ime_S);
  संकेत_पूर्णांक = 1;
  जाओ Lab_9999;
 पूर्ण
 म_लिखो("%s%s%s%s\n","qb2c: translating  ",inpf_S,"  -->  ",outf_S);
 अगर(bcppflg_पूर्णांक == 1)
 अणु
  म_नकल(z_S,"");
  अगर(c64flg_पूर्णांक == 1)
  अणु
   प्र_लिखो(tws__S,"%s%s",z_S," -C64");
   म_नकल(z_S,tws__S);
  पूर्ण
  अगर(cflag_पूर्णांक == 1)
  अणु
   प्र_लिखो(tws__S,"%s%s",z_S," -C");
   म_नकल(z_S,tws__S);
  पूर्ण
  अगर(rflag_पूर्णांक == 1)
  अणु
   प्र_लिखो(tws__S,"%s%s",z_S," -r");
   म_नकल(z_S,tws__S);
  पूर्ण
  प्र_लिखो(tws__S,"%s%s%s%s","bcpp",z_S," -q ",inpf_S);
  प्रणाली(tws__S);
  प्र_लिखो(inpf_S,"%s%s",b_S,".bcp");
  म_नकल(bcp_S,inpf_S);
 पूर्ण
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_9999:   /* End Main */
 /* Cleanup */
 अगर(bcppflg_पूर्णांक == 1)
 अणु
  प्र_लिखो(tws__S,"%s%s","rm -f ",bcp_S);
  प्रणाली(tws__S);
 पूर्ण
 प्र_लिखो(tws__S,"%s%s%s%s","rm -f ",क्षणिक_ख_S," ",पंचांगpfil0_S);
 प्रणाली(tws__S);
 /*     IF optim$ <> "" THEN ENVIRON "BCC_OPTIONS" = optim$ */
     अगर (संकेत_पूर्णांक) निकास(1);
 म_लिखो("%s% .7G %s\n","Translation done in",(द्विगुन)(Nपूर्णांक(100 * (TIMER() - T0)) / 100.),"sec.");
 निकास(0);

पूर्ण /* End of MAIN */

/*- User SUB--Start -*/
पूर्णांक arraydim(अक्षर  *h_S)
अणु
/* SHARED: पंचांगp$() */

  पूर्णांक  i_पूर्णांक, ntok_पूर्णांक, itok_पूर्णांक;
  अक्षर b_S[LMAX], d_S[LMAX], e_S[LMAX];
  दीर्घ j_दीर्घ;

  अक्षर c;
 /*  Translates array dimensions from QB to C standard (partly, see 800) */
 /*  h$ mora biti 'oguljen' (gulix) */
 /*  Misfeature: |100 -> |100+1 instead of |101 */
 i_पूर्णांक = 1;
     जबतक (h_S[i_पूर्णांक] != '(') i_पूर्णांक++;
 म_नकल(b_S,MID_S(h_S, i_पूर्णांक + 2, LEN(h_S) - i_पूर्णांक - 2));
 tokenix(b_S, &ntok_पूर्णांक, ",", "");
 म_नकल(d_S,"");
 क्रम(itok_पूर्णांक = 1; itok_पूर्णांक <= ntok_पूर्णांक; itok_पूर्णांक++)
 अणु
  j_दीर्घ = VAL(पंचांगp_S[itok_पूर्णांक]);
      c = पंचांगp_S[itok_पूर्णांक][0];
  अगर(j_दीर्घ > 0 || c == '0')
  अणु
   म_नकल(e_S,STR_S(j_दीर्घ + 1));
   प्र_लिखो(tws__S,"%s%s%s",d_S,RIGHT_S(e_S, LEN(e_S) - 1),", ");
   म_नकल(d_S,tws__S);
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(tws__S,"%s%s%s",d_S,पंचांगp_S[itok_पूर्णांक],"+1, ");
   म_नकल(d_S,tws__S);
  पूर्ण
 पूर्ण
 प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, i_पूर्णांक + 1),LEFT_S(d_S, LEN(d_S) - 2),")");
पूर्ण


/*- User SUB--Start -*/
पूर्णांक brackets(अक्षर  *h_S)
अणु
/* SHARED: पंचांगp$() */

  पूर्णांक  i_पूर्णांक, n_पूर्णांक, typ_पूर्णांक;
  अक्षर a_S[LMAX];

    अक्षर b, c;
 /* Converts array brackets from QB to C standard in DIM statement */
 /* Eg. a(10) -> a[10], b(10, 15) -> b[10][15], a$(10) -> a$[10][LMAX] */
 /* Assumes that the last अक्षर is ")" eg. xxxx(...) */
 i_पूर्णांक = 1;
    जबतक (h_S[i_पूर्णांक] != '(') i_पूर्णांक++;
    b=h_S[i_पूर्णांक-1]; /* Unused: $ अगर string, but not क्रम DEFSTR, check type */
 म_नकल(a_S,MID_S(h_S, i_पूर्णांक + 2, LEN(h_S) - i_पूर्णांक - 2));
 tokenix(a_S, &n_पूर्णांक, ",", "");
 म_नकल(h_S,LEFT_S(h_S, i_पूर्णांक));
 vartyp(h_S, &typ_पूर्णांक);
    c = 0;
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= n_पूर्णांक; i_पूर्णांक++)
 अणु
     अगर(पंचांगp_S[i_पूर्णांक][0]=='|')
     अणु c = 1; पूर्ण
     अन्यथा
     अणु
  प्र_लिखो(tws__S,"%s%s%s%s",h_S,"[",पंचांगp_S[i_पूर्णांक],"]");
  म_नकल(h_S,tws__S);
     पूर्ण
 पूर्ण
    अगर (typ_पूर्णांक==5)
    अणु
     अगर (!c)
     अणु म_जोड़ो(h_S, "[LMAX]"); पूर्ण
     अन्यथा
     अणु म_जोड़ो(h_S, "["); म_जोड़ो(h_S, &पंचांगp_S[n_पूर्णांक][1]); म_जोड़ो(h_S, "]"); पूर्ण
    पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक declarix(अक्षर  *typ_S, अक्षर  *varlist_S, पूर्णांक   *dn_पूर्णांक)
अणु
/* SHARED: पंचांगp$(), isub%, ni%, spc$, statfl%() */

  पूर्णांक  ntok_पूर्णांक, i_पूर्णांक;
  अक्षर prtf_S[LMAX];

 /* Declares variables (+ splits दीर्घ lines with splitdec) */
 /* Variable names ran through varpost() name postprocessor */
 splitdec(varlist_S, &ntok_पूर्णांक, &*dn_पूर्णांक);
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ntok_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(prtf_S,पंचांगp_S[i_पूर्णांक]);
  varpost(prtf_S);
  अगर(statfl_पूर्णांक[isub_पूर्णांक] == 1)
  अणु
   ख_लिखो(fp_2,"%s%s%s%s%s\n",spc_S,"static",typ_S,prtf_S,";");
  पूर्ण
  अन्यथा
  अणु
   ख_लिखो(fp_2,"%s%s%s%s\n",spc_S,typ_S,prtf_S,";");
  पूर्ण
  अगर(isub_पूर्णांक == 0)
  अणु
   ni_पूर्णांक = ni_पूर्णांक + 1;
  पूर्ण
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक gulix(अक्षर  *h_S)
अणु
  पूर्णांक  leng_पूर्णांक, i_पूर्णांक, j_पूर्णांक;

 /* Strip off leading and trailing spaces */
 leng_पूर्णांक = LEN(h_S);
 अगर(leng_पूर्णांक != 0)
 अणु
  i_पूर्णांक = 0;
   जबतक((h_S[i_पूर्णांक]==' ' || h_S[i_int]=='\t') && i_पूर्णांक < leng_पूर्णांक) ++i_पूर्णांक;
  अगर(i_पूर्णांक == leng_पूर्णांक)
  अणु
   म_नकल(h_S,"");
   जाओ Lab_99;
  पूर्ण
  j_पूर्णांक = leng_पूर्णांक - 1;
   जबतक(h_S[j_पूर्णांक] == ' ' && j_पूर्णांक > 0) --j_पूर्णांक;
   स_हटाओ(h_S,&h_S[i_पूर्णांक],(leng_पूर्णांक=j_पूर्णांक-i_पूर्णांक+1)); h_S[leng_पूर्णांक]='\0';
 पूर्ण
Lab_99:
;पूर्ण


/*- User SUB--Start -*/
पूर्णांक inputfmt(अक्षर  *list_S, अक्षर  *क्रमmt_S, अक्षर  *prt_S, पूर्णांक   *ntok_पूर्णांक, पूर्णांक   *flag_पूर्णांक)
अणु
/* SHARED: पंचांगp$(), nl% */

  पूर्णांक  ltyp_पूर्णांक, typ_पूर्णांक, i_पूर्णांक;
  अक्षर b_S[LMAX], z_S[LMAX];

 /* Solves argument lists in "INPUT #", "INPUT" and "SSCAN" input statements */
 /* 'list$' is the input list and is not changed. */
 /* 'formt$' is format string and 'prt$' is complete argument list */
 /* to माला_पूछो at the output. */
 /* ntok% is number of found tokens, set to -1 अगर input is a single string */
 /* Input flag% defines typ of delimiter in the output: 0=" ", 1=" ,", 2="\t" */
 म_नकल(क्रमmt_S,"");
 म_नकल(prt_S,"");
 ltyp_पूर्णांक = 0;
 tokenix(list_S, &*ntok_पूर्णांक, ",", ";");
 अगर(*ntok_पूर्णांक == 1)
 अणु
  म_नकल(b_S,पंचांगp_S[1]);
  vartyp(b_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
  अणु
   म_नकल(prt_S,list_S);
   *ntok_पूर्णांक = -1;
   जाओ Lab_315;
  पूर्ण
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= *ntok_पूर्णांक; i_पूर्णांक++)
 अणु
  म_नकल(b_S,पंचांगp_S[i_पूर्णांक]);
  vartyp(b_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 0)
  अणु
   म_लिखो("%s%s%s% d \n","qb2c: inputfmt: Error in input format of ",b_S,"in line No",nl_पूर्णांक);
  पूर्ण
  अगर(typ_पूर्णांक > 10)
  अणु
   typ_पूर्णांक = typ_पूर्णांक - 10;
  पूर्ण
  अगर(typ_पूर्णांक <= 2 || typ_पूर्णांक == 8)
  अणु
   म_नकल(z_S,"%d");
  पूर्ण
  अन्यथा
  अणु
   अगर(typ_पूर्णांक == 3)
   अणु
    म_नकल(z_S,"%f");
   पूर्ण
   अन्यथा
   अणु
    अगर(typ_पूर्णांक == 4)
    अणु
     म_नकल(z_S,"%le");
    पूर्ण
    अन्यथा
    अणु
     अगर(typ_पूर्णांक == 5)
     अणु
      म_नकल(z_S,"%s");
     पूर्ण
     अन्यथा
     अणु
      ख_लिखो(मानक_त्रुटि,"%s%s%s% d \n","qb2c: inputfmt: ERROR in input format of `",b_S,"' in line No",nl_पूर्णांक);
     पूर्ण
    पूर्ण
   पूर्ण
  पूर्ण
  अगर(*flag_पूर्णांक == 0)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",क्रमmt_S,"  ",z_S);
   म_नकल(क्रमmt_S,tws__S);
  पूर्ण
  अगर(*flag_पूर्णांक == 1)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",क्रमmt_S," ,",z_S);
   म_नकल(क्रमmt_S,tws__S);
  पूर्ण
  अगर(*flag_पूर्णांक == 2)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",क्रमmt_S,"\\t",z_S);
   म_नकल(क्रमmt_S,tws__S);
  पूर्ण
  अगर(typ_पूर्णांक != 5)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",prt_S,",&",b_S);
   म_नकल(prt_S,tws__S);
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(tws__S,"%s%s%s",prt_S,",",b_S);
   म_नकल(prt_S,tws__S);
  पूर्ण
  ltyp_पूर्णांक = typ_पूर्णांक;
 पूर्ण
 म_नकल(क्रमmt_S,MID_S(क्रमmt_S, 3, LMAX));
Lab_315:
;पूर्ण


/*- User SUB--Start -*/
पूर्णांक logix(अक्षर  *h_S)
अणु
/* SHARED: bwfl% */

  पूर्णांक  leng_पूर्णांक, i_पूर्णांक, j_पूर्णांक;
  अक्षर z_S[LMAX];

 /* Handles logical expressions */
  अक्षर c, k, flagc, flagk, a3_S[4];
 leng_पूर्णांक = LEN(h_S);
 i_पूर्णांक = 1;
 जबतक(i_पूर्णांक <= leng_पूर्णांक)
 अणु
  म_नकलन(a3_S, &h_S[i_पूर्णांक-1], 3); a3_S[3]='\0';
  अगर (a3_S[0] == '=') अणु
  अगर(म_भेद(MID_S(h_S, i_पूर्णांक - 1, 1), " ") != 0)
  अणु
   जाओ Lab_115;
  पूर्ण
  sparser(h_S, &i_पूर्णांक, "=");   /* String logical expression handler */
  leng_पूर्णांक = LEN(h_S);
  जाओ Lab_115;
  पूर्ण
  अगर (स_भेद(a3_S, "<>", 2) == 0) अणु
  sparser(h_S, &i_पूर्णांक, "<>");   /* String logical expression handler */
  leng_पूर्णांक = LEN(h_S);
  जाओ Lab_115;
  पूर्ण
  c = ' '; अगर (i_पूर्णांक > 1) c = छोटे(h_S[i_पूर्णांक-2]);
  अगर (c<'a' || c>'z') अणु flagc = 1; पूर्ण अन्यथा अणु flagc = 0; पूर्ण
  k = ' '; अगर (i_पूर्णांक+1 < leng_पूर्णांक) k = छोटे(h_S[i_पूर्णांक+1]);
  अगर (k<'a' || k>'z') अणु flagk = 1; पूर्ण अन्यथा अणु flagk = 0; पूर्ण
  अगर ( स_भेद(a3_S, "OR", 2) == 0 && flagc && flagk) अणु
  अगर(bwfl_पूर्णांक)
  अणु
   प्र_लिखो(h_S,"%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"|",MID_S(h_S, i_पूर्णांक + 2, leng_पूर्णांक - i_पूर्णांक - 1));
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(h_S,"%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"||",MID_S(h_S, i_पूर्णांक + 2, leng_पूर्णांक - i_पूर्णांक - 1));
   i_पूर्णांक = i_पूर्णांक + 1;
  पूर्ण
  leng_पूर्णांक = LEN(h_S);
  जाओ Lab_115;
  पूर्ण
  k = ' '; अगर (i_पूर्णांक+2 < leng_पूर्णांक) k = छोटे(h_S[i_पूर्णांक+2]);
  अगर (k<'a' || k>'z') अणु flagk = 1; पूर्ण अन्यथा अणु flagk = 0; पूर्ण
  अगर ( स_भेद(a3_S, "AND", 3) == 0 && flagc && flagk) अणु
  अगर(bwfl_पूर्णांक)
  अणु
   प्र_लिखो(h_S,"%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"&",MID_S(h_S, i_पूर्णांक + 3, leng_पूर्णांक - i_पूर्णांक - 1));
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(h_S,"%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"&&",MID_S(h_S, i_पूर्णांक + 3, leng_पूर्णांक - i_पूर्णांक - 1));
   i_पूर्णांक = i_पूर्णांक + 1;
  पूर्ण
  leng_पूर्णांक = leng_पूर्णांक - 1;
  i_पूर्णांक = i_पूर्णांक + 1;
  जाओ Lab_115;
  पूर्ण
  अगर ( स_भेद(a3_S, "NOT", 3) == 0 && flagc && flagk) अणु
  प्र_लिखो(h_S,"%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"!",MID_S(h_S, i_पूर्णांक + 3, leng_पूर्णांक - i_पूर्णांक - 1));
  leng_पूर्णांक = leng_पूर्णांक - 2;
  जाओ Lab_115;
  पूर्ण
  अगर ( स_भेद(a3_S, "EOF", 3) == 0 && flagc && flagk) अणु
  j_पूर्णांक = i_पूर्णांक + 4;
  जबतक(म_भेद(MID_S(h_S, j_पूर्णांक, 1), ")") != 0 && j_पूर्णांक < leng_पूर्णांक)
  अणु
   j_पूर्णांक = j_पूर्णांक + 1;
  पूर्ण
  म_नकल(z_S,MID_S(h_S, i_पूर्णांक + 4, j_पूर्णांक - i_पूर्णांक - 4));
  gulix(z_S);
  प्र_लिखो(h_S,"%s%s%s%s",MID_S(h_S, 1, i_पूर्णांक - 1),"eof(fp_",z_S,MID_S(h_S, j_पूर्णांक, leng_पूर्णांक - j_पूर्णांक + 1));
  leng_पूर्णांक = LEN(h_S);
  जाओ Lab_115;
  पूर्ण
  अगर ( स_भेद(a3_S, " @ ", 3) == 0 || स_भेद(a3_S, "XOR", 3) == 0) अणु
   h_S[i_पूर्णांक] = '^';
  जाओ Lab_115;
  पूर्ण
Lab_115:
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक mathexp(अक्षर  *h_S)
अणु
/* SHARED: mathfl%, mflg%, expflg%, extrnfl% */

  पूर्णांक  leng_पूर्णांक, i_पूर्णांक, togfl_पूर्णांक;
  अक्षर b_S[LMAX];

    अक्षर d, pd='\0';
 /* Translates mathematical and logical expressions, including math. functions: */
 /* ^ -> घात(,), MOD */

 प्र_लिखो(tws__S,"%s%s"," ",h_S);
 म_नकल(h_S,tws__S);
 leng_पूर्णांक = LEN(h_S);
 i_पूर्णांक = 1;
 togfl_पूर्णांक = 0;
 जबतक(i_पूर्णांक <= leng_पूर्णांक)
 अणु
     d = h_S[i_पूर्णांक-1];
     अगर (i_पूर्णांक>=2) pd = h_S[i_पूर्णांक-2];
     अगर (d == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
  अगर(togfl_पूर्णांक == 1)
  अणु
   जाओ Lab_114;
  पूर्ण
     अगर (pd) अणु अगर (d == '!' && pd >= '0' && pd <= '9') h_S[i_int-1] = '.'; पूर्ण
  अगर(i_पूर्णांक > leng_पूर्णांक - 2)
  अणु
   जाओ Lab_114;
  पूर्ण
     अगर (h_S[i_पूर्णांक-1] == '^')
     अणु
  sparser(h_S, &i_पूर्णांक, "^");   /* Finds left and right opeअक्रमs in binary ops. */
  leng_पूर्णांक = LEN(h_S);   /* Caution both h$ and i% are changed */
  mathfl_पूर्णांक = 1;
  जाओ Lab_114;
     पूर्ण
     अगर (स_भेद(&h_S[i_पूर्णांक-1], " MOD ", 5)==0) अणु
  i_पूर्णांक = 1 + i_पूर्णांक;
  sparser(h_S, &i_पूर्णांक, "MOD");
  जाओ Lab_114;
     पूर्ण
Lab_114:
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 म_नकल(h_S,MID_S(h_S, 2, LMAX));
 अगर(mflg_पूर्णांक == 1 && expflg_पूर्णांक == 1)
 अणु
  i_पूर्णांक = 1;
  leng_पूर्णांक = LEN(h_S);
     जबतक (h_S[i_पूर्णांक-1] != '=' && i_पूर्णांक != leng_पूर्णांक) i_पूर्णांक++;
  अगर(i_पूर्णांक == leng_पूर्णांक)
  अणु
   logix(h_S);
  पूर्ण
  अन्यथा
  अणु
   म_नकल(b_S,MID_S(h_S, i_पूर्णांक + 2, LMAX));
   logix(b_S);
   प्र_लिखो(h_S,"%s%s",LEFT_S(h_S, i_पूर्णांक + 1),b_S);
  पूर्ण
 पूर्ण
पूर्ण



/*- User SUB--Start -*/
पूर्णांक म_लिखोmt(अक्षर  *in_S, अक्षर  *क्रमmt_S, अक्षर  *prt_S, पूर्णांक   *nflag_पूर्णांक)
अणु
/* SHARED: पंचांगp$(), isub%, vdblff%, nptk%, extrnfl%, defstr% */

  पूर्णांक  zarfl_पूर्णांक, tzarfl_पूर्णांक, leng_पूर्णांक, togfl_पूर्णांक, brfl_पूर्णांक, i_पूर्णांक, j_पूर्णांक, typ_पूर्णांक, g_पूर्णांक;
  अक्षर h_S[LMAX], d_S[LMAX], z_S[LMAX];

 /* Solves argument lists in "PRINT #" and "PRINT" output statements */
 /* From 4.04 logical expressions are allowed */
 /* 'in$' is the input expression and is not changed. */
 /* 'formt$' is format string and 'prt$' is complete argument list */
 /* to प्र_लिखो or म_लिखो at the output. nflag% is set अगर newline required. */
  अक्षर b;
 /* tokenizacija list varijabli itd. => क्रमmt$ */
 *nflag_पूर्णांक = 1;
 म_नकल(prt_S,"");
 zarfl_पूर्णांक = 0;
 tzarfl_पूर्णांक = 0;
 म_नकल(h_S,in_S);
 अगर(म_भेद(RIGHT_S(h_S, 1), ";") == 0)
 अणु
  *nflag_पूर्णांक = 0;
 पूर्ण
 अगर(*nflag_पूर्णांक == 1)
 अणु
  प्र_लिखो(tws__S,"%s%s",h_S,";");
  म_नकल(h_S,tws__S);
 पूर्ण
 leng_पूर्णांक = LEN(h_S);
 togfl_पूर्णांक = 0;
 brfl_पूर्णांक = 0;
 i_पूर्णांक = 1;
 j_पूर्णांक = 1;
 म_नकल(क्रमmt_S,"");
 जबतक(j_पूर्णांक <= leng_पूर्णांक)
 अणु
        b = h_S[j_पूर्णांक - 1];
        अगर (b == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
  अगर(togfl_पूर्णांक == 0)
  अणु
         अगर (b == '(') brfl_पूर्णांक++;
         अगर (b == ')') brfl_पूर्णांक--;
  पूर्ण
        अगर (!togfl_पूर्णांक && !brfl_पूर्णांक && (b == ';' || b == ',')) अणु
         zarfl_पूर्णांक = 0; अगर (b == ',') zarfl_पूर्णांक = 1;
         tzarfl_पूर्णांक = 0; अगर (b == ';') tzarfl_पूर्णांक = 1;
  म_नकल(d_S,MID_S(h_S, i_पूर्णांक, j_पूर्णांक - i_पूर्णांक));
  gulix(d_S);
  vartyp(d_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक != 5 && typ_पूर्णांक != 7 && typ_पूर्णांक != 15)   /* Novo, umjesto करोlje */
  अणु
   mathexp(d_S);
   logix(d_S);
  पूर्ण
  अगर(typ_पूर्णांक == 1 || typ_पूर्णांक == 2 || typ_पूर्णांक == 8 || typ_पूर्णांक == 10 || typ_पूर्णांक == 11 || typ_पूर्णांक == 12 || typ_पूर्णांक == 18)
  अणु
   म_नकल(z_S,"% d");
   अगर(zarfl_पूर्णांक == 1)
   अणु
    म_नकल(z_S," %-14d");
   पूर्ण
   अगर(tzarfl_पूर्णांक == 1)
   अणु
    म_नकल(z_S,"% d ");
   पूर्ण
   प्र_लिखो(tws__S,"%s%s",क्रमmt_S,z_S);
   म_नकल(क्रमmt_S,tws__S);
   जाओ Lab_195;
  पूर्ण
  अगर(typ_पूर्णांक != 5 && typ_पूर्णांक != 7 && typ_पूर्णांक != 15)
  अणु
   अगर(zarfl_पूर्णांक == 1)
   अणु
    म_नकल(z_S," %-14G");
   पूर्ण
   अन्यथा
   अणु
    अगर(typ_पूर्णांक == 14)
    अणु
     म_नकल(z_S,"% .16G");
     अगर(tzarfl_पूर्णांक == 1)
     अणु
      म_नकल(z_S,"% .16G ");
     पूर्ण
    पूर्ण
    अन्यथा
    अणु
     म_नकल(z_S,"% .7G");
     अगर(tzarfl_पूर्णांक == 1)
     अणु
      म_नकल(z_S,"% .7G ");
     पूर्ण
    पूर्ण
   पूर्ण
   प्र_लिखो(tws__S,"%s%s",क्रमmt_S,z_S);
   म_नकल(क्रमmt_S,tws__S);
   अगर(typ_पूर्णांक == 6 || 11 <= typ_पूर्णांक && typ_पूर्णांक <= 14)
   अणु
    /*        CALL mathexp(d$): REM Novo, sada je gore */
    अगर(typ_पूर्णांक <= 12)
    अणु
     /*         d$ = "DBL(" + d$ + ")" */
     /*         vdblff% = 1: extrnfl% = 1 */
     प्र_लिखो(tws__S,"%s%s%s","(double)(",d_S,")");
     म_नकल(d_S,tws__S);
    पूर्ण
   पूर्ण
   अन्यथा
   अणु
    अगर(typ_पूर्णांक == 20)
    अणु
     /*         d$ = "DBL(" + d$ + ")" */
     /*         vdblff% = 1: extrnfl% = 1 */
     प्र_लिखो(tws__S,"%s%s%s","(double)(",d_S,")");
     म_नकल(d_S,tws__S);
    पूर्ण
   पूर्ण
  पूर्ण
  अन्यथा
  अणु
   म_नकल(z_S,"%s");
   अगर(zarfl_पूर्णांक == 1)
   अणु
    म_नकल(z_S,"%-14s");
   पूर्ण
   अगर(typ_पूर्णांक == 7)
   अणु
    tokenix(d_S, &nptk_पूर्णांक, "+", "");
    म_नकल(d_S,"");
    क्रम(g_पूर्णांक = 1; g_पूर्णांक <= nptk_पूर्णांक; g_पूर्णांक++)
    अणु
     अगर(isub_पूर्णांक == 0)
     अणु
      अगर(म_भेद(पंचांगp_S[g_पूर्णांक], "COMMAND$") == 0)
      अणु
       म_नकल(पंचांगp_S[g_पूर्णांक],"COMMAND$(n_arg_int, argv_S)");
      पूर्ण
     पूर्ण
     प्र_लिखो(tws__S,"%s%s%s",d_S,पंचांगp_S[g_पूर्णांक],",");
     म_नकल(d_S,tws__S);
     प्र_लिखो(tws__S,"%s%s",क्रमmt_S,"%s");
     म_नकल(क्रमmt_S,tws__S);
    पूर्ण
    म_नकल(d_S,LEFT_S(d_S, LEN(d_S) - 1));
   पूर्ण
   अन्यथा
   अणु
    अगर(isub_पूर्णांक == 0)
    अणु
     अगर(म_भेद(d_S, "COMMAND$") == 0)
     अणु
      म_नकल(d_S,"COMMAND$(n_arg_int, argv_S)");
     पूर्ण
    पूर्ण
    प्र_लिखो(tws__S,"%s%s",क्रमmt_S,z_S);
    म_नकल(क्रमmt_S,tws__S);
   पूर्ण
  पूर्ण
Lab_195:
  प्र_लिखो(tws__S,"%s%s%s",prt_S,",",d_S);
  म_नकल(prt_S,tws__S);
  i_पूर्णांक = j_पूर्णांक + 1;
        पूर्ण
  j_पूर्णांक = j_पूर्णांक + 1;
 पूर्ण
पूर्ण



/*- User SUB--Start -*/
पूर्णांक qbfdecl()
अणु
/* SHARED: spacff%, midff%, leftff%, rightff%, strff% */
/* SHARED: chrff%, ascff%, valff%, lenff%, sgnff% */
/* SHARED: पूर्णांकff%, nपूर्णांकff%, eofff%, commff%, vdblff% */
/* SHARED: rndff%, srndff%, समयrff%, dateff%, समयff% */
/* SHARED: inkeyff%, inputff%, colorff%, clsff%, lहालff% */
/* SHARED: uहालff%, envff%, lofff%, hexff%, octff% */
/* SHARED: SScan%, stringf%, datalin%, txlen%, usingff% */


 अगर(spacff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *SPACE_S(int);");
 पूर्ण
 अगर(midff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *MID_S(char *, int, int);");
 पूर्ण
 अगर(leftff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *LEFT_S(char *, int);");
 पूर्ण
 अगर(rightff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *RIGHT_S(char *, int);");
 पूर्ण
 अगर(lहालff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *LCASE_S(char *);");
 पूर्ण
 अगर(uहालff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *UCASE_S(char *);");
 पूर्ण
 अगर(envff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *ENVIRON_S(char *);");
 पूर्ण
 अगर(strff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *STR_S(double);");
 पूर्ण
 अगर(chrff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *CHR_S(int);");
 पूर्ण
 अगर(ascff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern long   ASC(char *);");
 पूर्ण
 अगर(valff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern double VAL(char *);");
 पूर्ण
 अगर(lenff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int    LEN(char *);");
 पूर्ण
 अगर(txlen_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int    XLEN(char *);");
 पूर्ण
 अगर(sgnff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern double SGN(double);");
 पूर्ण
 अगर(पूर्णांकff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern long   Int(double);");
 पूर्ण
 अगर(nपूर्णांकff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern long   Nint(double);");
 पूर्ण
 अगर(eofff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int    eof(FILE *);");
 पूर्ण
 अगर(commff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *COMMAND_S(int, char *argv_S[]);");
 पूर्ण
 अगर(rndff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern double  RND(double);");
 पूर्ण
 अगर(srndff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern void    RANDOMIZE(long);");
 पूर्ण
 अगर(समयrff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern double  TIMER(void);");
 पूर्ण
 अगर(vdblff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern double DBL(double);");
 पूर्ण
 अगर(dateff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *DATE_S(int);");
 पूर्ण
 अगर(समयff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *TIME_S(int);");
 पूर्ण
 अगर(inkeyff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *INKEY_S(void);");
 पूर्ण
 अगर(inputff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *INPUT(const char*, int);");
 पूर्ण
 अगर(colorff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int    COLOR(int fg, int bg);");
 पूर्ण
 अगर(clsff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int    CLS(int n_int);");
 पूर्ण
 अगर(lofff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern long   LOF(char *);");
 पूर्ण
 अगर(hexff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *HEX_S(unsigned long);");
 पूर्ण
 अगर(octff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char  *OCT_S(unsigned long);");
 पूर्ण
 अगर(SScan_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern int   SScan(char *);");
 पूर्ण
 अगर(stringf_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char *STRING_S(int, int);");
 पूर्ण
 अगर(datalin_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char *READ__S(int);");
 पूर्ण
 अगर(usingff_पूर्णांक)
 अणु
  ख_लिखो(fp_2,"%s\n","extern char *print__using(char *, char *);");
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक qbfunc()
अणु
/* SHARED: spacff%, midff%, leftff%, rightff%, strff% */
/* SHARED: chrff%, ascff%, valff%, lenff%, sgnff% */
/* SHARED: पूर्णांकff%, nपूर्णांकff%, eofff%, commff%, vdblff% */
/* SHARED: rndff%, srndff%, समयrff%, dateff%, समयff% */
/* SHARED: inkeyff%, inputff%, tflg%, colorff%, clsff% */
/* SHARED: existff%, lहालff%, uहालff%, envff%, lofff% */
/* SHARED: hexff%, octff%, SScan%, stringf%, datalin% */
/* SHARED: txlen%, usingff%, Iflag% */

  अक्षर d_S[LMAX];


 म_नकल(d_S,CHR_S(34));   /* Quotes */
 अगर(spacff_पूर्णांक == 1)
 अणु
  /*  Calls: SPACE_S(j), SPACE_S(2) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *SPACE_S(int n)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," if (n < 0) n = 0;");
  ख_लिखो(fp_2,"%s%s%s%s\n"," strcpy(w__S[j__S],",CHR_S(34),CHR_S(34),");");
  ख_लिखो(fp_2,"%s\n"," for(i = 1; i <= n; i++)");
  ख_लिखो(fp_2,"%s\n"," {");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  strcat(w__S[j__S],",d_S," ",d_S,");");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(midff_पूर्णांक == 1)
 अणु
  /*  Calls: eg. MID_S(a_S,2,j) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *MID_S(char *a_S, int start, int length)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," if(length < 0) { ");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  printf(",CHR_S(34),"Error: in MID_S: length < 0\\n",CHR_S(34),");");
  ख_लिखो(fp_2,"%s\n","  exit(0); }");
  ख_लिखो(fp_2,"%s\n"," if(start  < 0) {");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  printf(",CHR_S(34),"Error: in MID_S: start < 1\\n",CHR_S(34),");");
  ख_लिखो(fp_2,"%s\n","  exit(0); }");
  ख_लिखो(fp_2,"%s\n"," if(start > strlen(a_S)) ");
  ख_लिखो(fp_2,"%s\n"," { w__S[j__S][0]='\\0'; }");
  ख_लिखो(fp_2,"%s\n"," else");
  ख_लिखो(fp_2,"%s\n"," { strncpy(w__S[j__S], &a_S[start-1], length);");
  ख_लिखो(fp_2,"%s\n","   w__S[j__S][length]='\\0'; }");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(leftff_पूर्णांक == 1)
 अणु
  /* Calls:  LEFT_S(a_S,j), LEFT_S(a_S,3) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *LEFT_S(char *a_S, int length)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," if(length < 0) { ");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  printf(",CHR_S(34),"Error: in LEFT_S: length < 0\\n",CHR_S(34),");");
  ख_लिखो(fp_2,"%s\n","  exit(0); }");
  ख_लिखो(fp_2,"%s\n"," strncpy(w__S[j__S], a_S, length);");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][length]='\\0';");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(rightff_पूर्णांक == 1)
 अणु
  /* Calls:  RIGHT_S(a_S,j), RIGHT_S(a_S,3) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *RIGHT_S(char *a_S, int length)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int  start;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," if ((start = strlen(a_S) - length) < 0) start = 0;");
  ख_लिखो(fp_2,"%s\n"," if (length < 0) {");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  printf(",CHR_S(34),"Error: in RIGHT_S: length < 0\\n",CHR_S(34),");");
  ख_लिखो(fp_2,"%s\n","  exit(0); }");
  ख_लिखो(fp_2,"%s\n"," strncpy(w__S[j__S], &a_S[start], length);");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][length]='\\0';");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(strff_पूर्णांक == 1)
 अणु
  /* Calls: STR_S(j), STR_S(123.5) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *STR_S(double d)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," sprintf(w__S[j__S],",d_S,"% G",d_S,",d);");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(chrff_पूर्णांक == 1)
 अणु
  /* Calls: CHR_S(j), CHR_S(65) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *CHR_S(int i)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][0]=i;");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][1]='\\0';");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(ascff_पूर्णांक == 1)
 अणु
  /* Calls: i=ASC(a_S), i=ASC("ABCD") */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern long ASC(char *c_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," if (++i__l == 16) i__l=0;");
  ख_लिखो(fp_2,"%s\n"," if((w__l[i__l]=c_S[0]) < 0) w__l[i__l]=256+w__l[i__l];");
  ख_लिखो(fp_2,"%s\n"," return w__l[i__l];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(valff_पूर्णांक == 1)
 अणु
  /*  Calls: VAL(a_S), VAL("1234.5abcd") */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern double VAL(char *a_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," if (++i__d == 16) i__d = 0;");
  ख_लिखो(fp_2,"%s\n"," w__d[i__d] = atof(a_S);");
  ख_लिखो(fp_2,"%s\n"," return w__d[i__d];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(lenff_पूर्णांक == 1)
 अणु
  /*  Calls: LEN(a_S), LEN("1234.5abcd") */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int LEN(char *a_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," if (++i__d == 16) i__d = 0;");
  ख_लिखो(fp_2,"%s\n"," w__d[i__d] = strlen(a_S);");
  ख_लिखो(fp_2,"%s\n"," return w__d[i__d];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(txlen_पूर्णांक == 1)
 अणु
  /*  Calls: XLEN(a_S), XLEN("1234.5abcd") */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int XLEN(char *a_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int length, height;");
  ख_लिखो(fp_2,"%s\n","  ixtxtl( &length, &height, a_S );");
  ख_लिखो(fp_2,"%s\n"," return length;");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(sgnff_पूर्णांक == 1)
 अणु
  /*  Calls: SGN(x), SGN(-123.4) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern double SGN(double x)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," if (++i__d == 16) i__d = 0;");
  ख_लिखो(fp_2,"%s\n"," if(x == (double) 0) {");
  ख_लिखो(fp_2,"%s\n","  w__d[i__d] = 0.; }");
  ख_लिखो(fp_2,"%s\n"," else {");
  ख_लिखो(fp_2,"%s\n","  w__d[i__d] = x / fabs(x); }");
  ख_लिखो(fp_2,"%s\n"," return w__d[i__d];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(पूर्णांकff_पूर्णांक == 1)
 अणु
  /*  Calls: Int(x), Int(-123.4) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern long Int(double x)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," return floor(x);");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(nपूर्णांकff_पूर्णांक == 1)
 अणु
  /*  Calls: Nपूर्णांक(x), Nपूर्णांक(-123.4) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern long Nint(double x)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," return floor(0.5 + x); ");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(eofff_पूर्णांक == 1)
 अणु
  /*  Calls:  जबतक ( ! eof(fp_n) ) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int eof(FILE *stream)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," static int c, istat;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," istat=((c=fgetc(stream))==EOF);");
  ख_लिखो(fp_2,"%s\n"," ungetc(c,stream);");
  ख_लिखो(fp_2,"%s\n"," return istat; ");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(commff_पूर्णांक == 1)
 अणु
  /*  Calls:  COMMAND_S(n_arg_पूर्णांक, argv_S); */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *COMMAND_S(int n_arg_int, char *argv_S[])");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," for(i = 1; i <= n_arg_int; i++)");
  ख_लिखो(fp_2,"%s\n"," {");
  ख_लिखो(fp_2,"%s\n","  strcat(w__S[j__S],argv_S[i]);");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  strcat(w__S[j__S],",d_S," ",d_S,");");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][strlen(w__S[j__S])-1]='\\0';");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(vdblff_पूर्णांक == 1)
 अणु
  /*  Calls: DBL(num_expression) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern double DBL(double d)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," if (++i__d == 16) i__d = 0;");
  ख_लिखो(fp_2,"%s\n"," w__d[i__d] = d;");
  ख_लिखो(fp_2,"%s\n"," return w__d[i__d];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(rndff_पूर्णांक == 1)
 अणु
  /*  Calls: RND(num_expression) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern double RND(double d)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," static double y;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if(d == 0) {");
  ख_लिखो(fp_2,"%s\n","  return y;");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," else {");
  ख_लिखो(fp_2,"%s\n","  return (y = rand()/((double) RAND_MAX));");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(srndff_पूर्णांक == 1)
 अणु
  /*  Calls: RANDOMIZE(num_expression) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern void RANDOMIZE(long n)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," srand(n % 65536);");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(समयrff_पूर्णांक == 1)
 अणु
  /*  Calls: x = TIMER() */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern double TIMER()");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," struct timeval tv;");
  ख_लिखो(fp_2,"%s\n"," struct timezone tz;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," gettimeofday(&tv, &tz);");
  ख_लिखो(fp_2,"%s\n"," return ((tv.tv_sec % 86400)+tv.tv_usec/(double)1000000);");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(dateff_पूर्णांक == 1)
 अणु
  /*  Calls: a_S = DATE_S[(i)] */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *DATE_S(int i)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," static struct tm *tp;");
  ख_लिखो(fp_2,"%s\n"," long elapse_time;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," time(&elapse_time);");
  ख_लिखो(fp_2,"%s\n"," tp=localtime(&elapse_time);");
  ख_लिखो(fp_2,"%s\n"," switch (i) {");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  case 1:  strftime(w__S[j__S],LMAX,",d_S,"%d.%m.%Y",d_S,",tp);");
  ख_लिखो(fp_2,"%s\n","  break;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  case 2:  strftime(w__S[j__S],LMAX,",d_S,"%d/%m/%Y",d_S,",tp);");
  ख_लिखो(fp_2,"%s\n","  break;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  case 3:  strftime(w__S[j__S],LMAX,",d_S,"%d-%b-%Y",d_S,",tp);");
  ख_लिखो(fp_2,"%s\n","  break;");
  ख_लिखो(fp_2,"%s\n","  case 4:  strcpy(w__S[j__S],asctime(tp));");
  ख_लिखो(fp_2,"%s\n","           w__S[j__S][strlen(w__S[j__S])-1]='\\0';");
  ख_लिखो(fp_2,"%s\n","  break;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  default: strftime(w__S[j__S],LMAX,",d_S,"%m-%d-%Y",d_S,",tp);");
  ख_लिखो(fp_2,"%s\n","  break;");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(समयff_पूर्णांक == 1)
 अणु
  /*  Calls: a_S = TIME_S[(i)] */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *TIME_S(int i)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," static struct tm *tp;");
  ख_लिखो(fp_2,"%s\n"," long elapse_time;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," time(&elapse_time);");
  ख_लिखो(fp_2,"%s\n"," tp=localtime(&elapse_time);");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," strftime(w__S[j__S],LMAX,",d_S,"%H:%M:%S",d_S,",tp);");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(inkeyff_पूर्णांक == 1 && tflg_पूर्णांक == 0)
 अणु
  /*  Calls:  INKEY_S() */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char  *INKEY_S(void)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int  i, len;");
  ख_लिखो(fp_2,"%s\n"," static char b[33];");
  अगर(Iflag_पूर्णांक)
  अणु
   ख_लिखो(fp_2,"%s\n"," fd_set rfds;");
   ख_लिखो(fp_2,"%s\n"," struct timeval tv;");
   ख_लिखो(fp_2,"%s\n"," int retval;");
  पूर्ण
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," input_mode();");
  अगर(Iflag_पूर्णांक)
  अणु
   ख_लिखो(fp_2,"%s\n"," FD_ZERO(&rfds);");
   ख_लिखो(fp_2,"%s\n"," FD_SET(0, &rfds);");
   ख_लिखो(fp_2,"%s\n"," tv.tv_sec = 0;");
   ख_लिखो(fp_2,"%s\n"," tv.tv_usec = 10000;");
   ख_लिखो(fp_2,"%s\n"," retval = select(1, &rfds, NULL, NULL, &tv);");
   ख_लिखो(fp_2,"%s\n"," if (retval) {");
   ख_लिखो(fp_2,"%s\n","  len=read(0,b,32);");
   ख_लिखो(fp_2,"%s\n"," } else {");
   ख_लिखो(fp_2,"%s\n","  b[0]='\\0';");
   ख_लिखो(fp_2,"%s\n","  system_mode();");
   ख_लिखो(fp_2,"%s\n","  return (b);");
   ख_लिखो(fp_2,"%s\n"," }");
  पूर्ण
  अन्यथा
  अणु
   ख_लिखो(fp_2,"%s\n"," while((len=read(0,b,32)) < 1);");
  पूर्ण
  ख_लिखो(fp_2,"%s\n"," b[len]='\\0';");
  ख_लिखो(fp_2,"%s\n"," system_mode();");
  ख_लिखो(fp_2,"%s\n"," if(b[0] == 3) exit(0);");
  ख_लिखो(fp_2,"%s\n"," i = 1;");
  ख_लिखो(fp_2,"%s\n"," while (b[i] != 27 && b[i] != '\\0' && i < len) i++;");
  ख_लिखो(fp_2,"%s\n"," if (b[i] == 27) len = i;");
  ख_लिखो(fp_2,"%s\n"," b[len]='\\0';");
  ख_लिखो(fp_2,"%s\n"," for(i = 0; i <= 21; i++)");
  ख_लिखो(fp_2,"%s\n"," if(memcmp(b, keyb__S[i], len) == 0) return (keyq__S[i]);");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," return (b);");
  ख_लिखो(fp_2,"%s\n","}");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","int system_mode(void)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n","    if (ioctl(0, TCSETA, &term_orig) == -1) {");
  ख_लिखो(fp_2,"%s\n","        return (0);");
  ख_लिखो(fp_2,"%s\n","    }");
  ख_लिखो(fp_2,"%s\n","    fcntl(0, F_SETFL, kbdflgs);");
  ख_लिखो(fp_2,"%s\n","}");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","int input_mode(void)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n","    static struct termio term;");
  ख_लिखो(fp_2,"%s\n","    static int flags;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","    if (ioctl(0, TCGETA, &term) == -1) {");
  ख_लिखो(fp_2,"%s\n","        return (-1);");
  ख_लिखो(fp_2,"%s\n","    }");
  ख_लिखो(fp_2,"%s\n","    (void) ioctl(0, TCGETA, &term_orig);");
  ख_लिखो(fp_2,"%s\n","    term.c_iflag = 0;");
  ख_लिखो(fp_2,"%s\n","    term.c_oflag = 0;");
  ख_लिखो(fp_2,"%s\n","    term.c_lflag = 0;");
  ख_लिखो(fp_2,"%s\n","    term.c_cc[VMIN] = 1;");
  ख_लिखो(fp_2,"%s\n","    term.c_cc[VTIME] = 0;");
  ख_लिखो(fp_2,"%s\n","    if (ioctl(0, TCSETA, &term) == -1) {");
  ख_लिखो(fp_2,"%s\n","        return (-1);");
  ख_लिखो(fp_2,"%s\n","    }");
  ख_लिखो(fp_2,"%s\n","    kbdflgs = fcntl(0, F_GETFL, 0);");
  ख_लिखो(fp_2,"%s\n","    flags = fcntl(0, F_GETFL);");
  ख_लिखो(fp_2,"%s\n","    flags &= ~O_NDELAY;");
  ख_लिखो(fp_2,"%s\n","    fcntl(0, F_SETFL, flags);");
  ख_लिखो(fp_2,"%s\n","    return (0);");
  ख_लिखो(fp_2,"%s\n","}");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","int keybd__init(void)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," FILE *filep;");
  ख_लिखो(fp_2,"%s\n"," int i;");
  ख_लिखो(fp_2,"%s\n"," char w_S[LMAX];");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," strcpy(w_S,getenv(",d_S,"HOME",d_S,"));");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," strcat(w_S,",d_S,"/.kbcalib",d_S,");");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if((filep=fopen(w_S, ",d_S,"r",d_S,")) == NULL)");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," { printf(",d_S,"Cant open file %s ! No default !\\n",d_S,", w_S);");
  ख_लिखो(fp_2,"%s\n","   return -1; }");
  ख_लिखो(fp_2,"%s\n"," for(i = 0; i <= 21; i++) {");
  ख_लिखो(fp_2,"%s\n","  fgets(keyb__S[i], 8, filep);");
  ख_लिखो(fp_2,"%s\n","  keyb__S[i][strlen(keyb__S[i])-1]='\\0';");
  ख_लिखो(fp_2,"%s\n","  keyq__S[i][0]=1; }");
  ख_लिखो(fp_2,"%s\n"," for(i = 0; i <= 9; i++) {");
  ख_लिखो(fp_2,"%s\n","  keyq__S[i][1]=59+i; }");
  ख_लिखो(fp_2,"%s\n"," keyq__S[10][1]=133; keyq__S[11][1]=134; keyq__S[12][1]=82;");
  ख_लिखो(fp_2,"%s\n"," keyq__S[13][1]=71;  keyq__S[14][1]=73;  keyq__S[15][1]=83;");
  ख_लिखो(fp_2,"%s\n"," keyq__S[16][1]=79;  keyq__S[17][1]=81;  keyq__S[18][1]=72;");
  ख_लिखो(fp_2,"%s\n"," keyq__S[19][1]=75;  keyq__S[20][1]=80;  keyq__S[21][1]=77;");
  ख_लिखो(fp_2,"%s\n"," return fclose(filep);");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(inputff_पूर्णांक == 1)
 अणु
  /*  Calls: a_S = INPUT("Prompt...",0) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *INPUT(const char *a_S, int i)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if(i == 0) printf(",d_S,"%s",d_S,",a_S);");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if(i == 1) printf(",d_S,"%s? ",d_S,",a_S);");
  ख_लिखो(fp_2,"%s\n"," fgets(tws__S,255,stdin);");
  ख_लिखो(fp_2,"%s\n"," tws__S[strlen(tws__S)-1]='\\0';");
  ख_लिखो(fp_2,"%s\n"," return tws__S;");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(colorff_पूर्णांक == 1)
 अणु
  /*  Calls: COLOR((पूर्णांक) fg, (पूर्णांक) bg) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int COLOR(int fg, int bg)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int col, att;");
  ख_लिखो(fp_2,"%s\n"," char a_S[32];");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (bg>=0) { printf(",d_S,"\\033[0;%dm",d_S,",40+(bg % 8));}");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," else { printf(",d_S,"\\033[0m",d_S,");}");
  ख_लिखो(fp_2,"%s\n"," fg = fg % 32;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (fg <= 7) { printf(",d_S,"\\033[%dm",d_S,",30+fg); }");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if ( 7 < fg && fg <= 15) { printf(",d_S,"\\033[1;%dm",d_S,",22+fg); }");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (15 < fg && fg <= 23) { printf(",d_S,"\\033[5;%dm",d_S,",14+fg); }");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (23 < fg) { printf(",d_S,"\\033[1;5;%dm",d_S,",6+fg); }");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(clsff_पूर्णांक == 1)
 अणु
  /*  Calls: CLS((पूर्णांक) n_पूर्णांक) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int CLS(int n)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (n == 0) printf(",d_S,"\\033[2J\\033[H",d_S,");");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," { printf(",d_S,"\\033[H",d_S,");");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","   for (i=1; i<=24; i++) printf(",d_S,"\\033[%d;0;f\\033[K",d_S,",i);");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(existff_पूर्णांक == 1)
 अणु
  /*  Calls: EXISTS( file$ ) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int EXISTS(char *file_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if(fopen(file_S, ",d_S,"r",d_S,") == NULL) return 0;");
  ख_लिखो(fp_2,"%s\n"," return 1;");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(lहालff_पूर्णांक == 1)
 अणु
  /*  Calls: LCASE$( text$ ) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *LCASE_S(char *text_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i=0; char c;");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," while((c=text_S[i]) != '\\0') {");
  ख_लिखो(fp_2,"%s\n","  w__S[j__S][i++] = tolower(c);");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][i] = '\\0';");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(uहालff_पूर्णांक == 1)
 अणु
  /*  Calls: UCASE$( text$ ) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *UCASE_S(char *text_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i=0; char c;");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," while((c=text_S[i]) != '\\0') {");
  ख_लिखो(fp_2,"%s\n","  w__S[j__S][i++] = toupper(c);");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][i] = '\\0';");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(envff_पूर्णांक)
 अणु
 पूर्ण
 अगर(lofff_पूर्णांक)
 अणु
 पूर्ण
 अगर(hexff_पूर्णांक)
 अणु
  /* Calls: a$ = HEX$(1024) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *HEX_S(unsigned long kc)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," unsigned long k, mask = 15;");
  ख_लिखो(fp_2,"%s\n"," int c, i = 0;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," k = kc; if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if(k == 0) { strcpy(w__S[j__S],",d_S,"0",d_S,"); }");
  ख_लिखो(fp_2,"%s\n"," else {");
  ख_लिखो(fp_2,"%s\n","  while(k > 0) {");
  ख_लिखो(fp_2,"%s\n","   if((c = k & mask) <= 9) { w__S[j__S][15-i] = '0'+c; }");
  ख_लिखो(fp_2,"%s\n","   else { w__S[j__S][15-i] = 'A'+c-10; }");
  ख_लिखो(fp_2,"%s\n","   k = k / 16; i++;");
  ख_लिखो(fp_2,"%s\n","  }");
  ख_लिखो(fp_2,"%s\n","  memmove(w__S[j__S], &w__S[j__S][16-i], i+1);");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(octff_पूर्णांक)
 अणु
  /* Calls: a$ = OCT$(1024) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *OCT_S(unsigned long kc)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i = 0;");
  ख_लिखो(fp_2,"%s\n"," unsigned long k;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," k = kc; if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if(k == 0) { strcpy(w__S[j__S],",d_S,"0",d_S,"); }");
  ख_लिखो(fp_2,"%s\n"," else {");
  ख_लिखो(fp_2,"%s\n","  w__S[j__S][16] = '\\0';");
  ख_लिखो(fp_2,"%s\n","  while(k > 0) {");
  ख_लिखो(fp_2,"%s\n","   w__S[j__S][15-i] = '0'+(k & (unsigned long)7);");
  ख_लिखो(fp_2,"%s\n","   k = k / 8; i++;");
  ख_लिखो(fp_2,"%s\n","  }");
  ख_लिखो(fp_2,"%s\n","  memmove(w__S[j__S], &w__S[j__S][16-i], i+1);");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(SScan_पूर्णांक)
 अणु
  /* Calls (from C only): SScan(h_S); */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern int SScan(char *h_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i=0, togfl=0, l;");
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n"," l=strlen(h_S);");
  ख_लिखो(fp_2,"%s\n"," while(h_S[i] != '\\0') {");
  ख_लिखो(fp_2,"%s%s%s\n","  if(h_S[i]=='",d_S,"') {");
  ख_लिखो(fp_2,"%s\n","   togfl = 1 - togfl;");
  ख_लिखो(fp_2,"%s\n","   memmove(&h_S[i], &h_S[i+1], l-i);");
  ख_लिखो(fp_2,"%s\n","  } else {");
  ख_लिखो(fp_2,"%s\n","   if(!togfl && h_S[i]==',') h_S[i]='\\t';");
  ख_लिखो(fp_2,"%s\n","   i++;");
  ख_लिखो(fp_2,"%s\n","  }");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(stringf_पूर्णांक)
 अणु
  /*  Calls: a$ = STRING$(n%, asc%) */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *STRING_S(int n, int asc)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," int i;");
  ख_लिखो(fp_2,"%s\n"," if (++j__S == 16) j__S=0;");
  ख_लिखो(fp_2,"%s\n"," for(i=0; i<n; i++) w__S[j__S][i] = asc;");
  ख_लिखो(fp_2,"%s\n"," w__S[j__S][n] = '\\0';");
  ख_लिखो(fp_2,"%s\n"," return w__S[j__S];");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(datalin_पूर्णांक)
 अणु
  /*  Calls: System only, म_नकल(a_S,READ__S(data__c_पूर्णांक++)); */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *READ__S(int n)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s%s%s%s%s\n"," if (n >= data__M_int) { fprintf(stderr,",d_S,"ERROR: READ passed the end of DATA !\\n",d_S,"); exit(-1); }");
  ख_लिखो(fp_2,"%s\n"," return (DATA__S[n]);");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
 अगर(usingff_पूर्णांक)
 अणु
  /*  Calls: System only, prपूर्णांक__using(using_S, क्रमmat_S); */
  ख_लिखो(fp_2,"\n");
  ख_लिखो(fp_2,"%s\n","extern char *print__using(char *using_S, char *format_S)");
  ख_लिखो(fp_2,"%s\n","{");
  ख_लिखो(fp_2,"%s\n"," static char fmt[256], tmp[256];");
  ख_लिखो(fp_2,"%s\n"," int i,h=0,d=0,flag=0;");
  ख_लिखो(fp_2,"%s\n"," char c;");
  ख_लिखो(fp_2,"%s\n"," i=0;");
  ख_लिखो(fp_2,"%s\n"," while(c=using_S[i]) {");
  ख_लिखो(fp_2,"%s\n","  if(c=='#') h++;");
  ख_लिखो(fp_2,"%s\n","  if(c=='.') {flag=1; h++;}");
  ख_लिखो(fp_2,"%s\n","  if(c=='#' && flag) d++;");
  ख_लिखो(fp_2,"%s\n","  i++;");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," i=0; fmt[0]='\\0';");
  ख_लिखो(fp_2,"%s\n"," while(c=format_S[i]) {");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s\n","  if(c=='f') {sprintf(tmp,",d_S,"%s%s%d.%df",d_S,",fmt,",d_S,"%",d_S,",h,d); strcpy(fmt,tmp);}");
  ख_लिखो(fp_2,"%s%s%s%s%s%s%s%s%s\n","  if(c=='s') {sprintf(tmp,",d_S,"%s%s%ds",d_S,",fmt,",d_S,"%",d_S,",h); strcpy(fmt,tmp);}");
  ख_लिखो(fp_2,"%s%s%s%s%s\n","  if(c=='n') strcat(fmt,",d_S,"\\n",d_S,");");
  ख_लिखो(fp_2,"%s\n","  i++;");
  ख_लिखो(fp_2,"%s\n"," }");
  ख_लिखो(fp_2,"%s\n"," return fmt;");
  ख_लिखो(fp_2,"%s\n","}");
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक quadrix(अक्षर  *h_S)
अणु
/* SHARED: aपंचांगp$(), naपंचांगp%, Arrfl%, nl%, line$, isub% */
/* SHARED: dyna$(), ndyna%(), पंचांगp$(), temp$() */

  पूर्णांक  i_पूर्णांक, togfl_पूर्णांक, c_पूर्णांक, L_पूर्णांक, g_पूर्णांक, j_पूर्णांक, k_पूर्णांक, brfl_पूर्णांक, brfl1_पूर्णांक, n_पूर्णांक, i1_पूर्णांक;
  अक्षर b_S[LMAX], d_S[LMAX], z_S[LMAX], e_S[LMAX];

  अक्षर e;
 /* Converts brackets in used arrays to square brackets. */
 /* Input string h$ is changed at the निकास. */
 /* Arrfl% set -> convert parameter पूर्णांकo पूर्णांकeger (-A option) */
 /* If array is dynamic, change brackets accordingly */
Lab_175:   /* changes Array variable brackets from QB to C convention */
 /* 31000 must be called beक्रमe, once per SUB (or MAIN) */
 /* hmm.... SUB and SHARED must be executed beक्रमe; most of the others after */
 /* Improved - it will not change exp( अगर an array xp( is declared ! */
 प्र_लिखो(tws__S,"%s%s"," ",h_S);
 म_नकल(h_S,tws__S);
 म_नकल(b_S,"");
 म_नकल(d_S,"");
 i_पूर्णांक = 1;
 togfl_पूर्णांक = 0;
 c_पूर्णांक = 0;
 L_पूर्णांक = 0;
 g_पूर्णांक = 0;
      जबतक (i_पूर्णांक < म_माप(h_S))
      अणु
       अगर (h_S[i_पूर्णांक-1] == '"') togfl_पूर्णांक=1-togfl_पूर्णांक;
       अगर ((c_पूर्णांक=h_S[i_पूर्णांक-1]) == '(' && togfl_पूर्णांक == 0)
       अणु
 क्रम(j_पूर्णांक = 1; j_पूर्णांक <= naपंचांगp_पूर्णांक; j_पूर्णांक++)
 अणु
  म_नकल(z_S,aपंचांगp_S[j_पूर्णांक]);
         L_पूर्णांक = म_माप(z_S);
  अगर(i_पूर्णांक > L_पूर्णांक)
  अणु
   k_पूर्णांक = i_पूर्णांक - L_पूर्णांक + 1;
          अगर (स_भेद(&h_S[k_पूर्णांक-1], z_S, L_पूर्णांक)==0) अणु
           g_पूर्णांक=0; अगर(k_पूर्णांक >= 2) g_पूर्णांक = h_S[k_पूर्णांक - 2];
   अगर(! (g_पूर्णांक > 96 && g_पूर्णांक < 123 || g_पूर्णांक > 64 && g_पूर्णांक < 91))
   अणु
    क्रम(k_पूर्णांक = 1; k_पूर्णांक <= ndyna_पूर्णांक[isub_पूर्णांक]; k_पूर्णांक++)
    अणु
             अगर (स_भेद(z_S, dyna_S[isub_पूर्णांक][k_पूर्णांक], L_पूर्णांक)==0) अणु
     /* GOSUB Lab_186 */
     अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_186;
     जाओ Lab_172;
             पूर्ण
    पूर्ण
    /* GOSUB Lab_176 */    /* GOTO 172 Done anyway */
    अगर (बनाओ_लाँघ(j__buf[j__lev++])==0) जाओ Lab_176;
   पूर्ण
          पूर्ण
  पूर्ण
Lab_172:
 ;पूर्ण
       पूर्ण
       ++i_पूर्णांक;
      पूर्ण

 /*   Process again अगर flag Arrfl% set: Convert array arguments to पूर्णांकeger. */
 /*   Based on fact [] is NOT used in BASIC. */
 अगर(Arrfl_पूर्णांक)
 अणु
  i_पूर्णांक = 0;
  togfl_पूर्णांक = 0;
       जबतक ((e=h_S[++i_पूर्णांक]) != '\0') अणु
        अगर (e=='"') togfl_पूर्णांक=1-togfl_पूर्णांक;
        अगर (e=='[' && !togfl_पूर्णांक) अणु
  प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, i_पूर्णांक + 1),"(int)(",MID_S(h_S, i_पूर्णांक + 2, LMAX));
  i_पूर्णांक = i_पूर्णांक + 7;
  brfl_पूर्णांक = 1;
  g_पूर्णांक = i_पूर्णांक;
         जबतक (brfl_पूर्णांक && e!='\0') अणु
          e = h_S[++g_पूर्णांक];
          अगर (e == '[') brfl_पूर्णांक++;
          अगर (e == ']') brfl_पूर्णांक--;
         पूर्ण
         अगर (e=='\0') अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: quadrix: ERROR in translation caused by -A option in");
  ख_लिखो(मानक_त्रुटि,"%s% d %s%s\n","line No",nl_पूर्णांक,":",line_S);
          निकास(1);
         पूर्ण
  प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, g_पूर्णांक),")",MID_S(h_S, g_पूर्णांक + 1, LMAX));
        पूर्ण
       पूर्ण
 पूर्ण
 gulix(h_S);
 वापस 0;

Lab_176:   /* Ugradnja kvadratnih zagrada u polja u izrazima (ne u DIM) */
 /* Ulaz: h$, i%, Izlaz: izmijenjena linija h$ i (eventualno) novi i% */
 प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, i_पूर्णांक - 1),"[",MID_S(h_S, i_पूर्णांक + 1, LMAX));
 g_पूर्णांक = i_पूर्णांक;
 brfl1_पूर्णांक = 1;
      e = h_S[g_पूर्णांक-1];
 जबतक(brfl1_पूर्णांक != 0)
 अणु
       अगर (e == ',') अणु
  प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, g_पूर्णांक - 1),"][",MID_S(h_S, g_पूर्णांक + 2, LMAX));
  g_पूर्णांक = g_पूर्णांक + 1;
       पूर्ण
  g_पूर्णांक = g_पूर्णांक + 1;
       e = h_S[g_पूर्णांक-1];
       अगर (e == '(') brfl1_पूर्णांक++;
       अगर (e == ')') brfl1_पूर्णांक--;
 पूर्ण
 प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, g_पूर्णांक - 1),"]",MID_S(h_S, g_पूर्णांक + 1, LMAX));
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);

Lab_186:   /* Ugradnja kvadratnih zagrada u izrazima za dinamicka polja */
 /* Ulaz: h$, i%, Izlaz: izmijenjena linija h$ i (eventualno) novi i% */
 g_पूर्णांक = i_पूर्णांक;
 brfl1_पूर्णांक = 1;
 जबतक(brfl1_पूर्णांक != 0)
 अणु
       e = h_S[g_पूर्णांक++];
       अगर (e == '(') brfl1_पूर्णांक++;
       अगर (e == ')') brfl1_पूर्णांक--;
 पूर्ण
      म_नकल(b_S, &dyna_S[isub_पूर्णांक][k_पूर्णांक][L_पूर्णांक]); b_S[म_माप(b_S)-1]='\0';
 म_नकल(d_S,MID_S(h_S, i_पूर्णांक + 1, g_पूर्णांक - i_पूर्णांक - 1));
 tokenix(d_S, &n_पूर्णांक, ",", "");
 क्रम(i1_पूर्णांक = 1; i1_पूर्णांक <= n_पूर्णांक; i1_पूर्णांक++)
 अणु
  म_नकल(temp_S[i1_पूर्णांक],पंचांगp_S[i1_पूर्णांक]);
 पूर्ण
 tokenix(b_S, &n_पूर्णांक, ",", "");
 म_नकल(d_S,temp_S[n_पूर्णांक]);
 म_नकल(e_S,"");
 क्रम(i1_पूर्णांक = n_पूर्णांक - 1; i1_पूर्णांक >= 1; i1_पूर्णांक = i1_पूर्णांक-1)
 अणु
  प्र_लिखो(tws__S,"%s%s%s%s%s",d_S,"+(",पंचांगp_S[i1_पूर्णांक + 1],")*(",temp_S[i1_पूर्णांक]);
  म_नकल(d_S,tws__S);
  प्र_लिखो(tws__S,"%s%s",e_S,")");
  म_नकल(e_S,tws__S);
 पूर्ण
 प्र_लिखो(h_S,"%s%s%s%s%s%s",LEFT_S(h_S, i_पूर्णांक - 1),"[",d_S,e_S,"]",MID_S(h_S, g_पूर्णांक + 1, LMAX));
 /* RETURN */
 दीर्घ_लाँघ(j__buf[--j__lev],1);
पूर्ण


/*- User SUB--Start -*/
पूर्णांक sparser(अक्षर  *h_S, पूर्णांक   *z_पूर्णांक, अक्षर  *bin_S)
अणु
/* SHARED: nl% */

  पूर्णांक  leng_पूर्णांक, olen_पूर्णांक, i_पूर्णांक, bcnt_पूर्णांक, togfl_पूर्णांक, j_पूर्णांक, j0_पूर्णांक, j1_पूर्णांक, typ_पूर्णांक;
  अक्षर L_S[LMAX], R_S[LMAX], prt_S[LMAX];

  अक्षर c;
 /* finds left and right opeअक्रमs of binary operation 'bin$': */
 /* eg. (a + b) ^ ((a - 1) * 2) */
 /* On input z% is the position where the lefपंचांगost अक्षरacter of चालक */
 /* appears in h$. Both h$ and z% are changed at the निकास, according to bin$. */

 म_नकल(L_S,"");
 म_नकल(R_S,"");
 म_नकल(prt_S,"");
 leng_पूर्णांक = LEN(h_S);
 olen_पूर्णांक = LEN(bin_S);
 /* Left: */
 i_पूर्णांक = *z_पूर्णांक - 1;   /* Bracket & quotes counters */
 bcnt_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
 जबतक(म_भेद(MID_S(h_S, i_पूर्णांक, 1), " ") == 0 && i_पूर्णांक >= 1)
 अणु
  i_पूर्णांक = i_पूर्णांक - 1;
 पूर्ण
 अगर(i_पूर्णांक <= 0)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s%s%s% d \n","ERROR in parsing math expression: ",h_S," in line No",nl_पूर्णांक);
      निकास(1);
 पूर्ण
 j_पूर्णांक = i_पूर्णांक;
     c = h_S[j_पूर्णांक-1];
     अगर (c == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
     अगर (c == ')' && togfl_पूर्णांक == 0) bcnt_पूर्णांक++;
     जबतक ((!(c==' ' && bcnt_int==0 || c=='(' && bcnt_पूर्णांक<0) || togfl_पूर्णांक==1) && j_पूर्णांक<=leng_पूर्णांक) अणु
 j_पूर्णांक = j_पूर्णांक - 1;
 अगर(j_पूर्णांक == 0)
 अणु
  जाओ Lab_197;
 पूर्ण
      c = h_S[j_पूर्णांक-1];
      अगर (c == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
 अगर(togfl_पूर्णांक == 0)
 अणु
       अगर (c == ')') bcnt_पूर्णांक++;
       अगर (c == '(') bcnt_पूर्णांक--;
 पूर्ण
     पूर्ण
Lab_197:
 म_नकल(L_S,MID_S(h_S, j_पूर्णांक + 1, i_पूर्णांक - j_पूर्णांक));
 j0_पूर्णांक = j_पूर्णांक;
 /* Right: */
 i_पूर्णांक = *z_पूर्णांक + olen_पूर्णांक;   /* Bracket & quotes counters */
 bcnt_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
 जबतक(म_भेद(MID_S(h_S, i_पूर्णांक, 1), " ") == 0 && i_पूर्णांक < leng_पूर्णांक)
 अणु
  i_पूर्णांक = i_पूर्णांक + 1;
 पूर्ण
 j_पूर्णांक = i_पूर्णांक;
     c = h_S[j_पूर्णांक-1];
     अगर (c == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
     अगर (c == '(') bcnt_पूर्णांक++;
     जबतक ((!(c==' ' && bcnt_int==0 || c==')' && bcnt_पूर्णांक<0) || togfl_पूर्णांक==1) && j_पूर्णांक<=leng_पूर्णांक) अणु
 j_पूर्णांक = j_पूर्णांक + 1;
      c = h_S[j_पूर्णांक-1];
      अगर (c == '"') togfl_पूर्णांक = 1 - togfl_पूर्णांक;
 अगर(togfl_पूर्णांक == 0)
 अणु
       अगर (c == '(') bcnt_पूर्णांक++;
       अगर (c == ')') bcnt_पूर्णांक--;
 पूर्ण
     पूर्ण
 म_नकल(R_S,MID_S(h_S, i_पूर्णांक, j_पूर्णांक - i_पूर्णांक));
 j1_पूर्णांक = j_पूर्णांक;

 /* math ^ */
 अगर(म_भेद(bin_S, "^") == 0)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s%s","pow(",L_S,",",R_S,")");
  प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, j0_पूर्णांक),prt_S,RIGHT_S(h_S, leng_पूर्णांक - j1_पूर्णांक + 1));
  *z_पूर्णांक = j0_पूर्णांक + LEN(prt_S);
  जाओ Lab_199;
 पूर्ण

 /* logical = */
 अगर(म_भेद(bin_S, "=") == 0)
 अणु
  vartyp(L_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 7)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d \n","ERROR in line No",nl_पूर्णांक);
   ख_लिखो(मानक_त्रुटि,"%s%s\n","string expressions not (yet) allowed in logical: ",h_S);
       निकास(1);
  पूर्ण
  अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
  अणु
   प्र_लिखो(h_S,"%s%s%s%s%s%s%s",LEFT_S(h_S, j0_पूर्णांक),"strcmp(",L_S,", ",R_S,") == 0",RIGHT_S(h_S, leng_पूर्णांक - j1_पूर्णांक + 1));
   *z_पूर्णांक = *z_पूर्णांक + 14 + LEN(R_S);
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, *z_पूर्णांक - 1),"==",RIGHT_S(h_S, leng_पूर्णांक - *z_पूर्णांक));
   *z_पूर्णांक = *z_पूर्णांक + 1;
  पूर्ण
  जाओ Lab_199;
 पूर्ण

 /* logical <> */
 अगर(म_भेद(bin_S, "<>") == 0)
 अणु
  vartyp(L_S, &typ_पूर्णांक);
  अगर(typ_पूर्णांक == 7)
  अणु
   ख_लिखो(मानक_त्रुटि,"%s% d \n","ERROR in line No",nl_पूर्णांक);
   ख_लिखो(मानक_त्रुटि,"%s%s\n","string expressions not (yet) allowed in logical: ",h_S);
       निकास(1);
  पूर्ण
  अगर(typ_पूर्णांक == 5 || typ_पूर्णांक == 15)
  अणु
   प्र_लिखो(h_S,"%s%s%s%s%s%s%s",LEFT_S(h_S, j0_पूर्णांक),"strcmp(",L_S,", ",R_S,") != 0",RIGHT_S(h_S, leng_पूर्णांक - j1_पूर्णांक + 1));
   *z_पूर्णांक = *z_पूर्णांक + 14 + LEN(R_S);
  पूर्ण
  अन्यथा
  अणु
   प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, *z_पूर्णांक - 1),"!=",RIGHT_S(h_S, leng_पूर्णांक - *z_पूर्णांक - 1));
   *z_पूर्णांक = *z_पूर्णांक + 1;
  पूर्ण
  जाओ Lab_199;
 पूर्ण

 अगर(म_भेद(bin_S, "MOD") == 0)
 अणु
  प्र_लिखो(prt_S,"%s%s%s%s%s","((int)(.5+",L_S,")) % ((int)(.5+",R_S,"))");
  प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, j0_पूर्णांक),prt_S,RIGHT_S(h_S, leng_पूर्णांक - j1_पूर्णांक + 1));
  *z_पूर्णांक = j0_पूर्णांक + LEN(prt_S);
  जाओ Lab_199;
 पूर्ण

Lab_199:   /* End sparser */
;पूर्ण


/*- User SUB--Start -*/
पूर्णांक splitdec(अक्षर  *varlist_S, पूर्णांक   *ntok_पूर्णांक, पूर्णांक   *dn_पूर्णांक)
अणु
/* SHARED: पंचांगp$() */

  पूर्णांक  maxl_पूर्णांक, i_पूर्णांक, n_पूर्णांक, lb_पूर्णांक;
  अक्षर b_S[LMAX];

 /* Split too दीर्घ declaration lines पूर्णांकo pieces not दीर्घer than maxl% अक्षरs */
 /* Declaration lines are strings of tokens delimited by "," */
 maxl_पूर्णांक = 64;
 i_पूर्णांक = 1;
 *ntok_पूर्णांक = 0;
 *dn_पूर्णांक = *dn_पूर्णांक + 2;
 अगर(LEN(varlist_S) > maxl_पूर्णांक)
 अणु
  tokenix(varlist_S, &n_पूर्णांक, ",", "");
Lab_119:
  म_नकल(b_S,"");
  lb_पूर्णांक = *dn_पूर्णांक;
  जबतक(lb_पूर्णांक + LEN(पंचांगp_S[i_पूर्णांक]) <= maxl_पूर्णांक && i_पूर्णांक <= n_पूर्णांक)
  अणु
   प्र_लिखो(tws__S,"%s%s%s",b_S,", ",पंचांगp_S[i_पूर्णांक]);
   म_नकल(b_S,tws__S);
   lb_पूर्णांक = lb_पूर्णांक + LEN(पंचांगp_S[i_पूर्णांक]) + *dn_पूर्णांक;
   i_पूर्णांक = i_पूर्णांक + 1;
  पूर्ण
  *ntok_पूर्णांक = *ntok_पूर्णांक + 1;
  म_नकल(पंचांगp_S[*ntok_पूर्णांक],MID_S(b_S, 3, LEN(b_S) - 2));
  अगर(i_पूर्णांक <= n_पूर्णांक)
  अणु
   जाओ Lab_119;
  पूर्ण
 पूर्ण
 अन्यथा
 अणु
  *ntok_पूर्णांक = 1;
  म_नकल(पंचांगp_S[1],varlist_S);
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक stringx(अक्षर  *h_S)
अणु
  पूर्णांक  i_पूर्णांक, togfl_पूर्णांक, leng_पूर्णांक;
  अक्षर b_S[LMAX];

 /* String स्थिरants pretprocessor "...\.." --> "...\\..." */
 /* Called from the following processors/translators: */
 /* DO WHILE, WHILE, IF.., PRINT, PRINT #, INPUT, exp */
 i_पूर्णांक = 1;
 togfl_पूर्णांक = 0;
 leng_पूर्णांक = LEN(h_S);
 जबतक(i_पूर्णांक <= leng_पूर्णांक - 1)
 अणु
  म_नकल(b_S,MID_S(h_S, i_पूर्णांक, 1));
  अगर(ASC(b_S) == 34)
  अणु
   togfl_पूर्णांक = 1 - togfl_पूर्णांक;
   जाओ Lab_191;
  पूर्ण
  अगर(म_भेद(b_S, "\\") == 0)
  अणु
   प्र_लिखो(h_S,"%s%s%s",LEFT_S(h_S, i_पूर्णांक),"\\",RIGHT_S(h_S, leng_पूर्णांक - i_पूर्णांक));
   leng_पूर्णांक = 1 + leng_पूर्णांक;
   i_पूर्णांक = 1 + i_पूर्णांक;
  पूर्ण
Lab_191:
  i_पूर्णांक = 1 + i_पूर्णांक;
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक tokenix(अक्षर  *h_S, पूर्णांक   *ntok_पूर्णांक, अक्षर  *sep_S, अक्षर  *sep2_S)
अणु
/* SHARED: पंचांगp$() */

  पूर्णांक  brfl_पूर्णांक, togfl_पूर्णांक, leng_पूर्णांक, i_पूर्णांक, j_पूर्णांक;
  अक्षर z_S[LMAX], b_S[LMAX];

      अक्षर b;
 /*   Tokenizes h$ with respect to separators sep$, sep2$. */
 /*   Separator , is special: a,,b  gives 3 tokens: "a", "", "b" (ex. क्रम LINE) */
 /*   Returns list of ntok% bare (gulix !) tokens in पंचांगp$(), h$ unchanged. */
 *ntok_पूर्णांक = 0;
 brfl_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
 प्र_लिखो(z_S,"%s%s",h_S,sep_S);
 leng_पूर्णांक = LEN(z_S);
 म_नकल(b_S,"");
 अगर(म_भेद(h_S, "") == 0)
 अणु
  जाओ Lab_169;
 पूर्ण
 i_पूर्णांक = 0;
 j_पूर्णांक = 1;
      जबतक (i_पूर्णांक < leng_पूर्णांक)
      अणु
       b = z_S[i_पूर्णांक];
       अगर (b == 34) अणु togfl_पूर्णांक = 1 - togfl_पूर्णांक; जाओ Lab_168; पूर्ण
       अगर (! togfl_पूर्णांक)
       अणु
        अगर (b == '(') अणु brfl_पूर्णांक++; जाओ Lab_168; पूर्ण
        अगर (b == ')') अणु brfl_पूर्णांक--; जाओ Lab_168; पूर्ण
       पूर्ण
       अगर((b==sep_S[0] || b==sep2_S[0]) && !brfl_पूर्णांक && !togfl_पूर्णांक)
       अणु
        अगर (i_पूर्णांक + 1 - j_पूर्णांक > 0 || b == ',') अणु
 म_नकल(b_S,MID_S(z_S, j_पूर्णांक, i_पूर्णांक + 1 - j_पूर्णांक));
 gulix(b_S);
 *ntok_पूर्णांक = *ntok_पूर्णांक + 1;
 म_नकल(पंचांगp_S[*ntok_पूर्णांक],b_S);
 अगर(*ntok_पूर्णांक > TMAX)
 अणु
  ख_लिखो(मानक_त्रुटि,"%s\n","qb2c: tokenix: Dimension of tmp$() too small. Enlarge TMAX and recompile qb2c!");
          निकास(1);
 पूर्ण
        पूर्ण
 j_पूर्णांक = i_पूर्णांक + 2;
       पूर्ण
Lab_168:
 i_पूर्णांक = i_पूर्णांक + 1;
      पूर्ण
Lab_169:
;पूर्ण


/*- User SUB--Start -*/
पूर्णांक varpost(अक्षर  *line_S)
अणु
/* SHARED: stripff% */

  पूर्णांक  lleng_पूर्णांक, i_पूर्णांक, togfl_पूर्णांक, पंचांगpfl_पूर्णांक, g_पूर्णांक, brcnt_पूर्णांक, n_पूर्णांक;
  अक्षर z_S[LMAX], d_S[LMAX];

   अक्षर b_S[10], b, c, t;
 /* (post)processing i% -> i_पूर्णांक, i& -> i_दीर्घ, c$ -> c_S */
 /* and array brackets (except in declarations which is करोne). */
 /* Also handles MID$(a$,i%) -> MID_S(a_S,i_पूर्णांक,LMAX) */
 /* This works a line at the समय: line$ is input and output */
       t = 32;
 lleng_पूर्णांक = LEN(line_S);
 i_पूर्णांक = 1;
 togfl_पूर्णांक = 0;
 पंचांगpfl_पूर्णांक = 0;
 जबतक(i_पूर्णांक <= lleng_पूर्णांक)
 अणु
  म_नकल(z_S,MID_S(line_S, i_पूर्णांक, 2));
        b = line_S[i_पूर्णांक-1];
        अगर (b == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
  अगर(togfl_पूर्णांक == 0)
  अणु
         अगर (म_भेदन(&line_S[i_पूर्णांक-1],"/*",2)==0) अणु पंचांगpfl_पूर्णांक=1; जाओ Lab_205;पूर्ण
         अगर (म_भेदन(&line_S[i_पूर्णांक-1],"*/",2)==0) अणु पंचांगpfl_पूर्णांक=0; जाओ Lab_205;पूर्ण
  पूर्ण
  अगर(togfl_पूर्णांक == 0 && पंचांगpfl_पूर्णांक == 0)
  अणु
         अगर (b=='$')
         अणु
          अगर (i_पूर्णांक >= 4)
          अणु
   अगर(म_भेद(MID_S(line_S, i_पूर्णांक - 3, 4), "MID$") == 0)
   अणु
    g_पूर्णांक = i_पूर्णांक + 2;
    brcnt_पूर्णांक = 1;
            जबतक (brcnt_पूर्णांक > 0)
            अणु
             c = line_S[g_पूर्णांक];
             g_पूर्णांक++;
             अगर (c == '(') brcnt_पूर्णांक++;
             अगर (c == ')') brcnt_पूर्णांक--;
            पूर्ण
    म_नकल(d_S,MID_S(line_S, i_पूर्णांक + 2, g_पूर्णांक - i_पूर्णांक - 2));
    tokenix(d_S, &n_पूर्णांक, ",", "");
    अगर(n_पूर्णांक == 2)
    अणु
     प्र_लिखो(line_S,"%s%s%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),"_S(",d_S,", LMAX",MID_S(line_S, g_पूर्णांक, LMAX));
     lleng_पूर्णांक = lleng_पूर्णांक + 7;
     i_पूर्णांक = i_पूर्णांक + 1;
     जाओ Lab_205;
    पूर्ण
    अन्यथा
    अणु
     प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),"_S",MID_S(line_S, i_पूर्णांक + 1, LMAX));
     lleng_पूर्णांक = lleng_पूर्णांक + 1;
     i_पूर्णांक = i_पूर्णांक + 1;
     जाओ Lab_205;
    पूर्ण
   पूर्ण
   अन्यथा
   अणु
    प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),"_S",MID_S(line_S, i_पूर्णांक + 1, LMAX));
    lleng_पूर्णांक = lleng_पूर्णांक + 1;
    i_पूर्णांक = i_पूर्णांक + 1;
    जाओ Lab_205;
   पूर्ण
          पूर्ण
          अन्यथा
          अणु
   प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),"_S",MID_S(line_S, i_पूर्णांक + 1, LMAX));
   lleng_पूर्णांक = lleng_पूर्णांक + 1;
   i_पूर्णांक = i_पूर्णांक + 1;
   जाओ Lab_205;
          पूर्ण
         पूर्ण
         अगर( 95<=t && t<=122 || 65<=t && t<=90 || 48<=t && t<=57)
         अणु
          अगर (b=='%')
          अणु
           b_S[0]='\0'; c=-1; अगर(stripff_पूर्णांक==0) अणुम_नकल(b_S,"_int"); c=3;पूर्ण
           line_S[i_पूर्णांक-1]='\0'; म_नकल(tws__S, line_S); म_जोड़ो(tws__S, b_S);
           म_जोड़ो(tws__S, &line_S[i_पूर्णांक]); म_नकल(line_S, tws__S);
           lleng_पूर्णांक = lleng_पूर्णांक + c; i_पूर्णांक = i_पूर्णांक + c;
   जाओ Lab_205;
          पूर्ण
          अन्यथा
          अणु
           अगर ( b=='&' )
           अणु
            b_S[0]='\0'; c=-1; अगर(stripff_पूर्णांक==0) अणुम_नकल(b_S,"_long"); c=4;पूर्ण
   प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),b_S,MID_S(line_S, i_पूर्णांक + 1, LMAX));
            lleng_पूर्णांक = lleng_पूर्णांक + c; i_पूर्णांक = i_पूर्णांक + c;
   जाओ Lab_205;
           पूर्ण
           अन्यथा
           अणु
            अगर ( b=='#' )
            अणु
             b_S[0]='\0'; c=-1; अगर(stripff_पूर्णांक==0) अणुम_नकल(b_S,"_double"); c=6;पूर्ण
   प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),b_S,MID_S(line_S, i_पूर्णांक + 1, LMAX));
             lleng_पूर्णांक = lleng_पूर्णांक + c; i_पूर्णांक = i_पूर्णांक + c;
   जाओ Lab_205;
            पूर्ण
            अन्यथा
            अणु
             अगर ( b=='?' )
             अणु
              b_S[0]='\0'; c=-1; अगर(stripff_पूर्णांक==0) अणुम_नकल(b_S,"_byte"); c=4;पूर्ण
   प्र_लिखो(line_S,"%s%s%s",LEFT_S(line_S, i_पूर्णांक - 1),b_S,MID_S(line_S, i_पूर्णांक + 1, LMAX));
              lleng_पूर्णांक = lleng_पूर्णांक + c; i_पूर्णांक = i_पूर्णांक + c;
   जाओ Lab_205;
             पूर्ण
            पूर्ण
           पूर्ण
          पूर्ण
         पूर्ण
  पूर्ण
Lab_205:
       t = b; i_पूर्णांक++;
 पूर्ण
पूर्ण


/*- User SUB--Start -*/
पूर्णांक vartyp(अक्षर  *token_S, पूर्णांक   *ttyp_पूर्णांक)
अणु
/* SHARED: पूर्णांकflg%, Dflg%, करोblflg%, दीर्घflg%, स्थिरfl% */
/* SHARED: tcnst$(), ncnst%, defstr%, defपूर्णांक%, defdbl% */

  पूर्णांक  ad_पूर्णांक, leng_पूर्णांक, ilog_पूर्णांक, jlog_पूर्णांक, i_पूर्णांक, expf_पूर्णांक, strf_पूर्णांक, brfl_पूर्णांक, togfl_पूर्णांक;
  अक्षर tok_S[LMAX];

   अटल अक्षर cx, b, ct;
 /* Determins the type 'ttyp%' of the token being variable or array: */
 /* Takes पूर्णांकo account पूर्णांकflg%, करोblflg%, दीर्घflg% and defstr% flags. */
 /* defxxx% flags (should) have the highest priority and override others */
 /* Constants (eg 321.) are either typ%=2 (no decimal करोt) or typ%=4. */
 /* स्थिरfl% = 1 => it is a स्थिरant of a given type. */
 /* ttyp% = 0 => undecided. */
 /* tok$ must be ran through 'gulix'. */
 /*         1 => पूर्णांक */
 /*         2 => दीर्घ */
 /*         3 => भग्न */
 /*         4 => द्विगुन */
 /*         5 => string */
 /*         6 => numerical expression */
 /*         7 => string expression */
 /*         8 => byte (अचिन्हित अक्षर) */
 /*         9 => चिन्हित लघु पूर्णांक (2 byte) */
 /*        10 => array of चिन्हित लघु पूर्णांक (2 byte) or function */
 /*        11 => array of पूर्णांक     or function */
 /*        12 => array of दीर्घ    or function */
 /*        13 => array of भग्न   or function */
 /*        14 => array of द्विगुन  or function */
 /*        15 => array of strings or function */
 /*        18 => array of bytes (अचिन्हित अक्षरs) */
 /*        20 => declared CONSTant number */
 /*        25 => declared CONSTant string  NOT YET */
 /*       >30 => poपूर्णांकer of a type typ%-30 NOT YET (710, locally) */
 /* variable types when पूर्णांकflg% or Dflg% flag set */
 /* -i: i,j,k,l,m,n  (upper or lower हाल, अगर not $) are implicit 'int' type */
 /* -d: d (upper or lower हाल, अगर not $) are implicit 'double' type */
 /* sorting variable types (शेष): */
 *ttyp_पूर्णांक = 0;
 स्थिरfl_पूर्णांक = 0;
 ad_पूर्णांक = 0;
 leng_पूर्णांक = LEN(token_S);
 ilog_पूर्णांक = 0;   /* For -c or -d flags set */
 jlog_पूर्णांक = 0;
 /* Eliminate eventual brackets: */
    अगर (token_S[0]=='(' && token_S[leng_int-1]==')') अणु
     म_नकल(tok_S, &token_S[1]); tok_S[leng_पूर्णांक=म_माप(tok_S)-1]='\0';
    पूर्ण अन्यथा अणु
 म_नकल(tok_S,token_S);
    पूर्ण
 /* strip leading + - */
    i_पूर्णांक = 0; ct = tok_S[0];
    जबतक (ct && (ct=='-' || ct=='+' || ct==' ')) {tok_S[i_int] = ' '; ct = tok_S[++i_पूर्णांक]; पूर्ण
 gulix(tok_S);
 leng_पूर्णांक = LEN(tok_S);
 अगर(leng_पूर्णांक == 0)
 अणु
  जाओ Lab_149;
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= ncnst_पूर्णांक; i_पूर्णांक++)
 अणु
  अगर(म_भेद(tok_S, tcnst_S[i_पूर्णांक]) == 0)
  अणु
   *ttyp_पूर्णांक = 20;
   जाओ Lab_149;
  पूर्ण
 पूर्ण
 /* Test क्रम expression: */
 expf_पूर्णांक = 0;
 strf_पूर्णांक = 0;
 brfl_पूर्णांक = 0;
 togfl_पूर्णांक = 0;
 अगर(leng_पूर्णांक == 1)
 अणु
  जाओ Lab_147;
 पूर्ण
 क्रम(i_पूर्णांक = 1; i_पूर्णांक <= leng_पूर्णांक; i_पूर्णांक++)
 अणु
      cx = tok_S[i_पूर्णांक - 1];
      अगर (cx == 34) togfl_पूर्णांक = 1 - togfl_पूर्णांक;
  अगर(togfl_पूर्णांक == 0)
  अणु
       अगर ( cx == '(' ) brfl_पूर्णांक = brfl_पूर्णांक + 1;
       अगर ( cx == ')' ) brfl_पूर्णांक = brfl_पूर्णांक - 1;
  पूर्ण
  अगर(brfl_पूर्णांक == 0 && togfl_पूर्णांक == 0)
  अणु
       अगर (cx == '$') strf_पूर्णांक = 1;
       अगर ( cx == 34 ) अणु strf_पूर्णांक = 1; स्थिरfl_पूर्णांक = 1; पूर्ण
       अगर ( cx == 32 ) expf_पूर्णांक =1;
       अगर ( cx == '+') expf_पूर्णांक =1;
  पूर्ण
 पूर्ण
 अगर(expf_पूर्णांक == 1 && strf_पूर्णांक == 0)
 अणु
  *ttyp_पूर्णांक = 6;
     ct = बड़े(tok_S[0]);
     अगर(ct >= 'A' && ct <= 'Z' && def__str[ct - 'A']) *ttyp_पूर्णांक = 7;
  जाओ Lab_149;
 पूर्ण
 अगर(expf_पूर्णांक == 1 && strf_पूर्णांक == 1)
 अणु
  *ttyp_पूर्णांक = 7;
  जाओ Lab_149;
 पूर्ण
Lab_147:
 अगर(VAL(tok_S) != 0 || म_भेद(LEFT_S(tok_S, 1), "0") == 0)
 अणु
  स्थिरfl_पूर्णांक = 1;
  i_पूर्णांक = 1;
     cx = tok_S[0];
     जबतक ( cx != '.' && cx != '!' && i_पूर्णांक < leng_पूर्णांक )
     अणु
      i_पूर्णांक++;
      cx = tok_S[i_पूर्णांक - 1];
     पूर्ण
     अगर (cx == '.')
     अणु
       *ttyp_पूर्णांक = 3;
     पूर्ण
     अन्यथा
     अणु
      अगर (cx == '!')
      अणु
       *ttyp_पूर्णांक = 3;
       tok_S[i_पूर्णांक - 1] = '.';
      पूर्ण
      अन्यथा
      अणु
       *ttyp_पूर्णांक = 1;
      पूर्ण
     पूर्ण
  जाओ Lab_149;
 पूर्ण
Lab_146:
    cx = tok_S[leng_पूर्णांक-1]; i_पूर्णांक = leng_पूर्णांक;
    अगर (cx == ')')
    अणु
 i_पूर्णांक = 1;
 ad_पूर्णांक = 10;
     जबतक (tok_S[i_पूर्णांक] != '(') i_पूर्णांक++;
     cx = tok_S[i_पूर्णांक - 1];
    पूर्ण
 अगर(पूर्णांकflg_पूर्णांक == 1)
 अणु
     b = tok_S[0];
     अगर((b >= 105 && b <= 110 || b >= 73 && b <= 78) && cx != '&' && cx != '$')
     अणु
  ilog_पूर्णांक = 1;
     पूर्ण
 पूर्ण
 अगर(Dflg_पूर्णांक == 1)
 अणु
     अगर (tok_S[0] == 68 || tok_S[0] == 100)
     अणु
  jlog_पूर्णांक = 1;
     पूर्ण
 पूर्ण
    अगर (cx == '%' || ilog_पूर्णांक == 1)
    अणु
 *ttyp_पूर्णांक = 1;
     अगर (ad_पूर्णांक == 10 && i_पूर्णांक >= 3 && tok_S[i_पूर्णांक-2] == '_') *ttyp_पूर्णांक = 9;
     अगर (i_पूर्णांक >= 3 && tok_S[i_पूर्णांक-2] == '_') *ttyp_पूर्णांक = 9;
    पूर्ण
    अन्यथा
    अणु
     अगर (cx == '$' || cx == 34)
     अणु
 *ttyp_पूर्णांक = 5;
     पूर्ण
     अन्यथा
     अणु
      अगर (cx == '&')
      अणु
 *ttyp_पूर्णांक = 2;
      पूर्ण
      अन्यथा
      अणु
       अगर (cx == '?')
       अणु
 *ttyp_पूर्णांक = 8;
       पूर्ण
       अन्यथा
       अणु
        अगर (cx == '#' || jlog_पूर्णांक == 1)
        अणु
 *ttyp_पूर्णांक = 4;
        पूर्ण
        अन्यथा
        अणु
 *ttyp_पूर्णांक = 3;
        पूर्ण
       पूर्ण
      पूर्ण
     पूर्ण
    पूर्ण
 अगर(defstr_पूर्णांक && *ttyp_पूर्णांक == 3)
 अणु
     अगर(बड़े(tok_S[0]) >= 'A' && toupper(tok_S[0]) <= 'Z') अणु
      अगर(def__str[बड़े(tok_S[0]) - 'A'] && *ttyp_पूर्णांक == 3) *ttyp_पूर्णांक = 5;
     पूर्ण
 पूर्ण
 अगर(defपूर्णांक_पूर्णांक && *ttyp_पूर्णांक == 3)
 अणु
     अगर(बड़े(tok_S[0]) >= 'A' && toupper(tok_S[0]) <= 'Z') अणु
      अगर(def__पूर्णांक[बड़े(tok_S[0]) - 'A'] && *ttyp_पूर्णांक == 3) *ttyp_पूर्णांक = 1;
     पूर्ण
 पूर्ण
 अगर(defdbl_पूर्णांक && *ttyp_पूर्णांक == 3)
 अणु
     अगर(बड़े(tok_S[0]) >= 'A' && toupper(tok_S[0]) <= 'Z') अणु
      अगर(def__dbl[बड़े(tok_S[0]) - 'A'] && *ttyp_पूर्णांक == 3) *ttyp_पूर्णांक = 4;
     पूर्ण
 पूर्ण
 *ttyp_पूर्णांक = *ttyp_पूर्णांक + ad_पूर्णांक;
 अगर(*ttyp_पूर्णांक == 13)
 अणु
     अगर (स_भेद(tok_S,"LEN(",4)==0 || स_भेद(tok_S,"ASC(",4)==0 || स_भेद(tok_S,"EOF(",4)==0 || स_भेद(tok_S,"XLEN(",5)==0) *ttyp_पूर्णांक=11;
     अगर (स_भेद(tok_S,"Int(",4)==0 || स_भेद(tok_S,"Nint(",5)==0 || स_भेद(tok_S,"LOF(",4)==0) *ttyp_पूर्णांक=12;
 पूर्ण
 अगर(*ttyp_पूर्णांक == 3)
 अणु
  /*  IF tok$ = "TIMER" THEN ttyp% = 13: Sredjeno u 650 */
  अगर(म_भेद(tok_S, "RND") == 0)
  अणु
   *ttyp_पूर्णांक = 14;
  पूर्ण
 पूर्ण
 अगर(दीर्घflg_पूर्णांक == 1)
 अणु
     चयन(*ttyp_पूर्णांक) अणु
          हाल  1: *ttyp_पूर्णांक = 2;
                   अवरोध;
          हाल 11: *ttyp_पूर्णांक =12;
                   अवरोध;
     पूर्ण
 पूर्ण
 अगर(करोblflg_पूर्णांक == 1)
 अणु
     चयन(*ttyp_पूर्णांक) अणु
          हाल  3: *ttyp_पूर्णांक = 4;
                   अवरोध;
          हाल 13: *ttyp_पूर्णांक =14;
                   अवरोध;
     पूर्ण
 पूर्ण
Lab_149:   /* End vartyp */
;पूर्ण


/*- User SUB--Start -*/
पूर्णांक helpm()
अणु
 ख_लिखो(मानक_त्रुटि,"%s\n","-i or -int  => implicit integers i*,j*,k*,l*,m*,n* or upper case");
 ख_लिखो(मानक_त्रुटि,"%s\n","-d or -double => all floats -> double");
 ख_लिखो(मानक_त्रुटि,"%s\n","-c64 or -C64 => C-64 specific syntax, switches on -b flag also");
 ख_लिखो(मानक_त्रुटि,"%s\n","-p or -post => do not perform postprocessing varnames");
 ख_लिखो(मानक_त्रुटि,"%s\n","-l or -long => all integers (except short)-> long");
 ख_लिखो(मानक_त्रुटि,"%s\n","-b or -bcpp => insensitive to case & spacing in QBASIC text");
 ख_लिखो(मानक_त्रुटि,"%s\n","-a or -ansi => OBSOLETE and NOT USED");
 ख_लिखो(मानक_त्रुटि,"%s\n","-c or -C    => allows C text lines commented with 'C '");
 ख_लिखो(मानक_त्रुटि,"%s\n","-m or -M    => disallow logical expr. in math. expression");
 ख_लिखो(मानक_त्रुटि,"%s\n","-w          => AND, OR operate bitwise");
 ख_लिखो(मानक_त्रुटि,"%s\n","-t or -T    => INKEY_S is dead (<termios.h> etc. not specified)");
 ख_लिखो(मानक_त्रुटि,"%s\n","-I          => INKEY_S is of sample type (no internal loop)");
 ख_लिखो(मानक_त्रुटि,"%s\n","-n or -N    => To supress SHELL command interpreter: all cmds literal");
 ख_लिखो(मानक_त्रुटि,"%s\n","-u          => Do not update SCREEN after every LINE, PSET, etc.");
 ख_लिखो(मानक_त्रुटि,"%s\n","-s          => Strip type sufixes from variable and function names");
 ख_लिखो(मानक_त्रुटि,"%s\n","-D          => implicit doubles d*, D*");
 ख_लिखो(मानक_त्रुटि,"%s\n","-r          => integer fractions became double: '/' -> '/ (double)'");
 ख_लिखो(मानक_त्रुटि,"%s\n","-v          => print version and exit");
 ख_लिखो(मानक_त्रुटि,"%s\n","-g          => print debug messages (expert)");
 ख_लिखो(मानक_त्रुटि,"%s\n","-A          => convert array arguments to integer as in true BASIC");
 ख_लिखो(मानक_त्रुटि,"%s\n","-L          => set LMAX other than default (1024), must be 1-32767");
 ख_लिखो(मानक_त्रुटि,"%s\n","-P          => treat PRINT as print to the current graphics screen NOT OPERATIONAL");
 ख_लिखो(मानक_त्रुटि,"%s\n","-col        => default LINE color is the foreground (else the last set color)");
 ख_लिखो(मानक_त्रुटि,"%s\n","-B          => maximum compliance with BASIC: -A -r -b -P -I -col -w");
 ख_लिखो(मानक_त्रुटि,"%s\n","-h, -?      => print this help message");
पूर्ण
/*- User SUBs--End -*/

/* Translates of used QB's पूर्णांकrinsic functions: */

बाह्य अक्षर *SPACE_S(पूर्णांक n)
अणु
 पूर्णांक i;

 अगर (++j__S == 16) j__S=0;
 अगर (n < 0) n = 0;
 म_नकल(w__S[j__S],"");
 क्रम(i = 1; i <= n; i++)
 अणु
  म_जोड़ो(w__S[j__S]," ");
 पूर्ण
 वापस w__S[j__S];
पूर्ण

बाह्य अक्षर *MID_S(अक्षर *a_S, पूर्णांक start, पूर्णांक length)
अणु

 अगर (++j__S == 16) j__S=0;
 अगर(length < 0) अणु
  म_लिखो("Error: in MID_S: length < 0\n");
  निकास(0); पूर्ण
 अगर(start  < 0) अणु
  म_लिखो("Error: in MID_S: start < 1\n");
  निकास(0); पूर्ण
 अगर(start > म_माप(a_S))
 अणु w__S[j__S][0]='\0'; पूर्ण
 अन्यथा
 अणु म_नकलन(w__S[j__S], &a_S[start-1], length);
   w__S[j__S][length]='\0'; पूर्ण

 वापस w__S[j__S];
पूर्ण

बाह्य अक्षर *LEFT_S(अक्षर *a_S, पूर्णांक length)
अणु

 अगर (++j__S == 16) j__S=0;
 अगर(length < 0) अणु
  म_लिखो("Error: in LEFT_S: length < 0\n");
  निकास(0); पूर्ण
 म_नकलन(w__S[j__S], a_S, length);
 w__S[j__S][length]='\0';

 वापस w__S[j__S];
पूर्ण

बाह्य अक्षर *RIGHT_S(अक्षर *a_S, पूर्णांक length)
अणु
 पूर्णांक  start;

 अगर (++j__S == 16) j__S=0;
 अगर ((start = म_माप(a_S) - length) < 0) start = 0;
 अगर (length < 0) अणु
  म_लिखो("Error: in RIGHT_S: length < 0\n");
  निकास(0); पूर्ण
 म_नकलन(w__S[j__S], &a_S[start], length);
 w__S[j__S][length]='\0';

 वापस w__S[j__S];
पूर्ण

बाह्य अक्षर *STR_S(द्विगुन d)
अणु

 अगर (++j__S == 16) j__S=0;
 प्र_लिखो(w__S[j__S],"% G",d);
 वापस w__S[j__S];
पूर्ण

बाह्य अक्षर *CHR_S(पूर्णांक i)
अणु

 अगर (++j__S == 16) j__S=0;
 w__S[j__S][0]=i;
 w__S[j__S][1]='\0';
 वापस w__S[j__S];
पूर्ण

बाह्य दीर्घ ASC(अक्षर *c_S)
अणु
 अगर (++i__l == 16) i__l=0;
 अगर((w__l[i__l]=c_S[0]) < 0) w__l[i__l]=256+w__l[i__l];
 वापस w__l[i__l];
पूर्ण

बाह्य द्विगुन VAL(अक्षर *a_S)
अणु
 अगर (++i__d == 16) i__d = 0;
 w__d[i__d] = म_से_भ(a_S);
 वापस w__d[i__d];
पूर्ण

बाह्य पूर्णांक LEN(अक्षर *a_S)
अणु
 अगर (++i__d == 16) i__d = 0;
 w__d[i__d] = म_माप(a_S);
 वापस w__d[i__d];
पूर्ण

बाह्य दीर्घ Nपूर्णांक(द्विगुन x)
अणु
 वापस न्यूनमान(0.5 + x);
पूर्ण

बाह्य पूर्णांक eof(खाता *stream)
अणु
 अटल पूर्णांक c, istat;

 istat=((c=ख_अक्षर_लो(stream))==खातापूर्ण);
 अक्षर_वापस(c,stream);
 वापस istat;
पूर्ण

बाह्य अक्षर *COMMAND_S(पूर्णांक n_arg_पूर्णांक, अक्षर *argv_S[])
अणु
 पूर्णांक i;

 अगर (++j__S == 16) j__S=0;
 क्रम(i = 1; i <= n_arg_पूर्णांक; i++)
 अणु
  म_जोड़ो(w__S[j__S],argv_S[i]);
  म_जोड़ो(w__S[j__S]," ");
 पूर्ण
 w__S[j__S][म_माप(w__S[j__S])-1]='\0';
 वापस w__S[j__S];
पूर्ण

बाह्य द्विगुन DBL(द्विगुन d)
अणु
 अगर (++i__d == 16) i__d = 0;
 w__d[i__d] = d;
 वापस w__d[i__d];
पूर्ण

बाह्य व्योम RANDOMIZE(दीर्घ n)
अणु
 बेक्रम(n % 65536);
पूर्ण

बाह्य द्विगुन TIMER()
अणु
 काष्ठा समयval tv;
 काष्ठा समयzone tz;

 समय_लोofday(&tv, &tz);
 वापस ((tv.tv_sec % 86400)+tv.tv_usec/(द्विगुन)1000000);
पूर्ण

बाह्य अक्षर *TIME_S(पूर्णांक i)
अणु
 अटल काष्ठा पंचांग *tp;
 दीर्घ elapse_समय;

 अगर (++j__S == 16) j__S=0;
 समय(&elapse_समय);
 tp=स_स्थानीय(&elapse_समय);
 स_माला(w__S[j__S],LMAX,"%H:%M:%S",tp);
 वापस w__S[j__S];
पूर्ण

बाह्य पूर्णांक EXISTS(अक्षर *file_S)
अणु
 अगर(ख_खोलो(file_S, "r") == शून्य) वापस 0;
 वापस 1;
पूर्ण
